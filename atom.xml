<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>醉翁亭</title>
  <icon>https://www.gravatar.com/avatar/f73449a607015b3b0b98f3b3a930b149</icon>
  <subtitle>穷则独善其身，达则兼济天下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//www.zwting.com/"/>
  <updated>2017-11-15T03:48:24.000Z</updated>
  <id>//www.zwting.com/</id>
  
  <author>
    <name>醉翁亭</name>
    <email>x0hcker@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在台机器上登录两个GITHUB账号</title>
    <link href="//www.zwting.com/2017/11/12/2017-11-13-git-hacker/"/>
    <id>//www.zwting.com/2017/11/12/2017-11-13-git-hacker/</id>
    <published>2017-11-12T11:30:59.000Z</published>
    <updated>2017-11-15T03:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>    git config –global –unset user.name<br>    git config –global –unset user.email</p><pre><code>ssh-keygen -t rsa -C &quot;TEST2@gmail.com&quot; -f ~/.ssh/TEST2ssh-keygen -t rsa -C &quot;TEST1@gmail.com&quot; -f ~/.ssh/TEST1</code></pre><h3 id="TEST1-and-TEST2两个账号在GITHUB上"><a href="#TEST1-and-TEST2两个账号在GITHUB上" class="headerlink" title="TEST1 and TEST2两个账号在GITHUB上"></a>TEST1 and TEST2两个账号在GITHUB上</h3><pre><code>cat ~/.ssh/configHost gitlab.test.com  HostName gitlab.test.com  PreferredAuthentications publickey  IdentityFile ~/.ssh/innergitHost TEST1.github.com  HostName github.com  PreferredAuthentications publickey  IdentityFile ~/.ssh/TEST1Host TEST2.github.com  HostName github.com  User TEST2  PreferredAuthentications publickey  IdentityFile ~/.ssh/TEST2</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>git clone git@TEST2.github.com:TEST2/Alcman.gitcd project_name1git config  user.name &quot;TEST2&quot;git config  user.email &quot;TEST2@gmail.com&quot;cd project_name2git clone git@TEST1.github.com:TEST1/rake-flow.gitgit config  user.name &quot;TEST1&quot;git config  user.email &quot;TEST1@gmail.com&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      在台机器上登录两个GITHUB账号
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Erlang程序设计(第2版) 读书笔记【第二章】</title>
    <link href="//www.zwting.com/2017/11/12/2017-11-14-erlang-02/"/>
    <id>//www.zwting.com/2017/11/12/2017-11-14-erlang-02/</id>
    <published>2017-11-12T11:30:59.000Z</published>
    <updated>2017-11-17T10:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第2章-Erlang速览"><a href="#第2章-Erlang速览" class="headerlink" title="第2章 Erlang速览"></a>第2章 Erlang速览</h3><h5 id="变量和原子的语法"><a href="#变量和原子的语法" class="headerlink" title="变量和原子的语法"></a>变量和原子的语法</h5><ul><li>Erlang的变量只能绑定一次。</li><li>Erlang的变量以大写字母开头。</li></ul><h5 id="在-shell-里编译并运行-Hello-World"><a href="#在-shell-里编译并运行-Hello-World" class="headerlink" title="在 shell 里编译并运行 Hello World"></a>在 shell 里编译并运行 Hello World</h5><p>erl文件命令成 hello.erl 输入以下内容</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- <span class="keyword">module</span>(hello).</div><div class="line">- <span class="keyword">export</span>([start/<span class="number">0</span>]).</div><div class="line"></div><div class="line">start()-&gt;</div><div class="line">io:format(<span class="string">"hello world ~n"</span>).</div><div class="line">```</div><div class="line">编译并运行它，我们从保存hello.erl的目录里启动Erlang shell</div></pre></td></tr></table></figure><p>erl<br>Erlang/OTP 19 [erts-8.2] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]</p><p>Eshell V8.2  (abort with ^G)</p><p>1&gt; c(hello,debug_info).<br>{ok,hello}<br>9&gt; hello:start().<br>hello world<br>ok<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 并发</div><div class="line">- Erlang的基本并发单元是进程（process）。</div><div class="line">- 只能通过发送和接收消息来与其他进程通信。</div><div class="line">- loop函数永远不会返回，利用尾部的优化，意思是此函数的运行空间是固定的，不会耗尽栈空间</div><div class="line">- Erlang编译器和运行时系统会正确推断出如何在收到消息时运行适当的代码。不需要编写任何的<span class="keyword">if</span>-then-else或switch语句来设定该做什么。这是模式匹配带来的乐趣之一，会为你节省大量工作</div><div class="line"></div><div class="line"></div><div class="line">##### server</div></pre></td></tr></table></figure></p><p>cat afile_server.erl</p><p>-module(afile_server).<br>-export([start/1,loop/1]).</p><p>start(Dir) -&gt;</p><p>  spawn(afile_server,loop, [Dir]).</p><p>loop(Dir) -&gt;</p><p>  receive</p><pre><code>{Client, list_dir} -&gt;  Client ! { self(), file:list_dir(Dir)};{Client, {get_file, File}} -&gt;  Full = filename:join(Dir, File),  Client ! {self(), file:read(Full)}</code></pre><p>  end,<br>  loop(Dir).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p><p>➜  src erl<br>Erlang/OTP 19 [erts-8.2] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]</p><p>Eshell V8.2  (abort with ^G)<br>1&gt; c(afile_server).<br>{ok,afile_server}<br>2&gt; FS =  afile_server:start(“.”).</p><p><0.64.0><br>3&gt; FS ! {self(),list_dir}<br>3&gt; .<br>{<0.57.0>,list_dir}<br>4&gt; receive X-&gt;X end.<br>{<0.64.0>,<br> {ok,[“afile_server.beam”,”afile_server.erl”,<br>      “file_server.beam”,”hello.beam”,”hello.erl”,”test.beam”,<br>      “test.erl”]}}<br>5&gt;<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### client</div></pre></td></tr></table></figure></0.64.0></0.57.0></0.64.0></p><p>-module(afile_client).<br>-export([ls/1, get_file/2]).</p><p>ls(Server) -&gt;</p><p>  Server ! {self(), list_dir},</p><p>  receive</p><pre><code>{Server, FileList} -&gt;  FileList</code></pre><p>  end.</p><p>get_file(Server, File) -&gt;</p><p>  Server ! {self(), {get_file, File}},</p><p>  receive</p><pre><code>{Server, Content} -&gt;  Content</code></pre><p>  end.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p>1&gt; c(afile_server).<br>{ok,afile_server}<br>2&gt; c(afile_client).<br>{ok,afile_client}<br>3&gt; FS =  afile_server:start(“.”).</p><p><0.69.0><br>4&gt; afile_client:ls(“./“).<br>** exception error: bad argument<br>     in function  afile_client:ls/1 (afile_client.erl, line 15)<br>5&gt; afile_client:ls(FS).<br>{ok,[“afile_client.beam”,”afile_client.erl”,<br>     “afile_server.beam”,”afile_server.erl”,”file_server.beam”,<br>     “hello.beam”,”hello.erl”,”test.beam”,”test.erl”]}<br>```</0.69.0></p><blockquote><p>这样吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      Erlang程序设计的读书笔记
    
    </summary>
    
      <category term="读书笔记" scheme="//www.zwting.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Erlang程序设计的读书笔记" scheme="//www.zwting.com/tags/Erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Erlang程序设计(第2版) 读书笔记【第一章】</title>
    <link href="//www.zwting.com/2017/11/12/2017-11-13-erlang-01/"/>
    <id>//www.zwting.com/2017/11/12/2017-11-13-erlang-01/</id>
    <published>2017-11-12T11:30:59.000Z</published>
    <updated>2017-11-17T03:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第1章-什么是并发"><a href="#第1章-什么是并发" class="headerlink" title="第1章 什么是并发"></a>第1章 什么是并发</h3><h5 id="并发和并行含义"><a href="#并发和并行含义" class="headerlink" title="并发和并行含义"></a>并发和并行含义</h5><ul><li><p>区分基于操作系统的并发和基于语言的并发很重要，因为如果使用基于操作系统的并发，那么程序在不同的操作系统上就会有不同的工作方式。Erlang的并发在所有操作系统上都有着相同的工作方式。要用Erlang编写并发程序，只需掌握Erlang，而不必掌握操作系统的并发机制</p></li><li><p>并发程序是一种用并发编程语言编写的程序。编写并发程序是为了提升性能、可扩展性和容错性。（nodejs erlang）</p></li><li><p>并发编程语言拥有专门用于编写并发程序的语言结构。这些结构是编程语言的主要部分， 在所有操作系统上都有着相同的表现。</p></li><li>并行计算机是一种有多个处理单元（CPU或核心）同时运行的计算机。</li></ul><h5 id="模块和函数"><a href="#模块和函数" class="headerlink" title="模块和函数"></a>模块和函数</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(test)</span>. <span class="comment">%%模块声明</span></div><div class="line"><span class="keyword">-export</span><span class="params">([init/<span class="number">1</span>])</span>. <span class="comment">%%导出声明</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">init</span><span class="params">(Name)</span> -&gt;</span></div><div class="line">io:format(<span class="string">"~w~n"</span>,[Name]).</div></pre></td></tr></table></figure><ul><li>模块名必须以一个小写字母开头。</li><li>导出声明指明了模块里哪些函数可以从模块外部进行调用。</li><li>-export([init/1]).语法的意思是带有一个参数。</li><li>-export([funcname1/1，funcname2/1，funcname3/1，]). 导出多个函数列表的写法。</li></ul><h5 id="erlang起进程"><a href="#erlang起进程" class="headerlink" title="erlang起进程"></a>erlang起进程</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(test)</span>.</div><div class="line"></div><div class="line"><span class="keyword">-export</span><span class="params">([init/<span class="number">1</span>])</span>. <span class="comment">%%导出声明</span></div><div class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">0</span>])</span>. <span class="comment">%%导出声明</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span><span class="params">()</span> -&gt;</span></div><div class="line"></div><div class="line">  debugger:start(),</div><div class="line"></div><div class="line">  spawn(test,init,[<span class="string">"hello"</span>]).</div><div class="line"></div><div class="line"><span class="function"><span class="title">init</span><span class="params">(Name)</span> -&gt;</span></div><div class="line"></div><div class="line">  io:format(<span class="string">"~w~n"</span>,[Name]).</div></pre></td></tr></table></figure><ul><li><p>spawn(ModName,FunName,[Arg1,Arg2,….])</p></li><li><p>当Erlang运行时系统执行spawn时，它会创建一个新进程（不是操作系统的进程，而是一个由Erlang系统管理的轻量级进程）。当进程创建完毕后，它便开始执行参数所指定的代码。ModName 是包含想要执行代码的模块名。FuncName是模块里的函数名，而[Arg1, Arg2, …]是一个列表，包含了想要执行的函数参数。因此，下面这个调用的意思是启动一个执行函数person:init(“hello”)的进程</p></li></ul><h5 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Susannah!&#123;<span class="keyword">self</span>(),<span class="string">"send message"</span>&#125;</div></pre></td></tr></table></figure><ul><li>Pid ! Msg语法的意思是发送消息Msg到进程Pid。大括号里的self()参数标明了发送消息的进程（在此处是Joe）。</li></ul><h5 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">receive</div><div class="line">&#123;From, Message&#125; -&gt;</div><div class="line">......</div><div class="line">end</div></pre></td></tr></table></figure><ul><li>当Susannah的进程接收到一条消息时，变量From会绑定为Joe，这样Susannah就知道消息来自何处，变量Message则会包含此消息</li></ul><blockquote><p>这样吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      Erlang程序设计的读书笔记
    
    </summary>
    
      <category term="读书笔记" scheme="//www.zwting.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Erlang程序设计的读书笔记" scheme="//www.zwting.com/tags/Erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="//www.zwting.com/2017/10/31/2017-10-31-python-hacker/"/>
    <id>//www.zwting.com/2017/10/31/2017-10-31-python-hacker/</id>
    <published>2017-10-31T07:31:49.000Z</published>
    <updated>2017-10-31T07:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>Scapy, Scapy3k: 发送，嗅探，分析和伪造网络数据包。可用作交互式包处理程序或单独作为一个库。</li><li>pypcap, Pcapy, pylibpcap: 几个不同 libpcap 捆绑的python库</li><li>libdnet: 低级网络路由，包括端口查看和以太网帧的转发</li><li>dpkt: 快速，轻量数据包创建和分析，面向基本的 TCP/IP 协议</li><li>Impacket: 伪造和解码网络数据包，支持高级协议如 NMB 和 SMB</li><li>pynids: libnids 封装提供网络嗅探，IP 包碎片重组，TCP 流重组和端口扫描侦查 </li><li>Dirtbags py-pcap: 无需 libpcap 库支持读取 pcap 文件</li><li>flowgrep: 通过正则表达式查找数据包中的 Payloads</li><li>Knock Subdomain Scan: 通过字典枚举目标子域名</li><li>SubBrute: 快速的子域名枚举工具</li><li>Mallory: 可扩展的 TCP/UDP 中间人代理工具，可以实时修改非标准协议</li><li>Pytbull: 灵活的 IDS/IPS 测试框架（附带超过300个测试样例）</li></ul><h2 id="调试和逆向工程"><a href="#调试和逆向工程" class="headerlink" title="调试和逆向工程"></a>调试和逆向工程</h2><ul><li>Paimei: 逆向工程框架，包含 PyDBG, PIDA,pGRAPH</li><li>Immunity Debugger: 脚本 GUI 和命令行调试器 </li><li>mona.py: Immunity Debugger 中的扩展，用于代替 pvefindaddr</li><li>IDAPython: IDA pro 中的插件，集成 Python 编程语言，允许脚本在 IDA Pro 中执行</li><li>PyEMU: 全脚本实现的英特尔32位仿真器，用于恶意软件分析 </li><li>pefile: 读取并处理 PE 文件</li><li>pydasm: Python 封装的 libdasm</li><li>PyDbgEng: Python 封装的微软 Windows 调试引擎</li><li>uhooker: 截获 DLL 或内存中任意地址可执行文件的 API 调用</li><li>diStorm: AMD64 下的反汇编库</li><li>python-ptrace: Python 写的使用 ptrace 的调试器</li><li>vdb/vtrace: vtrace 是用 Python 实现的跨平台调试 API, vdb 是使用它调试器</li><li>Androguard: 安卓应用程序的逆向分析工具</li><li>Capstone: 一个轻量级的多平台多架构支持的反汇编框架。支持包括ARM,ARM64,MIPS和x86/x64平台。</li><li>PyBFD: GNU 二进制文件描述(BFD)库的 Python 接口</li></ul><h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><ul><li>Sulley: 一个模糊器开发和模糊测试的框架，由多个可扩展的构件组成的</li><li>Peach Fuzzing Platform: 可扩展的模糊测试框架(v2版本 是用 Python 语言编写的)</li><li>antiparser: 模糊测试和故障注入的 API</li><li>TAOF: (The Art of Fuzzing, 模糊的艺术)包含 ProxyFuzz, 一个中间人网络模糊测试工具</li><li>untidy: 针对 XML 模糊测试工具</li><li>Powerfuzzer: 高度自动化和可完全定制的 Web 模糊测试工具</li><li>SMUDGE: 纯 Python 实现的网络协议模糊测试</li><li>Mistress: 基于预设模式，侦测实时文件格式和侦测畸形数据中的协议</li><li>Fuzzbox: 媒体多编码器的模糊测试</li><li>Forensic Fuzzing Tools: 通过生成模糊测试用的文件，文件系统和包含模糊测试文件的文件系统，来测试取证工具的鲁棒性</li><li>Windows IPC Fuzzing Tools: 使用 Windows 进程间通信机制进行模糊测试的工具</li><li>WSBang: 基于 Web 服务自动化测试 SOAP 安全性</li><li>Construct: 用于解析和构建数据格式(二进制或文本)的库</li><li>fuzzer.py(feliam): 由 Felipe Andres Manzano 编写的简单模糊测试工具</li><li>Fusil: 用于编写模糊测试程序的 Python 库</li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul><li>Requests: 优雅，简单，人性化的 HTTP 库</li><li>HTTPie: 人性化的类似 cURL 命令行的 HTTP 客户端</li><li>ProxMon: 处理代理日志和报告发现的问题</li><li>WSMap: 寻找 Web 服务器和发现文件</li><li>Twill: 从命令行界面浏览网页。支持自动化网络测试</li><li>Ghost.py: Python 写的 WebKit Web 客户端</li><li>Windmill: Web 测试工具帮助你轻松实现自动化调试 Web 应用</li><li>FunkLoad: Web 功能和负载测试</li><li>spynner: Python 写的 Web浏览模块支持 Javascript/AJAX</li><li>python-spidermonkey: 是 Mozilla JS 引擎在 Python 上的移植，允许调用 Javascript 脚本和函数</li><li>mitmproxy: 支持 SSL 的 HTTP 代理。可以在控制台接口实时检查和编辑网络流量</li><li>pathod/pathoc: 变态的 HTTP/S 守护进程，用于测试和折磨 HTTP 客户端</li></ul><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><ul><li>Volatility: 从 RAM 中提取数据</li><li>Rekall: Google 开发的内存分析框架</li><li>LibForensics: 数字取证应用程序库</li><li>TrIDLib: Python 实现的从二进制签名中识别文件类型</li><li>aft: 安卓取证工具集恶意软件分析</li><li>pyew: 命令行十六进制编辑器和反汇编工具，主要用于分析恶意软件</li><li>Exefilter: 过滤 E-mail，网页和文件中的特定文件格式。可以检测很多常见文件格式，也可以移除文档内容。</li><li>pyClamAV: 增加你 Python 软件的病毒检测能力</li><li>jsunpack-n: 通用 JavaScript 解释器，通过模仿浏览器功能来检测针对目标浏览器和浏览器插件的漏洞利用</li><li>yara-python: 对恶意软件样本进行识别和分类</li><li>phoneyc: 纯 Python 实现的蜜罐</li><li>CapTipper: 分析，研究和重放 PCAP 文件中的 HTTP 恶意流量</li></ul><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><ul><li>peepdf: Python 编写的PDF文件分析工具，可以帮助检测恶意的PDF文件</li><li>Didier Stevens’ PDF tools: 分析，识别和创建 PDF 文件(包含PDFiD，pdf-parser，make-pdf 和 mPDF)</li><li>Opaf: 开放 PDF 分析框架，可以将 PDF 转化为 XML 树从而进行分析和修改。</li><li>Origapy: Ruby 工具 Origami 的 Python 接口，用于审查 PDF 文件 </li><li>pyPDF2: Python PDF 工具包包含：信息提取，拆分，合并，制作，加密和解密等等</li><li>PDFMiner: 从 PDF 文件中提取文本</li><li>python-poppler-qt4: Python 写的 Poppler PDF 库，支持 Qt4</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li>InlineEgg: 使用 Python 编写的具有一系列小功能的工具箱</li><li>Exomind: 是一个利用社交网络进行钓鱼攻击的工具</li><li>RevHosts: 枚举指定 IP 地址包含的虚拟主句</li><li>simplejson: JSON 编码和解码器，例如使用 Google’s AJAX API</li><li>PyMangle: 命令行工具和一个创建用于渗透测试使用字典的库</li><li>Hachoir: 查看和编辑二进制流</li></ul><h2 id="其他有用的库和工具"><a href="#其他有用的库和工具" class="headerlink" title="其他有用的库和工具"></a>其他有用的库和工具</h2><ul><li>IPython: 增强的交互式 Python shell</li><li>Beautiful Soup: HTML 解析器</li><li>matplotlib: 制作二维图</li><li>Mayavi: 三维科学数据的可视化与绘图</li><li>RTGraph3D: 在三维空间中创建动态图</li><li>Twisted: Python 语言编写的事件驱动的网络框架</li><li>Suds: 一个轻量级的基于SOAP的python客户端</li><li>M2Crypto: Python 语言对 OpenSSL 的封装</li><li>NetworkX: 图库(边, 节点)</li><li>Pandas: 基于 Numpy 构建的含有更高级数据结构和工具的数据分析包</li><li>pyparsing: 通用解析模块</li><li>lxml: 使用 Python 编写的库，可以迅速、灵活地处理 XML</li><li>Whoosh: 纯python实现的全文搜索组件</li><li>Pexpect: 控制和自动化程序</li><li>Sikuli: 使用 Jython 脚本自动化基于截图进行视觉搜索</li><li>PyQt 和PySide: Python 捆绑的 Qt 应用程序框架和 GUI 库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Scapy, Scapy3k: 发送，嗅探，分析和伪造网络数据包。可用作交互式包处理程序或单独作为一个库。&lt;/li&gt;
&lt;li&gt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="//www.zwting.com/2017/10/31/2017-10-31-python-hacker2/"/>
    <id>//www.zwting.com/2017/10/31/2017-10-31-python-hacker2/</id>
    <published>2017-10-31T07:15:41.000Z</published>
    <updated>2017-10-31T07:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-资源大全中文版"><a href="#Python-资源大全中文版" class="headerlink" title="Python 资源大全中文版"></a>Python 资源大全中文版</h1><h3 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h3><ul><li>贡献者：<a href="https://github.com/hanxiaomax" target="_blank" rel="external">艾凌风</a>、Namco、<a href="https://github.com/Daetalus" target="_blank" rel="external">Daetalus</a>、<a href="http://www.jobbole.com/members/huanglimin/" target="_blank" rel="external">黄利民</a>、<a href="http://www.jobbole.com/members/atupal/" target="_blank" rel="external">atupal</a>、<a href="http://www.jobbole.com/members/rainbow/" target="_blank" rel="external">rainbow</a>、<a href="https://github.com/mutoulbj" target="_blank" rel="external">木头lbj</a>、<a href="http://www.jobbole.com/members/beyondwu/" target="_blank" rel="external">beyondwu</a>、<a href="https://github.com/cissoid" target="_blank" rel="external">cissoid</a>、<a href="https://github.com/liguangsheng" target="_blank" rel="external">李广胜</a>、<a href="https://github.com/polyval" target="_blank" rel="external">polyval</a>、<a href="http://www.jobbole.com/members/libing1209/" target="_blank" rel="external">冰斌</a>、<a href="http://www.jobbole.com/members/nelsonzhao/" target="_blank" rel="external">赵叶宇</a>、<a href="http://www.jobbole.com/members/fengfeng19910805/" target="_blank" rel="external">л stalgic</a>、<a href="http://www.jobbole.com/members/shawnw/" target="_blank" rel="external">硕恩</a>、<a href="https://github.com/strongit" target="_blank" rel="external">strongit</a>、<a href="http://www.jobbole.com/members/yuukilp/" target="_blank" rel="external">yuukilp</a></li></ul><p>注：名单不分排名，不定期补充更新</p><hr><h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p><ul><li>p：非常简单的交互式 python 版本管理工具。<a href="https://github.com/qw3rtman/p" target="_blank" rel="external">官网</a></li><li>pyenv：简单的 Python 版本管理工具。<a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">官网</a></li><li>Vex：可以在虚拟环境中执行命令。<a href="https://github.com/sashahart/vex" target="_blank" rel="external">官网</a></li><li>virtualenv：创建独立 Python 环境的工具。<a href="https://pypi.python.org/pypi/virtualenv" target="_blank" rel="external">官网</a></li><li>virtualenvwrapper：virtualenv 的一组扩展。<a href="https://pypi.python.org/pypi/virtualenvwrapper" target="_blank" rel="external">官网</a></li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>管理包和依赖的工具。</p><ul><li>pip：Python 包和依赖关系管理工具。<a href="https://pip.pypa.io/" target="_blank" rel="external">官网</a></li><li>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href="https://github.com/nvie/pip-tools" target="_blank" rel="external">官网</a></li><li>conda：跨平台，Python 二进制包管理工具。<a href="https://github.com/conda/conda/" target="_blank" rel="external">官网</a></li><li>Curdling：管理 Python 包的命令行工具。<a href="http://clarete.li/curdling/" target="_blank" rel="external">官网</a></li><li>wheel：Python 分发的新标准，意在取代 eggs。<a href="http://pythonwheels.com/" target="_blank" rel="external">官网</a></li></ul><h3 id="包仓库"><a href="#包仓库" class="headerlink" title="包仓库"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p><ul><li>warehouse：下一代 PyPI。<a href="https://github.com/pypa/warehouse" target="_blank" rel="external">官网</a><ul><li>Warehouse：PyPA 提供的 PyPI 镜像工具。<a href="https://warehouse.python.org/" target="_blank" rel="external">官网</a> <a href="https://bitbucket.org/pypa/bandersnatch" target="_blank" rel="external">bandersnatch</a></li></ul></li><li>devpi：PyPI 服务和打包/测试/分发工具。<a href="http://doc.devpi.net/" target="_blank" rel="external">官网</a></li><li>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href="https://github.com/mvantellingen/localshop" target="_blank" rel="external">官网</a></li></ul><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>打包为可执行文件以便分发。</p><ul><li>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="external">官网</a></li><li>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href="http://dh-virtualenv.readthedocs.org/" target="_blank" rel="external">官网</a></li><li>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href="http://nuitka.net/" target="_blank" rel="external">官网</a></li><li>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href="http://pythonhosted.org/py2app/" target="_blank" rel="external">官网</a></li><li>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href="http://www.py2exe.org/" target="_blank" rel="external">官网</a></li><li>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。<a href="http://pynsist.readthedocs.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>将源码编译成软件。</p><ul><li>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href="http://www.buildout.org/" target="_blank" rel="external">官网</a></li><li>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html" target="_blank" rel="external">官网</a></li><li>fabricate：对任何语言自动找到依赖关系的构建工具。<a href="https://code.google.com/archive/p/fabricate" target="_blank" rel="external">官网</a></li><li>PlatformIO：多平台命令行构建工具。<a href="https://github.com/platformio/platformio" target="_blank" rel="external">官网</a></li><li>PyBuilder：纯 Python 实现的持续化构建工具。<a href="https://github.com/pybuilder/pybuilder" target="_blank" rel="external">官网</a></li><li>SCons：软件构建工具。<a href="http://www.scons.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="交互式解析器"><a href="#交互式解析器" class="headerlink" title="交互式解析器"></a>交互式解析器</h3><p>交互式 Python 解析器。</p><ul><li>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href="https://github.com/ipython/ipython" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/bpython/" target="_blank" rel="external">bpython</a>：界面丰富的 Python 解析器。<a href="http://bpython-interpreter.org/" target="_blank" rel="external">官网</a></li><li>ptpython：高级交互式Python解析器， 构建于<a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="external">python-prompt-toolkit</a> 之上。<a href="https://github.com/jonathanslenders/ptpython" target="_blank" rel="external">官网</a></li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p><ul><li>imghdr：（Python 标准库）检测图片类型。<a href="https://docs.python.org/2/library/imghdr.html" target="_blank" rel="external">官网</a></li><li>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href="https://docs.python.org/2/library/mimetypes.html" target="_blank" rel="external">官网</a></li><li>path.py：对 os.path 进行封装的模块。<a href="https://github.com/jaraco/path.py" target="_blank" rel="external">官网</a></li><li>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href="https://pathlib.readthedocs.org/en/pep428/" target="_blank" rel="external">官网</a></li><li>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href="https://github.com/ahupp/python-magic" target="_blank" rel="external">官网</a></li><li>Unipath：用面向对象的方式操作文件和目录。<a href="https://github.com/mikeorr/Unipath" target="_blank" rel="external">官网</a></li><li>watchdog：管理文件系统事件的 API 和 shell 工具<a href="https://github.com/gorakhargosh/watchdog" target="_blank" rel="external">官网</a></li></ul><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>操作日期和时间的类库。</p><ul><li>arrow：更好的 Python 日期时间操作类库。<a href="https://github.com/crsmithdev/arrow" target="_blank" rel="external">官网</a></li><li>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href="https://github.com/KoffeinFlummi/Chronyk" target="_blank" rel="external">官网</a></li><li>dateutil：Python datetime 模块的扩展。<a href="https://pypi.python.org/pypi/python-dateutil" target="_blank" rel="external">官网</a></li><li>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href="https://github.com/myusuf3/delorean/" target="_blank" rel="external">官网</a></li><li>moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。<a href="https://github.com/zachwill/moment" target="_blank" rel="external">官网</a></li><li>PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。<a href="https://github.com/shinux/PyTime" target="_blank" rel="external">官网</a></li><li>pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。<a href="https://launchpad.net/pytz" target="_blank" rel="external">官网</a></li><li>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href="https://github.com/dirn/When.py" target="_blank" rel="external">官网</a></li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>用于解析和操作文本的库。</p><ul><li>通用<ul><li><a href="http://hao.jobbole.com/chardet/" target="_blank" rel="external">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href="https://github.com/chardet/chardet" target="_blank" rel="external">官网</a></li><li>difflib：(Python 标准库)帮助我们进行差异化比较。<a href="https://docs.python.org/2/library/difflib.html" target="_blank" rel="external">官网</a></li><li>ftfy：让Unicode文本更完整更连贯。<a href="https://github.com/LuminosoInsight/python-ftfy" target="_blank" rel="external">官网</a></li><li>fuzzywuzzy：模糊字符串匹配。<a href="https://github.com/seatgeek/fuzzywuzzy" target="_blank" rel="external">官网</a></li><li>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href="https://github.com/ztane/python-Levenshtein/" target="_blank" rel="external">官网</a></li><li>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href="https://github.com/vinta/pangu.py" target="_blank" rel="external">官网</a></li><li>yfiglet-figlet：<a href="https://github.com/pwaller/pyfiglet" target="_blank" rel="external">pyfiglet -figlet</a> 的 Python实现。</li><li>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href="https://github.com/stochastic-technologies/shortuuid" target="_blank" rel="external">官网</a></li><li>unidecode：Unicode 文本的 ASCII 转换形式 。<a href="https://pypi.python.org/pypi/Unidecode" target="_blank" rel="external">官网</a></li><li>uniout：打印可读的字符，而不是转义的字符串。<a href="https://github.com/moskytw/uniout" target="_blank" rel="external">官网</a></li><li>xpinyin：一个用于把汉字转换为拼音的库。<a href="https://github.com/lxneng/xpinyin" target="_blank" rel="external">官网</a></li><li>simplejson：Python的JSON编码、解码器。<a href="https://simplejson.readthedocs.io/en/latest/" target="_blank" rel="external">官网</a>、<a href="https://github.com/simplejson/simplejson" target="_blank" rel="external">GitHub</a></li></ul></li><li>Slug化<ul><li>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href="https://github.com/dimka665/awesome-slugify" target="_blank" rel="external">官网</a></li><li>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href="https://github.com/un33k/python-slugify" target="_blank" rel="external">官网</a></li><li>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href="https://github.com/mozilla/unicode-slugify" target="_blank" rel="external">官网</a></li></ul></li><li>解析器<ul><li>phonenumbers：解析，格式化，储存，验证电话号码。<a href="https://github.com/daviddrysdale/python-phonenumbers" target="_blank" rel="external">官网</a></li><li>PLY：lex 和 yacc 解析工具的 Python 实现。<a href="http://www.dabeaz.com/ply/" target="_blank" rel="external">官网</a></li><li>Pygments：通用语法高亮工具。<a href="http://pygments.org/" target="_blank" rel="external">官网</a></li><li>pyparsing：生成通用解析器的框架。<a href="http://pyparsing.wikispaces.com/" target="_blank" rel="external">官网</a></li><li>python-nameparser：把一个人名分解为几个独立的部分。<a href="https://github.com/derek73/python-nameparser" target="_blank" rel="external">官网</a></li><li>python-user-agents：浏览器 user agent 解析器。<a href="https://github.com/selwin/python-user-agents" target="_blank" rel="external">官网</a></li><li>sqlparse：一个无验证的 SQL 解析器。<a href="https://sqlparse.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="特殊文本格式处理"><a href="#特殊文本格式处理" class="headerlink" title="特殊文本格式处理"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p><ul><li>通用<ul><li>tablib：一个用来处理中表格数据的模块。<a href="https://github.com/kennethreitz/tablib" target="_blank" rel="external">官网</a></li></ul></li><li>Office<ul><li>Marmir：把输入的Python 数据结构转换为电子表单。<a href="https://github.com/brianray/mm" target="_blank" rel="external">官网</a></li><li>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href="https://openpyxl.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href="https://github.com/python-openxml/python-docx" target="_blank" rel="external">官网</a></li><li>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href="https://github.com/dagwieers/unoconv" target="_blank" rel="external">官网</a></li><li>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href="https://xlsxwriter.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href="http://xlwings.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/xlwt/" target="_blank" rel="external">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href="https://github.com/python-excel/xlwt" target="_blank" rel="external">官网</a> / <a href="https://github.com/python-excel/xlrd" target="_blank" rel="external">xlrd</a></li><li>relatorio：模板化OpenDocument 文件。<a href="http://relatorio.tryton.org/" target="_blank" rel="external">官网</a></li></ul></li><li>PDF<ul><li>PDFMiner：一个用于从PDF文档中抽取信息的工具。<a href="https://github.com/euske/pdfminer" target="_blank" rel="external">官网</a></li><li>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href="https://github.com/mstamy2/PyPDF2" target="_blank" rel="external">官网</a></li><li>ReportLab：快速创建富文本 PDF 文档。<a href="http://www.reportlab.com/opensource/" target="_blank" rel="external">官网</a></li></ul></li><li>Markdown<ul><li>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href="https://github.com/lepture/mistune" target="_blank" rel="external">官网</a></li><li>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href="https://github.com/waylan/Python-Markdown" target="_blank" rel="external">官网</a></li><li>Python-Markdown2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href="https://github.com/trentm/python-markdown2" target="_blank" rel="external">官网</a></li></ul></li><li>YAML<ul><li>PyYAML：Python 版本的 YAML 解析器。<a href="http://pyyaml.org/" target="_blank" rel="external">官网</a></li></ul></li><li>CSV<ul><li>csvkit：用于转换和操作 CSV 的工具。<a href="https://github.com/wireservice/csvkit" target="_blank" rel="external">官网</a></li></ul></li><li>Archive<ul><li>unp：一个用来方便解包归档文件的命令行工具。<a href="https://github.com/mitsuhiko/unp" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>用来处理人类语言的库。</p><ul><li><a href="http://hao.jobbole.com/nltk/" target="_blank" rel="external">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href="http://www.nltk.org/" target="_blank" rel="external">官网</a></li><li>jieba：中文分词工具。<a href="https://github.com/fxsjy/jieba" target="_blank" rel="external">官网</a></li><li>langid.py：独立的语言识别系统。<a href="https://github.com/saffsd/langid.py" target="_blank" rel="external">官网</a></li><li>Pattern：Python 网络信息挖掘模块。<a href="http://www.clips.ua.ac.be/pattern" target="_blank" rel="external">官网</a></li><li>SnowNLP：一个用来处理中文文本的库。<a href="https://github.com/isnowfy/snownlp" target="_blank" rel="external">官网</a></li><li>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href="http://textblob.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href="https://github.com/2shou/TextGrocery" target="_blank" rel="external">官网</a></li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>用以生成项目文档的库。</p><ul><li><a href="http://hao.jobbole.com/sphinx/" target="_blank" rel="external">Sphinx</a>：Python 文档生成器。<a href="http://www.sphinx-doc.org/en/latest/" target="_blank" rel="external">官网</a><ul><li>awesome-sphinxdoc：<a href="https://github.com/yoloseem/awesome-sphinxdoc" target="_blank" rel="external">官网</a></li></ul></li><li>MkDocs：对 Markdown 友好的文档生成器。<a href="http://www.mkdocs.org/" target="_blank" rel="external">官网</a></li><li>pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href="https://github.com/BurntSushi/pdoc" target="_blank" rel="external">官网</a></li><li>Pycco：文学编程（literate-programming）风格的文档生成器。<a href="https://github.com/pycco-docs/pycco" target="_blank" rel="external">官网</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>用来保存和解析配置的库。</p><ul><li>config：<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">logging</a> 模块作者写的分级配置模块。<a href="https://www.red-dove.com/config-doc/" target="_blank" rel="external">官网</a></li><li>ConfigObj：INI 文件解析器，带验证功能。<a href="http://www.voidspace.org.uk/python/configobj.html" target="_blank" rel="external">官网</a></li><li>ConfigParser：(Python 标准库) INI 文件解析器。<a href="https://docs.python.org/2/library/configparser.html" target="_blank" rel="external">官网</a></li><li>profig：通过多种格式进行配置，具有数值转换功能。<a href="http://profig.readthedocs.org/en/default/" target="_blank" rel="external">官网</a></li><li>python-decouple：将设置和代码完全隔离。<a href="https://github.com/henriquebastos/python-decouple" target="_blank" rel="external">官网</a></li></ul><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>用于创建命令行程序的库。</p><ul><li>命令行程序开发<ul><li>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。<a href="https://github.com/peterbrittain/asciimatics" target="_blank" rel="external">官网</a></li><li>cement：Python 的命令行程序框架。<a href="http://builtoncement.com/" target="_blank" rel="external">官网</a></li><li>click：一个通过组合的方式来创建精美命令行界面的包。<a href="http://click.pocoo.org/dev/" target="_blank" rel="external">官网</a></li><li>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href="http://docs.openstack.org/developer/cliff/" target="_blank" rel="external">官网</a></li><li>clint：Python 命令行程序工具。<a href="https://github.com/kennethreitz/clint" target="_blank" rel="external">官网</a></li><li>colorama：跨平台彩色终端文本。<a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="external">官网</a></li><li>docopt：Python 风格的命令行参数解析器。<a href="http://docopt.org/" target="_blank" rel="external">官网</a></li><li>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="external">官网</a></li><li>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pythonpy/" target="_blank" rel="external">Pythonpy</a>：在命令行中直接执行任何Python指令。<a href="https://github.com/Russell91/pythonpy/wiki" target="_blank" rel="external">官网</a></li></ul></li><li>生产力工具<ul><li>aws-cli：Amazon Web Services 的通用命令行界面。<a href="https://github.com/aws/aws-cli" target="_blank" rel="external">官网</a></li><li>bashplotlib：在终端中进行基本绘图。<a href="https://github.com/glamp/bashplotlib" target="_blank" rel="external">官网</a></li><li>caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。<a href="https://github.com/brettcannon/caniusepython3" target="_blank" rel="external">官网</a></li><li>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="external">官网</a></li><li>doitlive：一个用来在终端中进行现场演示的工具。<a href="https://github.com/sloria/doitlive" target="_blank" rel="external">官网</a></li><li>howdoi：通过命令行获取即时的编程问题解答。<a href="https://github.com/gleitz/howdoi" target="_blank" rel="external">官网</a></li><li>httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。<a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">官网</a></li><li>PathPicker：从bash输出中选出文件。<a href="https://github.com/facebook/PathPicker" target="_blank" rel="external">官网</a></li><li>percol：向UNIX shell 传统管道概念中加入交互式选择功能。<a href="https://github.com/mooz/percol" target="_blank" rel="external">官网</a></li><li>SAWS：一个加强版的 AWS 命令行。<a href="https://github.com/donnemartin/saws" target="_blank" rel="external">官网</a></li><li>thefuck：修正你之前的命令行指令。<a href="https://github.com/nvbn/thefuck" target="_blank" rel="external">官网</a></li><li>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/mycli" target="_blank" rel="external">官网</a></li><li>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/pgcli" target="_blank" rel="external">官网</a></li><li>try：一个从来没有更简单的命令行工具，用来试用python库。<a href="https://github.com/timofurrer/try" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>用来进行下载的库.</p><ul><li>s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。<a href="https://github.com/s3tools/s3cmd" target="_blank" rel="external">官网</a></li><li>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href="https://github.com/bloomreach/s4cmd" target="_blank" rel="external">官网</a></li><li>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href="https://www.soimort.org/you-get/" target="_blank" rel="external">官网</a></li><li>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href="http://rg3.github.io/youtube-dl/" target="_blank" rel="external">官网</a></li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>用来操作图像的库.</p><ul><li><a href="http://hao.jobbole.com/pillow/" target="_blank" rel="external">pillow</a>：Pillow 是一个更加易用版的 <a href="http://www.pythonware.com/products/pil/" target="_blank" rel="external">PIL</a>。<a href="http://pillow.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>hmap：图像直方图映射。<a href="https://github.com/rossgoodwin/hmap" target="_blank" rel="external">官网</a></li><li>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href="https://sourceforge.net/projects/imgseek/" target="_blank" rel="external">官网</a></li><li>nude.py：裸体检测。<a href="https://github.com/hhatto/nude.py" target="_blank" rel="external">官网</a></li><li>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href="https://pythonhosted.org/pyBarcode/" target="_blank" rel="external">官网</a></li><li>pygram：类似 Instagram 的图像滤镜。<a href="https://github.com/ajkumar25/pygram" target="_blank" rel="external">官网</a></li><li>python-qrcode：一个纯 Python 实现的二维码生成器。<a href="https://github.com/lincolnloop/python-qrcode" target="_blank" rel="external">官网</a></li><li>Quads：基于四叉树的计算机艺术。<a href="https://github.com/fogleman/Quads" target="_blank" rel="external">官网</a></li><li>scikit-image：一个用于（科学）图像处理的 Python 库。<a href="http://scikit-image.org/" target="_blank" rel="external">官网</a></li><li>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href="https://github.com/thumbor/thumbor" target="_blank" rel="external">官网</a></li><li>wand：<a href="http://www.imagemagick.org/script/magick-wand.php" target="_blank" rel="external">MagickWand</a>的Python 绑定。MagickWand 是 ImageMagick的 C API 。<a href="https://github.com/dahlia/wand" target="_blank" rel="external">官网</a></li></ul><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>光学字符识别库。</p><ul><li>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pytesseract/" target="_blank" rel="external">pytesseract</a>：<a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">官网</a></li><li>python-tesseract - <a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a> 的一个包装类。</li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>用来操作音频的库</p><ul><li>audiolazy：Python 的数字信号处理包。<a href="https://github.com/danilobellini/audiolazy" target="_blank" rel="external">官网</a> </li><li>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href="https://github.com/beetbox/audioread" target="_blank" rel="external">官网</a></li><li>beets：一个音乐库管理工具及 <a href="https://musicbrainz.org/" target="_blank" rel="external">MusicBrainz</a> 标签添加工具<a href="http://beets.io/" target="_blank" rel="external">官网</a></li><li>dejavu：音频指纹提取和识别<a href="https://github.com/worldveil/dejavu" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/django-elastic-transcoder/" target="_blank" rel="external">django-elastic-transcoder</a>：Django + <a href="http://aws.amazon.com/elastictranscoder/" target="_blank" rel="external">Amazon Elastic Transcoder</a>。<a href="https://github.com/StreetVoice/django-elastic-transcoder" target="_blank" rel="external">官网</a></li><li>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href="http://eyed3.nicfit.net/" target="_blank" rel="external">官网</a></li><li>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href="http://nedbatchelder.com/code/modules/id3reader.py" target="_blank" rel="external">官网</a></li><li>m3u8：一个用来解析 m3u8 文件的模块。<a href="https://github.com/globocom/m3u8" target="_blank" rel="external">官网</a></li><li>mutagen：一个用来处理音频元数据的 Python 模块。<a href="https://bitbucket.org/lazka/mutagen" target="_blank" rel="external">官网</a></li><li>pydub：通过简单、简洁的高层接口来操作音频文件。<a href="https://github.com/jiaaro/pydub" target="_blank" rel="external">官网</a></li><li>pyechonest：<a href="http://developer.echonest.com/" target="_blank" rel="external">Echo Nest</a> API 的 Python 客户端<a href="https://github.com/echonest/pyechonest" target="_blank" rel="external">官网</a></li><li>talkbox：一个用来处理演讲/信号的 Python 库<a href="http://scikits.appspot.com/talkbox" target="_blank" rel="external">官网</a></li><li>TimeSide：开源 web 音频处理框架。<a href="https://github.com/Parisson/TimeSide" target="_blank" rel="external">官网</a></li><li>tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href="https://github.com/devsnd/tinytag" target="_blank" rel="external">官网</a></li><li>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href="http://bspaans.github.io/python-mingus/" target="_blank" rel="external">官网</a></li></ul><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>用来操作视频和GIF的库。</p><ul><li>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href="http://zulko.github.io/moviepy/" target="_blank" rel="external">官网</a></li><li>scikit-video：SciPy 视频处理常用程序。<a href="https://github.com/aizvorski/scikit-video" target="_blank" rel="external">官网</a></li></ul><h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p><ul><li>GeoDjango：世界级地理图形 web 框架。<a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/" target="_blank" rel="external">官网</a></li><li>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href="https://github.com/maxmind/geoip-api-python" target="_blank" rel="external">官网</a></li><li>geojson：GeoJSON 的 Python 绑定及工具。<a href="https://github.com/frewsxcv/python-geojson" target="_blank" rel="external">官网</a></li><li>geopy：Python 地址编码工具箱。<a href="https://github.com/geopy/geopy" target="_blank" rel="external">官网</a></li><li>pygeoip：纯 Python GeoIP API。<a href="https://github.com/appliedsec/pygeoip" target="_blank" rel="external">官网</a></li><li>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href="https://github.com/SmileyChris/django-countries" target="_blank" rel="external">官网</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用HTTP的库。</p><ul><li>requests：人性化的HTTP请求库。<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">官网</a></li><li>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href="https://github.com/kennethreitz/grequests" target="_blank" rel="external">官网</a></li><li>httplib2：全面的 HTTP 客户端库。<a href="https://github.com/jcgregorio/httplib2" target="_blank" rel="external">官网</a></li><li>treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。<a href="https://github.com/twisted/treq" target="_blank" rel="external">官网</a></li><li>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href="https://github.com/shazow/urllib3" target="_blank" rel="external">官网</a></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Python实现的数据库。</p><ul><li>pickleDB：一个简单，轻量级键值储存数据库。<a href="https://pythonhosted.org/pickleDB/" target="_blank" rel="external">官网</a></li><li>PipelineDB：流式 SQL 数据库。<a href="https://www.pipelinedb.com/" target="_blank" rel="external">官网</a></li><li>TinyDB：一个微型的，面向文档型数据库。<a href="https://github.com/msiemens/tinydb" target="_blank" rel="external">官网</a></li><li>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href="http://www.zodb.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p><ul><li>MySQL：<a href="http://shlomi-noach.github.io/awesome-mysql/" target="_blank" rel="external">awesome-mysql</a>系列<ul><li>mysql-python：Python 的 MySQL 数据库连接器。<a href="https://sourceforge.net/projects/mysql-python/" target="_blank" rel="external">官网</a></li><li>ysqlclient：<a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="external">mysql-python</a> 分支，支持 Python 3。</li><li>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.<a href="https://pythonhosted.org/oursql/" target="_blank" rel="external">官网</a></li><li>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="external">官网</a></li></ul></li><li>PostgreSQL<ul><li>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href="http://initd.org/psycopg/" target="_blank" rel="external">官网</a></li><li>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href="https://github.com/gmr/queries" target="_blank" rel="external">官网</a></li><li>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href="http://txpostgres.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li><li>其他关系型数据库<ul><li>apsw：另一个 Python SQLite封装。<a href="http://rogerbinns.github.io/apsw/" target="_blank" rel="external">官网</a></li><li>dataset：在数据库中存储Python字典</li><li>pymssql：一个简单的Microsoft SQL Server数据库接口。<a href="http://www.pymssql.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li><li>NoSQL 数据库<ul><li>cassandra-python-driver：Cassandra 的 Python 驱动。<a href="https://github.com/datastax/python-driver" target="_blank" rel="external">官网</a></li><li>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href="http://happybase.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href="https://plyvel.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>py2neo：Neo4j restful 接口的Python 封装客户端。<a href="http://py2neo.org/2.0/" target="_blank" rel="external">官网</a></li><li>pycassa：Cassandra 的 Python Thrift 驱动。<a href="https://github.com/pycassa/pycassa" target="_blank" rel="external">官网</a></li><li>PyMongo：MongoDB 的官方 Python 客户端。<a href="https://docs.mongodb.org/ecosystem/drivers/python/" target="_blank" rel="external">官网</a></li><li>redis-py：Redis 的 Python 客户端。<a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="external">官网</a></li><li>telephus：基于 Twisted 的 Cassandra 客户端。<a href="https://github.com/driftx/Telephus" target="_blank" rel="external">官网</a></li><li>txRedis：基于 Twisted 的 Redis 客户端。<a href="https://github.com/deldotdr/txRedis" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p><ul><li>关系型数据库<ul><li>Django Models：Django 的一部分。<a href="https://docs.djangoproject.com/en/dev/topics/db/models/" target="_blank" rel="external">官网</a></li><li>SQLAlchemy：Python SQL 工具以及对象关系映射工具。<a href="http://www.sqlalchemy.org/" target="_blank" rel="external">官网</a><ul><li><a href="https://github.com/dahlia/awesome-sqlalchemy" target="_blank" rel="external">awesome-sqlalchemy</a>系列</li></ul></li><li><a href="http://hao.jobbole.com/peewee/" target="_blank" rel="external">Peewee</a>：一个小巧，富有表达力的 ORM。<a href="https://github.com/coleifer/peewee" target="_blank" rel="external">官网</a></li><li>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href="https://ponyorm.com/" target="_blank" rel="external">官网</a></li><li>python-sql：编写 Python 风格的 SQL 查询。<a href="https://pypi.python.org/pypi/python-sql" target="_blank" rel="external">官网</a></li></ul></li><li>NoSQL 数据库<ul><li>django-mongodb-engine：Django MongoDB 后端。<a href="https://github.com/django-nonrel/mongodb-engine" target="_blank" rel="external">官网</a></li><li>PynamoDB：<a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="external">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href="https://github.com/jlafon/PynamoDB" target="_blank" rel="external">官网</a></li><li>flywheel：Amazon DynamoDB 的对象映射工具。<a href="https://github.com/mathcamp/flywheel" target="_blank" rel="external">官网</a></li><li>MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。<a href="http://mongoengine.org/" target="_blank" rel="external">官网</a></li><li>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href="https://github.com/stephenmcd/hot-redis" target="_blank" rel="external">官网</a></li><li>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href="https://github.com/kiddouk/redisco" target="_blank" rel="external">官网</a></li></ul></li><li>其他<ul><li>butterdb：Google Drive 电子表格的 Python ORM。<a href="https://github.com/Widdershin/butterdb" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><p>全栈 Web 框架。</p><ul><li><a href="http://hao.jobbole.com/django/" target="_blank" rel="external">Django</a>：Python 界最流行的 web 框架。<a href="https://www.djangoproject.com/" target="_blank" rel="external">官网</a><ul><li><a href="https://gitlab.com/rosarior/awesome-django" target="_blank" rel="external">awesome-django</a>系列</li></ul></li><li><a href="http://hao.jobbole.com/flask/" target="_blank" rel="external">Flask</a>：一个 Python 微型框架。<a href="http://flask.pocoo.org/" target="_blank" rel="external">官网</a><ul><li><a href="https://github.com/humiaozuzu/awesome-flask" target="_blank" rel="external">awesome-flask</a>系列</li></ul></li><li>pyramid：一个小巧，快速，接地气的开源Python web 框架。<ul><li><a href="https://github.com/uralbash/awesome-pyramid" target="_blank" rel="external">awesome-pyramid</a>系列</li></ul></li><li><a href="http://hao.jobbole.com/bottle/" target="_blank" rel="external">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href="http://bottlepy.org/docs/dev/index.html" target="_blank" rel="external">官网</a></li><li>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。<a href="http://www.cherrypy.org/" target="_blank" rel="external">官网</a></li><li>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href="http://www.turbogears.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/python-webpy/" target="_blank" rel="external">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href="http://webpy.org/" target="_blank" rel="external">官网</a></li><li>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href="http://www.web2py.com/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/tornado/" target="_blank" rel="external">Tornado</a>：一个web 框架和异步网络库。<a href="http://www.tornadoweb.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p><ul><li>Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.<a href="https://github.com/neuman/python-carteblanche/" target="_blank" rel="external">官网</a></li><li>django-guardian：Django 1.2+ 实现了单个对象权限。<a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="external">官网</a></li><li>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href="https://github.com/dfunckt/django-rules" target="_blank" rel="external">官网</a></li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>内容管理系统</p><ul><li>odoo-cms: 一个开源的，企业级 CMS，基于odoo。<a href="http://www.odoo.com" target="_blank" rel="external">官网</a></li><li>django-cms：一个开源的，企业级 CMS，基于 Django。<a href="http://www.django-cms.org/en/" target="_blank" rel="external">官网</a></li><li>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href="http://djedi-cms.org/" target="_blank" rel="external">官网</a></li><li>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href="http://www.feincms.org/" target="_blank" rel="external">官网</a></li><li>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href="http://kotti.pylonsproject.org/" target="_blank" rel="external">官网</a></li><li>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href="http://mezzanine.jupo.org/" target="_blank" rel="external">官网</a></li><li>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href="http://opps.github.io/opps/" target="_blank" rel="external">官网</a></li><li>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href="https://plone.org/" target="_blank" rel="external">官网</a></li><li>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href="http://quokkaproject.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/wagtail/" target="_blank" rel="external">Wagtail</a>：一个 Django 内容管理系统。<a href="https://wagtail.io/" target="_blank" rel="external">官网</a></li><li>Widgy：最新的 CMS 框架，基于 Django。<a href="https://wid.gy/" target="_blank" rel="external">官网</a></li></ul><h3 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p><ul><li>django-oscar：一个用于 Django 的开源的电子商务框架。<a href="http://oscarcommerce.com/" target="_blank" rel="external">官网</a></li><li>django-shop：一个基于 Django 的店铺系统。<a href="https://github.com/awesto/django-shop" target="_blank" rel="external">官网</a></li><li>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href="https://github.com/stephenmcd/cartridge" target="_blank" rel="external">官网</a></li><li>shoop：一个基于 Django 的开源电子商务平台。<a href="https://www.shoop.io/en/" target="_blank" rel="external">官网</a></li><li>alipay：非官方的 Python 支付宝 API。<a href="https://github.com/lxneng/alipay" target="_blank" rel="external">官网</a></li><li>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href="https://github.com/agiliq/merchant" target="_blank" rel="external">官网</a></li><li>money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.<a href="https://github.com/carlospalol/money" target="_blank" rel="external">官网</a></li><li>python-currencies：显示货币格式以及它的数值。<a href="https://github.com/Alir3z4/python-currencies" target="_blank" rel="external">官网</a></li></ul><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>用来开发RESTful APIs的库</p><ul><li>Django<ul><li><a href="http://hao.jobbole.com/django-rest-framework/" target="_blank" rel="external">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href="http://www.django-rest-framework.org/" target="_blank" rel="external">官网</a></li><li>django-tastypie：为Django 应用开发API。<a href="http://tastypieapi.org/" target="_blank" rel="external">官网</a></li><li>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href="https://github.com/5monkeys/django-formapi" target="_blank" rel="external">官网</a></li></ul></li><li>Flask<ul><li>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href="http://www.flaskapi.org/" target="_blank" rel="external">官网</a></li><li>flask-restful：为 flask 快速创建REST APIs 。<a href="http://flask-restful.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href="https://flask-restless.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>flask-api-utils：为 Flask 处理 API 表示和验证。<a href="https://github.com/marselester/flask-api-utils" target="_blank" rel="external">官网</a></li><li>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href="https://github.com/nicolaiarocci/eve" target="_blank" rel="external">官网</a></li></ul></li><li>Pyramid<ul><li>cornice：一个Pyramid 的 REST 框架 。<a href="https://cornice.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li><li>与框架无关的<ul><li>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href="http://falconframework.org/" target="_blank" rel="external">官网</a></li><li>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href="https://github.com/jeffknupp/sandman" target="_blank" rel="external">官网</a></li><li>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href="http://restless.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href="https://github.com/vertical-knowledge/ripozo" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>实现验证方案的库。</p><ul><li>OAuth<ul><li>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href="http://peterhudec.github.io/authomatic/" target="_blank" rel="external">官网</a></li><li>django-allauth：Django 的验证应用。<a href="https://github.com/pennersr/django-allauth" target="_blank" rel="external">官网</a></li><li>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href="https://github.com/evonove/django-oauth-toolkit" target="_blank" rel="external">官网</a></li><li>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href="https://github.com/caffeinehit/django-oauth2-provider" target="_blank" rel="external">官网</a></li><li>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href="https://github.com/lepture/flask-oauthlib" target="_blank" rel="external">官网</a></li><li>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href="https://github.com/idan/oauthlib" target="_blank" rel="external">官网</a></li><li>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href="https://github.com/joestump/python-oauth2" target="_blank" rel="external">官网</a></li><li>python-social-auth：一个设置简单的社会化验证方式。<a href="https://github.com/omab/python-social-auth" target="_blank" rel="external">官网</a></li><li>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href="https://github.com/litl/rauth" target="_blank" rel="external">官网</a></li><li>sanction：一个超级简单的OAuth2 客户端实现。<a href="https://github.com/demianbrecht/sanction" target="_blank" rel="external">官网</a></li></ul></li><li>其他<ul><li>jose：JavaScript 对象签名和加密草案的实现。<a href="https://github.com/demonware/jose" target="_blank" rel="external">官网</a></li><li>PyJWT：JSON Web 令牌草案 01。<a href="https://github.com/jpadilla/pyjwt" target="_blank" rel="external">官网</a></li><li>python-jws：JSON Web 签名草案 02 的实现。<a href="https://github.com/brianloveswords/python-jws" target="_blank" rel="external">官网</a></li><li>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href="https://github.com/davedoesdev/python-jwt" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p><ul><li><a href="http://hao.jobbole.com/jinja2/" target="_blank" rel="external">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href="https://github.com/pallets/jinja" target="_blank" rel="external">官网</a></li><li>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href="https://chameleon.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href="https://genshi.edgewall.org/" target="_blank" rel="external">官网</a></li><li>Mako：Python 平台的超高速轻量级模板。<a href="http://www.makotemplates.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>处理事件以及任务队列的库。</p><ul><li>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href="http://www.celeryproject.org/" target="_blank" rel="external">官网</a></li><li>huey：小型多线程任务队列。<a href="https://github.com/coleifer/huey" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/mrq/" target="_blank" rel="external">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href="https://github.com/pricingassistant/mrq" target="_blank" rel="external">官网</a></li><li>rq：简单的 Python 作业队列。<a href="http://python-rq.org/" target="_blank" rel="external">官网</a></li><li>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href="https://github.com/rdegges/simpleq" target="_blank" rel="external">官网</a></li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p><ul><li>django-haystack：Django 模块化搜索。<a href="https://github.com/django-haystack/django-haystack" target="_blank" rel="external">官网</a></li><li>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html" target="_blank" rel="external">官网</a></li><li>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="external">官网</a> </li><li>solrpy：<a href="http://lucene.apache.org/solr/" target="_blank" rel="external">solr</a>的 Python 客户端。<a href="https://github.com/edsu/solrpy" target="_blank" rel="external">官网</a></li><li>Whoosh：一个快速的纯 Python 搜索引擎库。<a href="http://whoosh.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="动态消息"><a href="#动态消息" class="headerlink" title="动态消息"></a>动态消息</h3><p>用来创建用户活动的库。</p><ul><li>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href="https://github.com/justquick/django-activity-stream" target="_blank" rel="external">官网</a></li><li>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href="https://github.com/tschellenbach/Stream-Framework" target="_blank" rel="external">官网</a></li></ul><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p><ul><li>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href="https://github.com/django-compressor/django-compressor" target="_blank" rel="external">官网</a></li><li>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href="http://django-storages.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href="http://www.fanstatic.org/en/latest/" target="_blank" rel="external">官网</a></li><li>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href="http://fileconveyor.org/" target="_blank" rel="external">官网</a></li><li>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href="http://flask-assets.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href="https://github.com/jaysonsantos/jinja-assets-compressor" target="_blank" rel="external">官网</a></li><li>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href="http://webassets.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存数据的库。</p><ul><li>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。<a href="http://beaker.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>django-cache-machine：Django 模型的自动缓存和失效。<a href="https://github.com/django-cache-machine/django-cache-machine" target="_blank" rel="external">官网</a></li><li>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href="https://github.com/Suor/django-cacheops" target="_blank" rel="external">官网</a></li><li>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href="https://github.com/5monkeys/django-viewlet" target="_blank" rel="external">官网</a></li><li>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href="http://dogpilecache.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href="https://pypi.python.org/pypi/HermesCache" target="_blank" rel="external">官网</a></li><li>johnny-cache：django应用缓存框架。<a href="https://github.com/jmoiron/johnny-cache" target="_blank" rel="external">官网</a></li><li>pylibmc：<a href="http://libmemcached.org/libMemcached.html" target="_blank" rel="external">libmemcached</a> 接口的 Python 封装。<a href="https://github.com/lericson/pylibmc" target="_blank" rel="external">官网</a></li></ul><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p><ul><li>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href="https://github.com/StreetVoice/django-celery-ses" target="_blank" rel="external">官网</a></li><li>envelopes：供人类使用的电子邮件库。<a href="http://tomekwojcik.github.io/envelopes/" target="_blank" rel="external">官网</a></li><li>flanker：一个 email 地址和 Mime 解析库。<a href="https://github.com/mailgun/flanker" target="_blank" rel="external">官网</a></li><li>imbox：Python IMAP 库<a href="https://github.com/martinrusev/imbox" target="_blank" rel="external">官网</a></li><li>inbox.py：Python SMTP 服务器。<a href="https://github.com/kennethreitz/inbox.py" target="_blank" rel="external">官网</a></li><li>inbox：一个开源电子邮件工具箱。<a href="https://github.com/nylas/sync-engine" target="_blank" rel="external">官网</a></li><li>lamson：Python 风格的 SMTP 应用服务器。<a href="https://github.com/zedshaw/lamson" target="_blank" rel="external">官网</a></li><li>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href="https://github.com/WoLpH/mailjet" target="_blank" rel="external">官网</a></li><li>marrow.mailer：高性能可扩展邮件分发框架。<a href="https://github.com/marrow/mailer" target="_blank" rel="external">官网</a></li><li>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href="https://github.com/tonioo/modoboa" target="_blank" rel="external">官网</a></li><li>pyzmail：创建，发送和解析电子邮件。<a href="http://www.magiksys.net/pyzmail/" target="_blank" rel="external">官网</a></li><li>Talon：Mailgun 库，用来抽取信息和签名。<a href="https://github.com/mailgun/talon" target="_blank" rel="external">官网</a></li></ul><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>用来进行国际化的库。</p><ul><li>Babel：一个Python 的国际化库。<a href="http://babel.pocoo.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Korean：一个韩语词态库。<a href="https://korean.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h3><p>解析URLs的库</p><ul><li>furl：一个让处理 URL 更简单小型 Python 库。<a href="https://github.com/gruns/furl" target="_blank" rel="external">官网</a></li><li>purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。<a href="https://github.com/codeinthehole/purl" target="_blank" rel="external">官网</a></li><li>pyshorteners：一个纯 Python URL 缩短库。<a href="https://github.com/ellisonleao/pyshorteners" target="_blank" rel="external">官网</a></li><li>shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。<a href="https://github.com/Alir3z4/python-shorturl" target="_blank" rel="external">官网</a></li><li>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。<a href="https://github.com/sloria/webargs" target="_blank" rel="external">官网</a></li></ul><h3 id="HTML处理"><a href="#HTML处理" class="headerlink" title="HTML处理"></a>HTML处理</h3><p>处理 HTML和XML的库。</p><ul><li>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">官网</a></li><li>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href="http://bleach.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>cssutils：一个 Python 的 CSS 库。<a href="https://pypi.python.org/pypi/cssutils/" target="_blank" rel="external">官网</a></li><li>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href="https://github.com/html5lib/html5lib-python" target="_blank" rel="external">官网</a></li><li>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href="http://lxml.de/" target="_blank" rel="external">官网</a></li><li>MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。<a href="https://github.com/pallets/markupsafe" target="_blank" rel="external">官网</a></li><li>pyquery：一个解析 HTML 的库，类似 jQuery。<a href="https://github.com/gawel/pyquery" target="_blank" rel="external">官网</a></li><li>untangle：将XML文档转换为Python对象，使其可以方便的访问。<a href="https://github.com/stchris/untangle" target="_blank" rel="external">官网</a></li><li>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href="https://github.com/xhtml2pdf/xhtml2pdf" target="_blank" rel="external">官网</a></li><li>xmltodict：像处理 JSON 一样处理 XML。<a href="https://github.com/martinblech/xmltodict" target="_blank" rel="external">官网</a></li></ul><p>爬取网络站点的库</p><ul><li>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href="http://scrapy.org/" target="_blank" rel="external">官网</a></li><li>cola：一个分布式爬虫框架。<a href="https://github.com/chineking/cola" target="_blank" rel="external">官网</a></li><li>Demiurge：基于PyQuery 的爬虫微型框架。<a href="https://github.com/matiasb/demiurge" target="_blank" rel="external">官网</a></li><li>feedparser：通用 feed 解析器。<a href="http://pythonhosted.org/feedparser/" target="_blank" rel="external">官网</a></li><li>Grab：站点爬取框架。<a href="http://grablib.org/" target="_blank" rel="external">官网</a></li><li>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href="https://github.com/hickford/MechanicalSoup" target="_blank" rel="external">官网</a></li><li>portia：Scrapy 可视化爬取。<a href="https://github.com/scrapinghub/portia" target="_blank" rel="external">官网</a></li><li>pyspider：一个强大的爬虫系统。<a href="https://github.com/binux/pyspider" target="_blank" rel="external">官网</a></li><li>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href="https://github.com/jmcarp/robobrowser" target="_blank" rel="external">官网</a></li></ul><h3 id="网页内容提取"><a href="#网页内容提取" class="headerlink" title="网页内容提取"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p><ul><li>Haul：一个可以扩展的图像爬取工具。<a href="https://github.com/vinta/Haul" target="_blank" rel="external">官网</a></li><li>html2text：将 HTML 转换为 Markdown 格式文本<a href="https://github.com/Alir3z4/html2text" target="_blank" rel="external">官网</a></li><li>lassie：人性化的网页内容检索库。<a href="https://github.com/michaelhelmick/lassie" target="_blank" rel="external">官网</a></li><li>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href="https://github.com/coleifer/micawber" target="_blank" rel="external">官网</a> </li><li><a href="http://hao.jobbole.com/python-newspaper/" target="_blank" rel="external">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href="https://github.com/codelucas/newspaper" target="_blank" rel="external">官网</a></li><li>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。<a href="https://github.com/erikriver/opengraph" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/python-goose/" target="_blank" rel="external">python-goose</a>：HTML内容/文章提取器。<a href="https://github.com/grangier/python-goose" target="_blank" rel="external">官网</a></li><li>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href="https://github.com/buriy/python-readability" target="_blank" rel="external">官网</a></li><li>sanitize：为杂乱的数据世界带来调理性。<a href="https://github.com/Alir3z4/python-sanitize" target="_blank" rel="external">官网</a></li><li>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href="https://github.com/miso-belica/sumy" target="_blank" rel="external">官网</a></li><li>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href="https://github.com/deanmalmgren/textract" target="_blank" rel="external">官网</a></li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>进行表单操作的库。</p><ul><li>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href="http://deform.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href="https://github.com/dyve/django-bootstrap3" target="_blank" rel="external">官网</a></li><li>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href="http://django-crispy-forms.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href="https://github.com/WiserTogether/django-remote-forms" target="_blank" rel="external">官网</a></li><li>WTForms：一个灵活的表单验证和呈现库。<a href="http://wtforms.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href="http://wtforms-json.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p><ul><li>Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.<a href="http://docs.python-cerberus.org/en/stable/" target="_blank" rel="external">官网</a></li><li>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href="http://docs.pylonsproject.org/projects/colander/en/latest/" target="_blank" rel="external">官网</a></li><li>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href="https://github.com/ambitioninc/kmatch" target="_blank" rel="external">官网</a></li><li>schema：一个用于对 Python 数据结构进行验证的库。<a href="https://github.com/keleshev/schema" target="_blank" rel="external">官网</a> </li><li>Schematics：数据结构验证。<a href="https://github.com/schematics/schematics" target="_blank" rel="external">官网</a></li><li>valideer：轻量级可扩展的数据验证和适配库。<a href="https://github.com/podio/valideer" target="_blank" rel="external">官网</a></li><li>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。<a href="https://github.com/alecthomas/voluptuous" target="_blank" rel="external">官网</a></li></ul><h3 id="反垃圾技术"><a href="#反垃圾技术" class="headerlink" title="反垃圾技术"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p><ul><li>django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。<a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="external">官网</a></li><li>django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。<a href="https://github.com/moqada/django-simple-spam-blocker" target="_blank" rel="external">官网</a></li></ul><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>用来进行标记的库。</p><ul><li>django-taggit：简单的 Django 标记工具。<a href="https://github.com/alex/django-taggit" target="_blank" rel="external">官网</a></li></ul><h3 id="管理面板"><a href="#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><p>管理界面库。</p><ul><li>Ajenti：一个你的服务器值得拥有的管理面板。<a href="https://github.com/Eugeny/ajenti" target="_blank" rel="external">官网</a></li><li>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href="http://djangosuit.com/" target="_blank" rel="external">官网</a></li><li>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href="https://github.com/sshwsfc/django-xadmin" target="_blank" rel="external">官网</a></li><li>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href="https://github.com/flask-admin/flask-admin" target="_blank" rel="external">官网</a></li><li>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href="https://github.com/mher/flower" target="_blank" rel="external">官网</a></li><li>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href="http://grappelliproject.com/" target="_blank" rel="external">官网</a> </li><li>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href="https://github.com/wooey/wooey" target="_blank" rel="external">官网</a></li></ul><h3 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。</p><ul><li>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href="http://blog.getpelican.com/" target="_blank" rel="external">官网</a></li><li>Cactus：为设计师设计的静态站点生成器。<a href="https://github.com/koenbok/Cactus/" target="_blank" rel="external">官网</a> </li><li>Hyde：基于 Jinja2 的静态站点生成器。<a href="http://hyde.github.io/" target="_blank" rel="external">官网</a></li><li>Nikola：一个静态网站和博客生成器。<a href="https://www.getnikola.com/" target="_blank" rel="external">官网</a></li><li>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。<a href="http://tinkerer.me/" target="_blank" rel="external">官网</a></li><li>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href="https://www.getlektor.com/" target="_blank" rel="external">官网</a></li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统进程启动及通信库。</p><ul><li>envoy：比 Python <a href="https://docs.python.org/2/library/subprocess.html" target="_blank" rel="external">subprocess</a> 模块更人性化。<a href="https://github.com/kennethreitz/envoy" target="_blank" rel="external">官网</a></li><li>sarge：另一 种 subprocess 模块的封装。<a href="http://sarge.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>sh：一个完备的 subprocess 替代库。<a href="https://github.com/amoffat/sh" target="_blank" rel="external">官网</a></li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p><ul><li>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href="https://docs.python.org/2/library/multiprocessing.html" target="_blank" rel="external">官网</a></li><li>threading：(Python 标准库)更高层的线程接口。<a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="external">官网</a></li><li>eventlet：支持 WSGI 的异步框架。<a href="http://eventlet.net/" target="_blank" rel="external">官网</a></li><li>gevent：一个基于协程的 Python 网络库，使用<a href="https://github.com/python-greenlet/greenlet" target="_blank" rel="external">greenlet</a>。<a href="http://www.gevent.org/" target="_blank" rel="external">官网</a></li><li>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href="https://github.com/madisonmay/Tomorrow" target="_blank" rel="external">官网</a></li><li>uvloop：在libuv之上超快速实现asyncio事件循环。<a href="https://github.com/MagicStack/uvloop" target="_blank" rel="external">官网</a></li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>用于网络编程的库。</p><ul><li>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/twisted/" target="_blank" rel="external">Twisted</a>：一个事件驱动的网络引擎。<a href="https://twistedmatrix.com/trac/" target="_blank" rel="external">官网</a></li><li>pulsar：事件驱动的并发框架。<a href="https://github.com/quantmind/pulsar" target="_blank" rel="external">官网</a></li><li>diesel：基于Greenlet 的事件 I/O 框架。<a href="https://github.com/dieseldev/diesel" target="_blank" rel="external">官网</a></li><li>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href="http://zeromq.github.io/pyzmq/" target="_blank" rel="external">官网</a></li><li>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href="https://github.com/smira/txZMQ" target="_blank" rel="external">官网</a></li></ul><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>帮助使用WebSocket的库。</p><ul><li>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">asyncio</a>。<a href="https://github.com/crossbario/autobahn-python" target="_blank" rel="external">官网</a></li><li>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).<a href="https://github.com/crossbario/crossbar/" target="_blank" rel="external">官网</a></li><li>django-socketio：给 Django 用的 WebSockets。<a href="https://github.com/stephenmcd/django-socketio" target="_blank" rel="external">官网</a></li><li>WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="external">官网</a></li></ul><h3 id="WSGI-服务器"><a href="#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p><ul><li>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/gunicorn" target="_blank" rel="external">官网</a></li><li>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href="https://uwsgi-docs.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/bjoern/" target="_blank" rel="external">bjoern</a>：异步，非常快速，由 C 语言编写。<a href="https://pypi.python.org/pypi/bjoern" target="_blank" rel="external">官网</a></li><li>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href="http://www.fapws.org/" target="_blank" rel="external">官网</a></li><li>meinheld：异步，部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/meinheld" target="_blank" rel="external">官网</a></li><li>netius：异步，非常快速。<a href="https://github.com/hivesolutions/netius" target="_blank" rel="external">官网</a></li><li>paste：多线程，稳定，久经考验。<a href="http://pythonpaste.org/" target="_blank" rel="external">官网</a></li><li>rocket：多线程。<a href="https://pypi.python.org/pypi/rocket" target="_blank" rel="external">官网</a></li><li>waitress：多线程, 是它驱动着 Pyramid 框架。<a href="https://waitress.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href="http://werkzeug.pocoo.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="RPC-服务器"><a href="#RPC-服务器" class="headerlink" title="RPC 服务器"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p><ul><li>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href="https://github.com/joshmarshall/jsonrpclib/" target="_blank" rel="external">官网</a></li><li>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href="https://docs.python.org/2/library/simplexmlrpcserver.html" target="_blank" rel="external">官网</a></li><li>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href="https://github.com/0rpc/zerorpc-python" target="_blank" rel="external">官网</a></li></ul><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><ul><li>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href="https://cryptography.io/en/latest/" target="_blank" rel="external">官网</a></li><li>hashids：在 Python 中实现 <a href="http://hashids.org/" target="_blank" rel="external">hashids</a> 。<a href="https://github.com/davidaurelio/hashids-python" target="_blank" rel="external">官网</a></li><li>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href="http://www.paramiko.org/" target="_blank" rel="external">官网</a></li><li>Passlib：安全密码存储／哈希库，<a href="https://pythonhosted.org/passlib/" target="_blank" rel="external">官网</a></li><li>PyCrypto：Python 密码学工具箱。<a href="https://www.dlitz.net/software/pycrypto/" target="_blank" rel="external">官网</a></li><li>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href="https://github.com/pyca/pynacl" target="_blank" rel="external">官网</a></li></ul><h3 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p><ul><li>curses：内建的 <a href="http://www.gnu.org/software/ncurses/" target="_blank" rel="external">ncurses</a> 封装，用来创建终端图形用户界面。<a href="https://docs.python.org/2/library/curses.html#module-curses" target="_blank" rel="external">官网</a></li><li>enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。<a href="https://github.com/nucleic/enaml" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/kivy/" target="_blank" rel="external">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。<a href="https://kivy.org/" target="_blank" rel="external">官网</a></li><li>pyglet：一个Python 的跨平台窗口及多媒体库。<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home" target="_blank" rel="external">官网</a></li><li>PyQt：跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="external">Qt</a> 的 Python 绑定 ，支持Qt v4 和 Qt v5。<a href="https://riverbankcomputing.com/software/pyqt/intro" target="_blank" rel="external">官网</a></li><li>PySide：P跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="external">Qt</a> 的 Python 绑定 ，支持Qt v4。<a href="https://wiki.qt.io/PySide" target="_blank" rel="external">官网</a></li><li>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href="https://wiki.python.org/moin/TkInter" target="_blank" rel="external">官网</a></li><li>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href="https://github.com/pybee/toga" target="_blank" rel="external">官网</a></li><li>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href="http://urwid.org/" target="_blank" rel="external">官网</a></li><li>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href="http://wxpython.org/" target="_blank" rel="external">官网</a></li><li>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定<a href="https://wiki.gnome.org/Projects/PyGObject" target="_blank" rel="external">官网</a></li><li>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href="https://github.com/zoofIO/flexx" target="_blank" rel="external">官网</a></li></ul><h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>超赞的游戏开发库。</p><ul><li>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href="http://cocos2d.org/" target="_blank" rel="external">官网</a></li><li>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。<a href="https://www.panda3d.org/" target="_blank" rel="external">官网</a></li><li>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href="http://www.pygame.org/news.html" target="_blank" rel="external">官网</a></li><li>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href="http://www.ogre3d.org/tikiwiki/PyOgre" target="_blank" rel="external">官网</a></li><li>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href="http://pyopengl.sourceforge.net/" target="_blank" rel="external">官网</a></li><li>PySDL2：SDL2 库的封装，基于 ctypes。<a href="http://pysdl2.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>RenPy：一个视觉小说（visual novel）引擎。<a href="https://www.renpy.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>用来生成和操作日志的库。</p><ul><li>logging：(Python 标准库) 为 Python 提供日志功能。<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">官网</a></li><li>logbook：Logging 库的替代品。<a href="http://pythonhosted.org/Logbook/" target="_blank" rel="external">官网</a></li><li>Eliot：为复杂的和分布式系统创建日志。<a href="https://eliot.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Raven：Sentry的 Python 客户端。<a href="http://raven.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Sentry：实时记录和收集日志的服务器。<a href="https://pypi.python.org/pypi/sentry" target="_blank" rel="external">官网</a></li></ul><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>进行代码库测试和生成测试数据的库。</p><ul><li>测试框架<ul><li>unittest：(Python 标准库) 单元测试框架。<a href="https://docs.python.org/2/library/unittest.html" target="_blank" rel="external">官网</a></li><li>nose：nose 扩展了 unittest 的功能。<a href="https://nose.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。<a href="https://github.com/benjamin-hodgson/Contexts" target="_blank" rel="external">官网</a></li><li>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href="https://github.com/DRMacIver/hypothesis" target="_blank" rel="external">官网</a></li><li>mamba：Python 的终极测试工具， 拥护BDD。<a href="http://nestorsalceda.github.io/mamba/" target="_blank" rel="external">官网</a></li><li>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href="https://github.com/asweigart/pyautogui" target="_blank" rel="external">官网</a></li><li>pyshould：Should 风格的断言，基于 <a href="https://github.com/hamcrest/PyHamcrest" target="_blank" rel="external">PyHamcrest</a>。<a href="https://github.com/drslump/pyshould" target="_blank" rel="external">官网</a></li><li>pytest：一个成熟的全功能 Python 测试工具。<a href="http://pytest.org/latest/" target="_blank" rel="external">官网</a></li><li>green：干净，多彩的测试工具。<a href="https://github.com/CleanCut/green" target="_blank" rel="external">官网</a></li><li>pyvows：BDD 风格的测试工具，受Vows.js的启发。<a href="http://heynemann.github.io/pyvows/" target="_blank" rel="external">官网</a>-</li><li>Robot Framework：一个通用的自动化测试框架。<a href="https://github.com/robotframework/robotframework" target="_blank" rel="external">官网</a></li></ul></li><li>Web 测试<ul><li>Selenium：<a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenium</a> WebDriver 的 Python 绑定。<a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">官网</a></li><li>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href="https://github.com/locustio/locust" target="_blank" rel="external">官网</a></li><li>sixpack：一个和语言无关的 A/B 测试框架。<a href="https://github.com/seatgeek/sixpack" target="_blank" rel="external">官网</a></li><li>splinter：开源的 web 应用测试工具。<a href="https://splinter.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li><li>Mock测试<ul><li>mock：(Python 标准库) 一个用于伪造测试的库。<a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="external">官网</a></li><li>doublex：Python 的一个功能强大的 doubles  测试框架。<a href="https://pypi.python.org/pypi/doublex" target="_blank" rel="external">官网</a></li><li>freezegun：通过伪造日期模块来生成不同的时间。<a href="https://github.com/spulec/freezegun" target="_blank" rel="external">官网</a></li><li>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href="https://github.com/patrys/httmock" target="_blank" rel="external">官网</a></li><li>httpretty：Python 的 HTTP 请求 mock 工具。<a href="http://falcao.it/HTTPretty/" target="_blank" rel="external">官网</a></li><li>responses：伪造 Python 中的 requests 库的一个通用库。<a href="https://github.com/getsentry/responses" target="_blank" rel="external">官网</a></li><li>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href="https://github.com/kevin1024/vcrpy" target="_blank" rel="external">官网</a></li></ul></li><li>对象工厂<ul><li>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href="https://github.com/rbarrois/factoryboy" target="_blank" rel="external">官网</a></li><li>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href="https://github.com/klen/mixer" target="_blank" rel="external">官网</a></li><li>modelmommy：为 Django 测试创建随机固件<a href="https://github.com/vandersonmota/modelmommy" target="_blank" rel="external">官网</a></li></ul></li><li>代码覆盖率<ul><li>coverage：代码覆盖率测量。<a href="https://pypi.python.org/pypi/coverage" target="_blank" rel="external">官网</a></li></ul></li><li>伪数据<ul><li>faker：一个 Python 库，用来生成伪数据。<a href="http://www.joke2k.net/faker/" target="_blank" rel="external">官网</a></li><li>fake2db：伪数据库生成器。<a href="https://github.com/emirozer/fake2db" target="_blank" rel="external">官网</a></li><li>radar：生成随机的日期/时间。<a href="https://pypi.python.org/pypi/radar" target="_blank" rel="external">官网</a></li></ul></li><li>错误处理<ul><li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href="https://github.com/ajalt/fuckitpy" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="代码分析和Lint工具"><a href="#代码分析和Lint工具" class="headerlink" title="代码分析和Lint工具"></a>代码分析和Lint工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p><ul><li>代码分析<ul><li>coala：语言独立和易于扩展的代码分析应用程序。<a href="http://coala-analyzer.org/" target="_blank" rel="external">官网</a></li><li>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href="https://github.com/scottrogowski/code2flow" target="_blank" rel="external">官网</a></li><li>pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。<a href="https://github.com/gak/pycallgraph" target="_blank" rel="external">官网</a></li><li>pysonar2：Python 类型推断和检索工具。<a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="external">官网</a></li></ul></li><li>Lint工具<ul><li>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href="https://pypi.python.org/pypi/flake8" target="_blank" rel="external">官网</a></li><li>Pylint：一个完全可定制的源码分析器。<a href="https://www.pylint.org/" target="_blank" rel="external">官网</a></li><li>YAPF: Google的Python代码格式化工具。<a href="https://github.com/google/yapf" target="_blank" rel="external">官网</a></li><li>pylama：Python 和 JavaScript 的代码审查工具。<a href="https://pylama.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li></ul></li><li>代码格式化<ul><li>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href="https://github.com/hhatto/autopep8" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="Debugging-Tools"><a href="#Debugging-Tools" class="headerlink" title="Debugging Tools"></a>Debugging Tools</h3><p>用来进行代码调试的库。</p><ul><li>调试器<ul><li>ipdb：IPython 启用的 <a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="external">pdb</a>。<a href="https://pypi.python.org/pypi/ipdb" target="_blank" rel="external">官网</a></li><li>pudb：全屏，基于控制台的 Python 调试器。<a href="https://pypi.python.org/pypi/pudb" target="_blank" rel="external">官网</a></li><li>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href="https://github.com/google/pyringe" target="_blank" rel="external">官网</a></li><li>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href="https://github.com/Kozea/wdb" target="_blank" rel="external">官网</a></li><li>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href="http://winpdb.org/" target="_blank" rel="external">官网</a></li><li>django-debug-toolbar：为 Django 显示各种调试信息。<a href="https://github.com/django-debug-toolbar/django-debug-toolbar" target="_blank" rel="external">官网</a></li><li>django-devserver：一个 Django 运行服务器的替代品。<a href="https://github.com/dcramer/django-devserver" target="_blank" rel="external">官网</a></li><li>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href="https://github.com/mgood/flask-debugtoolbar" target="_blank" rel="external">官网</a></li></ul></li><li>性能分析器<ul><li>lineprofiler：逐行性能分析。<a href="https://github.com/rkern/lineprofiler" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/memory_profiler/" target="_blank" rel="external">Memory Profiler</a>：监控 Python 代码的内存使用。<a href="http://pypi.python.org/pypi/memory_profiler" target="_blank" rel="external">官网</a>、<a href="https://github.com/fabianp/memoryprofiler" target="_blank" rel="external">内存</a></li><li>profiling：一个交互式 Python 性能分析工具。<a href="https://github.com/what-studio/profiling" target="_blank" rel="external">官网</a></li></ul></li><li>其他<ul><li>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href="https://github.com/eliben/pyelftools" target="_blank" rel="external">官网</a></li><li>python-statsd：<a href="https://github.com/etsy/statsd/" target="_blank" rel="external">statsd</a> 服务器的 Python 客户端。<a href="https://github.com/WoLpH/python-statsd" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="Science-and-Data-Analysis"><a href="#Science-and-Data-Analysis" class="headerlink" title="Science and Data Analysis"></a>Science and Data Analysis</h3><p>用来进行科学计算和数据分析的库。</p><ul><li>astropy：一个天文学 Python 库。<a href="http://www.astropy.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/bcbio-nextgen/" target="_blank" rel="external">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href="https://github.com/chapmanb/bcbio-nextgen" target="_blank" rel="external">官网</a></li><li>bccb：生物分析相关代码集合<a href="https://github.com/chapmanb/bcbb" target="_blank" rel="external">官网</a></li><li>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href="http://biopython.org/wiki/MainPage" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/blaze/" target="_blank" rel="external">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href="http://blaze.readthedocs.org/en/latest/index.html" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/cclib/" target="_blank" rel="external">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href="http://cclib.github.io/" target="_blank" rel="external">官网</a></li><li>NetworkX：一个为复杂网络设计的高性能软件。<a href="https://networkx.github.io/" target="_blank" rel="external">官网</a></li><li>Neupy：执行和测试各种不同的人工神经网络算法。<a href="http://neupy.com/pages/home.html" target="_blank" rel="external">官网</a></li><li>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。<a href="http://numba.pydata.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/numpy/" target="_blank" rel="external">NumPy</a>：使用 Python 进行科学计算的基础包。<a href="http://www.numpy.org/" target="_blank" rel="external">官网</a></li><li>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href="http://openbabel.org/wiki/MainPage" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/open-mining/" target="_blank" rel="external">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href="https://github.com/mining/mining" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/orange/" target="_blank" rel="external">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href="http://orange.biolab.si/" target="_blank" rel="external">官网</a></li><li>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href="http://pandas.pydata.org/" target="_blank" rel="external">官网</a></li><li>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href="http://www.pydy.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pymc/" target="_blank" rel="external">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href="https://github.com/pymc-devs/pymc3" target="_blank" rel="external">官网</a></li><li>RDKit：化学信息学和机器学习软件。<a href="http://www.rdkit.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/scipy/" target="_blank" rel="external">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href="http://www.scipy.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/statsmodels/" target="_blank" rel="external">statsmodels</a>：统计建模和计量经济学。<a href="https://github.com/statsmodels/statsmodels" target="_blank" rel="external">官网</a></li><li>SymPy：一个用于符号数学的 Python 库。<a href="https://github.com/sympy/sympy" target="_blank" rel="external">官网</a></li><li>zipline：一个 Python 算法交易库。<a href="https://github.com/quantopian/zipline" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/bayesian-belief-networks/" target="_blank" rel="external">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href="https://github.com/eBay/bayesian-belief-networks" target="_blank" rel="external">官网</a></li><li>keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络<a href="https://keras.io/" target="_blank" rel="external">官网</a></li></ul><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href="https://github.com/sorrycc/awesome-javascript#data-visualization" target="_blank" rel="external">awesome-javascript</a>。</p><ul><li>matplotlib：一个 Python 2D 绘图库。<a href="http://matplotlib.org/" target="_blank" rel="external">官网</a></li><li>bokeh：用 Python 进行交互式 web 绘图。<a href="https://github.com/bokeh/bokeh" target="_blank" rel="external">官网</a></li><li>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href="https://github.com/yhat/ggplot" target="_blank" rel="external">官网</a></li><li>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href="https://plot.ly/python/" target="_blank" rel="external">官网</a></li><li>pygal：一个 Python SVG 图表创建工具。<a href="http://www.pygal.org/en/latest/" target="_blank" rel="external">官网</a></li><li>pygraphviz：Graphviz 的 Python 接口。<a href="https://pypi.python.org/pypi/pygraphviz" target="_blank" rel="external">官网</a></li><li>PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。<a href="http://www.pyqtgraph.org/" target="_blank" rel="external">官网</a></li><li>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href="http://jiffyclub.github.io/snakeviz/" target="_blank" rel="external">官网</a></li><li>vincent：把 Python 转换为 Vega 语法的转换工具。<a href="https://github.com/wrobstory/vincent" target="_blank" rel="external">官网</a></li><li>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href="http://vispy.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉库。</p><ul><li>OpenCV：开源计算机视觉库。<a href="http://opencv.org/" target="_blank" rel="external">官网</a></li><li>pyocr：Tesseract和Cuneiform的包装库。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="external">官网</a></li><li>pytesseract：<a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a>的另一包装库。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/simplecv/" target="_blank" rel="external">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href="http://simplecv.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习库。 参见: <a href="https://github.com/josephmisiti/awesome-machine-learning#python" target="_blank" rel="external">awesome-machine-learning</a>.</p><ul><li>Crab：灵活、快速的推荐引擎。<a href="https://github.com/muricoca/crab" target="_blank" rel="external">官网</a></li><li>gensim：人性化的话题建模库。<a href="https://github.com/piskvorky/gensim" target="_blank" rel="external">官网</a></li><li>hebel：GPU 加速的深度学习库。<a href="https://github.com/hannes-brt/hebel" target="_blank" rel="external">官网</a></li><li>NuPIC：智能计算 Numenta 平台。<a href="https://github.com/numenta/nupic" target="_blank" rel="external">官网</a></li><li>pattern：Python 网络挖掘模块。<a href="https://github.com/clips/pattern" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pybrain/" target="_blank" rel="external">PyBrain</a>：另一个 Python 机器学习库。<a href="https://github.com/pybrain/pybrain" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pylearn2/" target="_blank" rel="external">Pylearn2</a>：一个基于 <a href="https://github.com/Theano/Theano" target="_blank" rel="external">Theano</a> 的机器学习库。<a href="https://github.com/lisa-lab/pylearn2" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/python-recsys/" target="_blank" rel="external">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href="https://github.com/ocelma/python-recsys" target="_blank" rel="external">官网</a></li><li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href="http://scikit-learn.org/" target="_blank" rel="external">官网</a></li><li>pydeep：Python 深度学习库。<a href="https://github.com/andersbll/deeppy" target="_blank" rel="external">官网</a></li><li>vowpalporpoise：轻量级 <a href="https://github.com/JohnLangford/vowpalwabbit/" target="_blank" rel="external">Vowpal Wabbit</a> 的 Python 封装。<a href="https://github.com/josephreisinger/vowpalporpoise" target="_blank" rel="external">官网</a></li><li>skflow：一个 <a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href="https://github.com/tensorflow/skflow" target="_blank" rel="external">官网</a></li><li>Caffe: 一个<a href="https://github.com/BVLC/caffe" target="_blank" rel="external">Caffe</a>的python接口。<a href="http://caffe.berkeleyvision.org" target="_blank" rel="external">官网</a><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3></li></ul><p>MapReduce 框架和库。</p><ul><li><a href="http://hao.jobbole.com/dpark/" target="_blank" rel="external">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href="https://github.com/douban/dpark" target="_blank" rel="external">官网</a></li><li>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href="https://github.com/klbostee/dumbo" target="_blank" rel="external">官网</a></li><li>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href="https://github.com/spotify/luigi" target="_blank" rel="external">官网</a></li><li>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href="https://github.com/Yelp/mrjob" target="_blank" rel="external">官网</a></li><li>PySpark：Spark 的 Python API 。<a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">官网</a></li><li>streamparse：运行针对事实数据流的 Python 代码。集成了<a href="http://storm.apache.org/" target="_blank" rel="external">Apache Storm</a>。<a href="https://github.com/Parsely/streamparse" target="_blank" rel="external">官网</a></li></ul><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p><ul><li>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href="https://github.com/pytoolz/cytoolz/" target="_blank" rel="external">官网</a></li><li>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href="https://github.com/kachayev/fn.py" target="_blank" rel="external">官网</a></li><li>funcy：炫酷又实用的函数式工具。<a href="https://github.com/Suor/funcy" target="_blank" rel="external">官网</a></li><li>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href="https://github.com/pytoolz/toolz" target="_blank" rel="external">官网</a></li></ul><h3 id="第三方-API"><a href="#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h3><p>用来访问第三方 API的库。 参见： <a href="https://github.com/realpython/list-of-python-api-wrappers" target="_blank" rel="external">List of Python API Wrappers and Libraries</a>。</p><ul><li>apache-libcloud：一个为各种云设计的 Python 库。<a href="https://libcloud.apache.org/" target="_blank" rel="external">官网</a></li><li>boto：Amazon Web Services 的 Python 接口。<a href="https://github.com/boto/boto" target="_blank" rel="external">官网</a></li><li>django-wordpress：WordPress models and views for Django.<a href="https://github.com/sunlightlabs/django-wordpress/" target="_blank" rel="external">官网</a></li><li>facebook-sdk：Facebook 平台的 Python SDK.<a href="https://github.com/mobolic/facebook-sdk" target="_blank" rel="external">官网</a></li><li>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href="https://github.com/jgorset/facepy" target="_blank" rel="external">官网</a></li><li>gmail：Gmail 的 Python 接口。<a href="https://github.com/charlierguo/gmail" target="_blank" rel="external">官网</a></li><li>google-api-python-client：Python 用的 Google APIs 客户端库。<a href="https://github.com/google/google-api-python-client" target="_blank" rel="external">官网</a></li><li>gspread：Google 电子表格的 Python API.<a href="https://github.com/burnash/gspread" target="_blank" rel="external">官网</a></li><li>twython：Twitter API 的封装。<a href="https://github.com/ryanmcgrath/twython" target="_blank" rel="external">官网</a></li></ul><h3 id="DevOps-工具"><a href="#DevOps-工具" class="headerlink" title="DevOps 工具"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p><ul><li>Ansible：一个非常简单的 IT 自动化平台。<a href="https://github.com/ansible/ansible" target="_blank" rel="external">官网</a></li><li>SaltStack：基础设施自动化和管理系统。<a href="https://github.com/saltstack/salt" target="_blank" rel="external">官网</a></li><li>OpenStack：用于构建私有和公有云的开源软件。<a href="http://www.openstack.org/" target="_blank" rel="external">官网</a></li><li>Docker Compose：快速，分离的开发环境，使用 Docker。<a href="https://docs.docker.com/compose/" target="_blank" rel="external">官网</a></li><li>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href="http://www.fabfile.org/" target="_blank" rel="external">官网</a></li><li>cuisine：为 Fabric 提供一系列高级函数。<a href="https://github.com/sebastien/cuisine" target="_blank" rel="external">官网</a></li><li>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href="https://github.com/ronnix/fabtools" target="_blank" rel="external">官网</a></li><li>gitapi：Git 的纯 Python API。<a href="https://bitbucket.org/haard/gitapi" target="_blank" rel="external">官网</a></li><li>hgapi：Mercurial 的纯 Python API。<a href="https://bitbucket.org/haard/hgapi" target="_blank" rel="external">官网</a></li><li>honcho：<a href="https://github.com/ddollar/foreman" target="_blank" rel="external">Foreman</a>的 Python 克隆版，用来管理基于<a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="external">Procfile</a>的应用。<a href="https://github.com/nickstenning/honcho" target="_blank" rel="external">官网</a></li><li>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href="https://github.com/pexpect/pexpect" target="_blank" rel="external">官网</a></li><li>psutil：一个跨平台进程和系统工具模块。<a href="https://github.com/giampaolo/psutil" target="_blank" rel="external">官网</a></li><li>supervisor：UNIX 的进程控制系统。<a href="https://github.com/Supervisor/supervisor" target="_blank" rel="external">官网</a></li></ul><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>任务调度库。</p><ul><li>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href="http://apscheduler.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>django-schedule：一个 Django 排程应用。<a href="https://github.com/thauber/django-schedule" target="_blank" rel="external">官网</a></li><li>doit：一个任务执行和构建工具。<a href="http://pydoit.org/" target="_blank" rel="external">官网</a></li><li>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href="https://github.com/gunnery/gunnery" target="_blank" rel="external">官网</a></li><li>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href="http://pythonhosted.org/joblib/index.html" target="_blank" rel="external">官网</a></li><li>Plan：如有神助地编写 crontab 文件。<a href="https://github.com/fengsp/plan" target="_blank" rel="external">官网</a></li><li>schedule：人性化的 Python 任务调度库。<a href="https://github.com/dbader/schedule" target="_blank" rel="external">官网</a></li><li>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href="https://github.com/knipknap/SpiffWorkflow" target="_blank" rel="external">官网</a></li><li>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href="http://docs.openstack.org/developer/taskflow/" target="_blank" rel="external">官网</a></li></ul><h3 id="外来函数接口"><a href="#外来函数接口" class="headerlink" title="外来函数接口"></a>外来函数接口</h3><p>使用外来函数接口的库。</p><ul><li>cffi：用来调用 C 代码的外来函数接口。<a href="https://pypi.python.org/pypi/cffi" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/ctypes/" target="_blank" rel="external">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href="https://docs.python.org/2/library/ctypes.html" target="_blank" rel="external">官网</a></li><li>PyCUDA：Nvidia CUDA API 的封装。<a href="https://mathema.tician.de/software/pycuda/" target="_blank" rel="external">官网</a></li><li>SWIG：简化的封装和接口生成器。<a href="http://www.swig.org/Doc1.3/Python.html" target="_blank" rel="external">官网</a></li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>让 Python 更快的库。</p><ul><li>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href="http://cython.org/" target="_blank" rel="external">官网</a></li><li>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href="https://github.com/Maratyszcza/PeachPy" target="_blank" rel="external">官网</a></li><li>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href="http://pypy.org/" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/pyston-llvm-jit/" target="_blank" rel="external">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href="https://github.com/dropbox/pyston" target="_blank" rel="external">官网</a></li><li>Stackless Python：一个强化版的 Python。<a href="https://bitbucket.org/stackless-dev/stackless/overview" target="_blank" rel="external">官网</a></li></ul><h3 id="微软的-Windows平台"><a href="#微软的-Windows平台" class="headerlink" title="微软的 Windows平台"></a>微软的 Windows平台</h3><p>在 Windows 平台上进行 Python 编程。</p><ul><li>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href="http://python-xy.github.io/" target="_blank" rel="external">官网</a></li><li>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">官网</a></li><li>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="external">官网</a></li><li>PyWin32：针对 Windows 的Python 扩展。<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="external">官网</a></li><li>WinPython：Windows 7/8 系统下便携式开发环境。<a href="https://winpython.github.io/" target="_blank" rel="external">官网</a></li></ul><h3 id="网络可视化和SDN"><a href="#网络可视化和SDN" class="headerlink" title="网络可视化和SDN"></a>网络可视化和SDN</h3><p>用来进行网络可视化和SDN(软件定义网络)的工具和库。</p><ul><li>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href="http://mininet.org/" target="_blank" rel="external">官网</a></li><li>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href="https://github.com/noxrepo/pox" target="_blank" rel="external">官网</a></li><li>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href="http://frenetic-lang.org/pyretic/" target="_blank" rel="external">官网</a></li><li>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href="https://github.com/sdn-ixp/internet2award" target="_blank" rel="external">官网</a></li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>用来对硬件进行编程的库。</p><ul><li>ino：操作<a href="https://www.arduino.cc/" target="_blank" rel="external">Arduino</a>的命令行工具。<a href="http://inotool.org/" target="_blank" rel="external">官网</a> </li><li>Pyro：Python 机器人编程库。<a href="http://pyrorobotics.com/" target="_blank" rel="external">官网</a></li><li>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href="https://github.com/SavinaRoja/PyUserInput" target="_blank" rel="external">官网</a></li><li>scapy：一个非常棒的操作数据包的库。<a href="https://github.com/secdev/scapy" target="_blank" rel="external">官网</a></li><li>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。<a href="https://wifi.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li><li>Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。<a href="http://www.pingo.io/" target="_blank" rel="external">官网</a></li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3迁移的库。</p><ul><li>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href="http://python-future.org/index.html" target="_blank" rel="external">官网</a></li><li>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href="https://github.com/mitsuhiko/python-modernize" target="_blank" rel="external">官网</a></li><li>Six：Python 2 和 3 的兼容性工具。<a href="https://pypi.python.org/pypi/six" target="_blank" rel="external">官网</a></li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p><ul><li>blinker：一个快速的 Python 进程内信号/事件分发系统。<a href="https://github.com/jek/blinker" target="_blank" rel="external">官网</a></li><li>itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。<a href="https://github.com/pallets/itsdangerous" target="_blank" rel="external">官网</a></li><li>pluginbase：一个简单但是非常灵活的 Python 插件系统。<a href="https://github.com/mitsuhiko/pluginbase" target="_blank" rel="external">官网</a></li><li>Pychievements：一个用来创建和追踪成就的 Python 框架。<a href="https://github.com/PacketPerception/pychievements" target="_blank" rel="external">官网</a></li><li><a href="http://hao.jobbole.com/tryton/" target="_blank" rel="external">Tryton</a>：一个通用商务框架。<a href="http://www.tryton.org/" target="_blank" rel="external">官网</a></li></ul><h3 id="算法和设计模式"><a href="#算法和设计模式" class="headerlink" title="算法和设计模式"></a>算法和设计模式</h3><p>Python 实现的算法和设计模式。</p><ul><li><a href="http://hao.jobbole.com/algorithms/" target="_blank" rel="external">algorithms</a>：一个 Python 算法模块。<a href="https://github.com/nryoung/algorithms" target="_blank" rel="external">官网</a> </li><li>python-patterns：Python 设计模式的集合。<a href="https://github.com/faif/python-patterns" target="_blank" rel="external">官网</a></li><li>sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。<a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="external">官网</a></li></ul><h3 id="编辑器插件"><a href="#编辑器插件" class="headerlink" title="编辑器插件"></a>编辑器插件</h3><p>编辑器和 IDE 的插件</p><ul><li>Emacs<ul><li>Elpy：Emacs Python 开发环境。<a href="https://github.com/jorgenschaefer/elpy" target="_blank" rel="external">官网</a></li></ul></li><li>Sublime Text<ul><li>SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<a href="https://github.com/srusskih/SublimeJEDI" target="_blank" rel="external">官网</a></li><li>Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<a href="https://github.com/DamnWidget/anaconda" target="_blank" rel="external">官网</a></li></ul></li><li>Vim<ul><li><a href="http://hao.jobbole.com/youcompleteme/" target="_blank" rel="external">YouCompleteMe</a>：引入基于 <a href="https://github.com/davidhalter/jedi" target="_blank" rel="external">Jedi</a> 的 Python 自动补全引擎。<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">官网</a></li><li>Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<a href="https://github.com/davidhalter/jedi-vim" target="_blank" rel="external">官网</a></li><li>Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。<a href="https://github.com/klen/python-mode" target="_blank" rel="external">官网</a></li></ul></li><li>Visual Studio<ul><li>PTVS：Visual Studio 的 Python 工具<a href="https://github.com/Microsoft/PTVS" target="_blank" rel="external">官网</a></li></ul></li></ul><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><p>流行的 Python 集成开发环境。</p><ul><li>PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">官网</a></li><li>LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<a href="http://www.liclipse.com/" target="_blank" rel="external">官网</a></li><li>Spyder：开源 Python IDE。<a href="https://github.com/spyder-ide/spyder" target="_blank" rel="external">官网</a></li></ul><h3 id="自动聊天工具"><a href="#自动聊天工具" class="headerlink" title="自动聊天工具"></a>自动聊天工具</h3><p>用于开发聊天机器人的库</p><ul><li>Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。<a href="http://errbot.io/en/latest/" target="_blank" rel="external">官网</a></li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>在线工具和简化开发的 API 。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>参见: <a href="https://github.com/ciandcd/awesome-ciandcd#online-build-system" target="_blank" rel="external">awesome-CIandCD</a>.</p><ul><li>Travis CI：一个流行的工具，为你的开源和<a href="https://travis-ci.com/" target="_blank" rel="external">私人</a>项目提供持续集成服务。(仅支持 GitHub)<a href="https://travis-ci.org/" target="_blank" rel="external">官网</a></li><li>CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<a href="https://circleci.com/" target="_blank" rel="external">官网</a></li><li>Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。<a href="https://vexor.io/" target="_blank" rel="external">官网</a></li><li>Wercker：基于 Docker 平台，用来构建和部署微服务。<a href="http://wercker.com/" target="_blank" rel="external">官网</a></li></ul><h3 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h3><ul><li>Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<a href="https://www.codacy.com/" target="_blank" rel="external">官网</a></li><li>QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。<a href="https://www.quantifiedcode.com/" target="_blank" rel="external">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-资源大全中文版&quot;&gt;&lt;a href=&quot;#Python-资源大全中文版&quot; class=&quot;headerlink&quot; title=&quot;Python 资源大全中文版&quot;&gt;&lt;/a&gt;Python 资源大全中文版&lt;/h1&gt;&lt;h3 id=&quot;本项目的参与者&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kafka-flume集群环境搭建【3】</title>
    <link href="//www.zwting.com/2017/09/20/2017-09-21-flume-kafka-1/"/>
    <id>//www.zwting.com/2017/09/20/2017-09-21-flume-kafka-1/</id>
    <published>2017-09-20T09:30:00.000Z</published>
    <updated>2017-09-21T10:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-Flume与Kafka整合-把flume中的数据sink到Kafka"><a href="#1-Flume与Kafka整合-把flume中的数据sink到Kafka" class="headerlink" title="1.  Flume与Kafka整合 把flume中的数据sink到Kafka"></a>1.  Flume与Kafka整合 把flume中的数据sink到Kafka</h3><ol><li>kafka 集群已经完成</li><li>flume 集群已经完成</li><li>flume 的数据存入kafka</li></ol><p>flume client -&gt; flume server -&gt; kafka 这样也是说只要改flume server中sink配置即可</p><h3 id="2-配置flume"><a href="#2-配置flume" class="headerlink" title="2. 配置flume"></a>2. 配置flume</h3><h5 id="flume-client-conf"><a href="#flume-client-conf" class="headerlink" title="flume-client.conf"></a>flume-client.conf</h5><pre><code>[root@yaliceshi-1-2 ~]# cat /usr/local/flume/conf/flume-client.conf #AgentflumeAgent.channels = c1flumeAgent.sources  = s1flumeAgent.sinks    = k1 #flumeAgent Spooling Directory Source#注(1)flumeAgent.sources.s1.type = spooldirflumeAgent.sources.s1.spoolDir  =/data/logs/flumeAgent.sources.s1.fileHeader = trueflumeAgent.sources.s1.deletePolicy =immediateflumeAgent.sources.s1.batchSize =1000flumeAgent.sources.s1.channels =c1flumeAgent.sources.s1.deserializer.maxLineLength =1048576#flumeAgent FileChannel#注(2)flumeAgent.channels.c1.type = fileflumeAgent.channels.c1.checkpointDir = /data/flume/spool/checkpointflumeAgent.channels.c1.dataDirs = /data/flume/spool/dataflumeAgent.channels.c1.capacity = 200000000flumeAgent.channels.c1.keep-alive = 30flumeAgent.channels.c1.write-timeout = 30flumeAgent.channels.c1.checkpoint-timeout=600# flumeAgent Sinks#注(3)flumeAgent.sinks.k1.channel = c1flumeAgent.sinks.k1.type = avro# connect to CollectorMainAgentflumeAgent.sinks.k1.hostname = kafka103flumeAgent.sinks.k1.port = 44444</code></pre><font style="color:red">  sources 采用 spooldir 类型，监控/data/logs/目录中文件的变化 </font><h5 id="flume-server-conf"><a href="#flume-server-conf" class="headerlink" title="flume-server.conf"></a>flume-server.conf</h5><pre><code>[root@yaliceshi-1-3 ~]# cat  /usr/local/flume/conf/flume-server.conf#flumeConsolidationAgentflumeConsolidationAgent.channels = c1flumeConsolidationAgent.sources  = s1flumeConsolidationAgent.sinks    = k1 #flumeConsolidationAgent Avro Source#注(4)flumeConsolidationAgent.sources.s1.type = avroflumeConsolidationAgent.sources.s1.channels = c1flumeConsolidationAgent.sources.s1.bind = kafka103flumeConsolidationAgent.sources.s1.port = 44444#flumeConsolidationAgent FileChannelflumeConsolidationAgent.channels.c1.type = fileflumeConsolidationAgent.channels.c1.checkpointDir = /data/flume/spool/checkpointflumeConsolidationAgent.channels.c1.dataDirs = /data/flume/spool/dataflumeConsolidationAgent.channels.c1.capacity = 200000000flumeConsolidationAgent.channels.c1.keep-alive = 30flumeConsolidationAgent.channels.c1.write-timeout = 30flumeConsolidationAgent.channels.c1.checkpoint-timeout=600##flumeConsolidationAgent Memory Channel#flumeConsolidationAgent.channels.c1.type = memory#flumeConsolidationAgent.channels.c1.capacity = 10000#flumeConsolidationAgent.channels.c1.transactionCapacity = 10000#flumeConsolidationAgent.channels.c1.byteCapacityBufferPercentage = 20#flumeConsolidationAgent.channels.c1.byteCapacity = 800000#flumeConsolidationAgent Sinks#注(5)flumeConsolidationAgent.sinks.k1.channel= c1flumeConsolidationAgent.sinks.k1.type = file_rollflumeConsolidationAgent.sinks.k1.sink.directory = /data/tmpflumeConsolidationAgent.sinks.k1.sink.rollInterval = 3600flumeConsolidationAgent.sinks.k1.batchSize = 10000</code></pre><font style="color:red">  sinks 采用 file_roll 类型，数据保存到 /data/tmp目录中 </font><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><pre><code>#flumeConsolidationAgent Sinks#注(5)#flumeConsolidationAgent.sinks.k1.channel= c1#flumeConsolidationAgent.sinks.k1.type = file_roll#flumeConsolidationAgent.sinks.k1.sink.directory = /data/tmp#flumeConsolidationAgent.sinks.k1.sink.rollInterval = 3600#flumeConsolidationAgent.sinks.k1.batchSize = 10000</code></pre><p>上面的注释掉加上下面的内容</p><pre><code>#set sink to hdfsflumeConsolidationAgent.sinks.k1.type=org.apache.flume.sink.kafka.KafkaSinkflumeConsolidationAgent.sinks.k1.topic = ScalaTopicflumeConsolidationAgent.sinks.k1.brokerList = kafka102:9092, kafka103:9092, kafka104:9092flumeConsolidationAgent.sinks.k1.requiredAcks = 1flumeConsolidationAgent.sinks.k1.batchSize = 20flumeConsolidationAgent.sinks.k1.channel=c1</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动flume server</p><pre><code>[root@yaliceshi-1-3 ~]#/usr/local/flume/bin/flume-ng agent --conf conf --conf-file /usr/local/flume/conf/flume-server.conf --name flumeConsolidationAgent -Dflume.root.logger=INFO,console</code></pre><p>启动flume client</p><pre><code>[root@yaliceshi-1-2 ~]#/usr/local/apache-flume-1.7.0-bin/bin/flume-ng agent --conf conf --conf-file /usr/local/flume/conf/flume-client.conf --name flumeAgent -Dflume.root.logger=INFO,console</code></pre><p>启动 kafka 的消费者</p><pre><code>[root@yaliceshi-1-1 ~]/usr/local/kafka/bin/kafka-console-consumer.sh --zookeeper  172.16.61.102:2181 --topic ScalaTopic --from-beginning</code></pre><p>拷个文件到flume客户端监听目录</p><pre><code>[root@yaliceshi-1-2 ~]# echo &quot;test wqc&quot; &gt; test.log;cp test.log  /data/logs</code></pre><p>拷个文件到flume客户端监听目录</p><pre><code>[root@yaliceshi-1-1 ~]#  /usr/local/kafka/bin/kafka-console-consumer.sh --zookeeper  172.16.61.102:2181 --topic ScalaTopic --from-beginningtest wqc</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>&gt;</p><ul><li><a href="http://blog.csdn.net/strongyoung88/article/details/52937835" target="_blank" rel="external">http://blog.csdn.net/strongyoung88/article/details/52937835</a></li><li><a href="http://blog.csdn.net/minicto/article/details/53643496" target="_blank" rel="external">http://blog.csdn.net/minicto/article/details/53643496</a></li><li><a href="http://blog.csdn.net/shouhuzhezhishen/article/details/64904848" target="_blank" rel="external">http://blog.csdn.net/shouhuzhezhishen/article/details/64904848</a></li><li><a href="http://blog.csdn.net/candysleep/article/details/53241268" target="_blank" rel="external">http://blog.csdn.net/candysleep/article/details/53241268</a></li></ul>]]></content>
    
    <summary type="html">
    
      使用kafka处理大量的日志
    
    </summary>
    
      <category term="集群搭建" scheme="//www.zwting.com/categories/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="集群搭建" scheme="//www.zwting.com/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>kafka-flume集群环境搭建【2】</title>
    <link href="//www.zwting.com/2017/09/20/2017-09-18-cluster-flume-1/"/>
    <id>//www.zwting.com/2017/09/20/2017-09-18-cluster-flume-1/</id>
    <published>2017-09-20T09:30:00.000Z</published>
    <updated>2017-09-21T13:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><h4 id="1-1-操作系统"><a href="#1-1-操作系统" class="headerlink" title="1.1 操作系统"></a>1.1 操作系统</h4><pre><code>172.16.61.102,centos6.9172.16.61.103,centos6.9172.16.61.104,centos6.9</code></pre><h3 id="三个机器的角色"><a href="#三个机器的角色" class="headerlink" title="三个机器的角色"></a>三个机器的角色</h3><pre><code>172.16.61.102  agent 172.16.61.103  collector172.16.61.104  collector</code></pre><h3 id="1-3-安装Java-（3主机均需要）"><a href="#1-3-安装Java-（3主机均需要）" class="headerlink" title="1.3 安装Java （3主机均需要）"></a>1.3 安装Java （3主机均需要）</h3><pre><code>yum install java-1.8.0-openjdk -y</code></pre><h3 id="1-4-下载安装flume-（3主机均需要）"><a href="#1-4-下载安装flume-（3主机均需要）" class="headerlink" title="1.4 下载安装flume （3主机均需要）"></a>1.4 下载安装flume （3主机均需要）</h3><pre><code>wget http://mirrors.hust.edu.cn/apache/flume/1.7.0/apache-flume-1.7.0-bin.tar.gztar -xf apache-flume-1.7.0-bin.tar.gz -C /usr/local/ln -sv /usr/local/apache-flume-1.7.0-bin /usr/local/flumell  /usr/local/flume</code></pre><p>、</p><h3 id="1-5-Flume-组件介绍"><a href="#1-5-Flume-组件介绍" class="headerlink" title="1.5 Flume 组件介绍"></a>1.5 Flume 组件介绍</h3><pre><code>flume 代理，是一个进程承载从外部源事件流到下一个目的地的过程。包含source channel 和 sink。</code></pre><h5 id="1-5-1-Source"><a href="#1-5-1-Source" class="headerlink" title="1.5.1.Source"></a>1.5.1.Source</h5><pre><code>数据源，消耗外部传递给他的事件，外部源将数据按照flume Source 能识别的格式将Flume 事件发送给flume Source。</code></pre><table><thead><tr><th>Source类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>Avro Source</td><td style="text-align:center">支持Avro协议（实际上是Avro RPC），内置支持</td></tr><tr><td>Thrift Source</td><td style="text-align:center">支持Thrift协议，内置支持</td></tr><tr><td>Exec Source</td><td style="text-align:center">基于Unix的command在标准输出上生产数据</td></tr><tr><td>JMS Source</td><td style="text-align:center">从JMS系统（消息、主题）中读取数据，ActiveMQ已经测试过</td></tr><tr><td>Spooling Directory Source</td><td style="text-align:center">监控指定目录内数据变更</td></tr><tr><td>Netcat Source</td><td style="text-align:center">监控某个端口，将流经端口的每一个文本行数据作为Event输入</td></tr><tr><td>Sequence Generator Source</td><td style="text-align:center">序列生成器数据源，生产序列数据</td></tr><tr><td>Syslog Sources</td><td style="text-align:center">读取syslog数据，产生Event，支持UDP和TCP两种协议</td></tr><tr><td>HTTP Source</td><td style="text-align:center">基于HTTP POST或GET方式的数据源，支持JSON、BLOB表示形式</td></tr><tr><td>Legacy Sources</td><td style="text-align:center">兼容老的Flume OG中Source（0.9.x版本）</td></tr><tr><td>Avro Legacy Source</td></tr><tr><td>Thrift Legacy Source</td></tr><tr><td>Scribe Source</td></tr><tr><td>Kafka Source</td><td style="text-align:center">是一个从Kafka主题读取消息的Apache Kafka消费者</td></tr><tr><td>Custom Source</td><td style="text-align:center">自定义Source</td></tr></tbody></table><h5 id="1-5-2-Channel"><a href="#1-5-2-Channel" class="headerlink" title="1.5.2.Channel"></a>1.5.2.Channel</h5><pre><code>数据通道，是一个被动的存储，用来保持事件，直到由一个flume Sink消耗。</code></pre><table><thead><tr><th>Channel类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>Memory Channel</td><td style="text-align:center">Event数据存储在内存中</td></tr><tr><td>JDBC Channel</td><td style="text-align:center">Event数据存储在持久化存储中，当前Flume Channel内置支持Derby</td></tr><tr><td>File Channel</td><td style="text-align:center">Event数据存储在磁盘文件中</td></tr><tr><td>Spillable Memory</td><td style="text-align:center">Channel    Event数据存储在内存中和磁盘上，当内存队列满了，会持久化到磁盘文件（当前试验性的，不建议生产环境使用）</td></tr><tr><td>Pseudo Transaction Channel</td><td style="text-align:center">测试用途</td></tr><tr><td>Custom Channel</td><td style="text-align:center">自定义Channel实现</td></tr></tbody></table><h5 id="1-5-3-Sink"><a href="#1-5-3-Sink" class="headerlink" title="1.5.3 Sink"></a>1.5.3 Sink</h5><pre><code>数据汇聚点，代表外部数据存放位置。发送flume event到指定的外部目标。</code></pre><table><thead><tr><th>Sink类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>HDFS Sink</td><td style="text-align:center">数据写入HDFS</td></tr><tr><td>Logger Sink</td><td style="text-align:center">数据写入日志文件</td></tr><tr><td>Avro Sink</td><td style="text-align:center">数据被转换成Avro Event，然后发送到配置的RPC端口上</td></tr><tr><td>Thrift Sink</td><td style="text-align:center">数据被转换成Thrift Event，然后发送到配置的RPC端口上</td></tr><tr><td>IRC Sink</td><td style="text-align:center">数据在IRC上进行回放</td></tr><tr><td>File Roll Sink</td><td style="text-align:center">存储数据到本地文件系统</td></tr><tr><td>Null Sink</td><td style="text-align:center">丢弃到所有数据</td></tr><tr><td>HBase Sink</td><td style="text-align:center">数据写入HBase数据库</td></tr><tr><td>Morphline Solr Sink</td><td style="text-align:center">数据发送到Solr搜索服务器（集群）</td></tr><tr><td>ElasticSearch Sink</td><td style="text-align:center">数据发送到Elastic Search搜索服务器（集群）</td></tr><tr><td>Kite Dataset Sink</td><td style="text-align:center">写数据到Kite Dataset，试验性质的</td></tr><tr><td>Custom Sink</td><td style="text-align:center">自定义Sink实现</td></tr></tbody></table><h3 id="2-配置flume"><a href="#2-配置flume" class="headerlink" title="2. 配置flume"></a>2. 配置flume</h3><h5 id="flume-client-conf"><a href="#flume-client-conf" class="headerlink" title="flume-client.conf"></a>flume-client.conf</h5><pre><code>[root@yaliceshi-1-2 ~]# cat /usr/local/flume/conf/flume-client.conf #AgentflumeAgent.channels = c1flumeAgent.sources  = s1flumeAgent.sinks    = k1 #flumeAgent Spooling Directory Source#注(1)flumeAgent.sources.s1.type = spooldirflumeAgent.sources.s1.spoolDir  =/data/logs/flumeAgent.sources.s1.fileHeader = trueflumeAgent.sources.s1.deletePolicy =immediateflumeAgent.sources.s1.batchSize =1000flumeAgent.sources.s1.channels =c1flumeAgent.sources.s1.deserializer.maxLineLength =1048576#flumeAgent FileChannel#注(2)flumeAgent.channels.c1.type = fileflumeAgent.channels.c1.checkpointDir = /data/flume/spool/checkpointflumeAgent.channels.c1.dataDirs = /data/flume/spool/dataflumeAgent.channels.c1.capacity = 200000000flumeAgent.channels.c1.keep-alive = 30flumeAgent.channels.c1.write-timeout = 30flumeAgent.channels.c1.checkpoint-timeout=600# flumeAgent Sinks#注(3)flumeAgent.sinks.k1.channel = c1flumeAgent.sinks.k1.type = avro# connect to CollectorMainAgentflumeAgent.sinks.k1.hostname = kafka103flumeAgent.sinks.k1.port = 44444</code></pre><font style="color:red">  sources 采用 spooldir 类型，监控/data/logs/目录中文件的变化 </font><h5 id="flume-server-conf"><a href="#flume-server-conf" class="headerlink" title="flume-server.conf"></a>flume-server.conf</h5><pre><code>[root@yaliceshi-1-3 ~]# cat  /usr/local/flume/conf/flume-server.conf#flumeConsolidationAgentflumeConsolidationAgent.channels = c1flumeConsolidationAgent.sources  = s1flumeConsolidationAgent.sinks    = k1 #flumeConsolidationAgent Avro Source#注(4)flumeConsolidationAgent.sources.s1.type = avroflumeConsolidationAgent.sources.s1.channels = c1flumeConsolidationAgent.sources.s1.bind = kafka103flumeConsolidationAgent.sources.s1.port = 44444#flumeConsolidationAgent FileChannelflumeConsolidationAgent.channels.c1.type = fileflumeConsolidationAgent.channels.c1.checkpointDir = /data/flume/spool/checkpointflumeConsolidationAgent.channels.c1.dataDirs = /data/flume/spool/dataflumeConsolidationAgent.channels.c1.capacity = 200000000flumeConsolidationAgent.channels.c1.keep-alive = 30flumeConsolidationAgent.channels.c1.write-timeout = 30flumeConsolidationAgent.channels.c1.checkpoint-timeout=600##flumeConsolidationAgent Memory Channel#flumeConsolidationAgent.channels.c1.type = memory#flumeConsolidationAgent.channels.c1.capacity = 10000#flumeConsolidationAgent.channels.c1.transactionCapacity = 10000#flumeConsolidationAgent.channels.c1.byteCapacityBufferPercentage = 20#flumeConsolidationAgent.channels.c1.byteCapacity = 800000#flumeConsolidationAgent Sinks#注(5)flumeConsolidationAgent.sinks.k1.channel= c1flumeConsolidationAgent.sinks.k1.type = file_rollflumeConsolidationAgent.sinks.k1.sink.directory = /data/tmpflumeConsolidationAgent.sinks.k1.sink.rollInterval = 3600flumeConsolidationAgent.sinks.k1.batchSize = 10000</code></pre><font style="color:red">  sinks 采用 file_roll 类型，数据保存到 /data/tmp目录中 </font><h3 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h3><h5 id="3-1-启动服务端"><a href="#3-1-启动服务端" class="headerlink" title="3.1 启动服务端"></a>3.1 启动服务端</h5><pre><code>[kafka103 ]# /usr/local/flume/bin/flume-ng agent --conf conf --conf-file /usr/local/flume/conf/flume-server.conf --name flumeConsolidationAgent -Dflume.root.logger=INFO,console</code></pre><h5 id="3-2-启动客户端"><a href="#3-2-启动客户端" class="headerlink" title="3.2 启动客户端"></a>3.2 启动客户端</h5><pre><code>[kafka102 ]# /usr/local/apache-flume-1.7.0-bin/bin/flume-ng agent --conf conf --conf-file /usr/local/flume/conf/flume-client.conf --name flumeAgent -Dflume.root.logger=INFO,console</code></pre><h5 id="3-3-注意"><a href="#3-3-注意" class="headerlink" title="3.3 注意"></a>3.3 注意</h5><ul><li><font style="color:red"> –name 需要跟配置中的名称保持一致</font></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在客户端拷贝一件文件到/data/logs<br>在服务端查看/data/tmp下会有新文件生成</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>&gt;</p><ul><li><a href="http://blog.csdn.net/strongyoung88/article/details/52937835" target="_blank" rel="external">http://blog.csdn.net/strongyoung88/article/details/52937835</a></li><li><a href="http://blog.csdn.net/minicto/article/details/53643496" target="_blank" rel="external">http://blog.csdn.net/minicto/article/details/53643496</a></li><li><a href="http://blog.csdn.net/shouhuzhezhishen/article/details/64904848" target="_blank" rel="external">http://blog.csdn.net/shouhuzhezhishen/article/details/64904848</a></li><li><a href="http://blog.csdn.net/candysleep/article/details/53241268" target="_blank" rel="external">http://blog.csdn.net/candysleep/article/details/53241268</a></li><li><a href="https://my.oschina.net/u/1780960/blog/793783" target="_blank" rel="external">https://my.oschina.net/u/1780960/blog/793783</a></li><li><a href="https://github.com/Leaderman/flume-extension" target="_blank" rel="external">https://github.com/Leaderman/flume-extension</a></li></ul>]]></content>
    
    <summary type="html">
    
      使用kafka处理大量的日志
    
    </summary>
    
      <category term="集群搭建" scheme="//www.zwting.com/categories/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="集群搭建" scheme="//www.zwting.com/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[10]－ 日志－记文件log</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-14-training-python-10/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-14-training-python-10/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-日志操作："><a href="#1-日志操作：" class="headerlink" title="1.日志操作："></a>1.日志操作：</h4><p>&gt;<br>    日志文件操作在工作中最常用的操作类库之一，今天贴出来我常用的文件操作类，一直在用，也一直在不断优化，暂时可以满足业务</p><h4 id="2-日志操作代码："><a href="#2-日志操作代码：" class="headerlink" title="2.日志操作代码："></a>2.日志操作代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">mail:wuqichao@gyyx.com</span></div><div class="line"><span class="string">createtime:2011-3-1下午12:24:29</span></div><div class="line"><span class="string">usege:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, os, re</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.handlers</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">'''日志工厂'''</span></div><div class="line">    </div><div class="line">    ilog = <span class="keyword">None</span> <span class="comment">#信息日志</span></div><div class="line">    elog = <span class="keyword">None</span> <span class="comment">#错误日志</span></div><div class="line">    root = os.path.abspath(<span class="string">'.'</span>)</div><div class="line">    ilogfile = root+<span class="string">'/logs/mtask_info_%s.log'</span> <span class="comment">#信息日志文件</span></div><div class="line">    elogfile = root+<span class="string">'/logs/mtask_err_%s.log'</span> <span class="comment">#错误日志文件</span></div><div class="line">    ERROR = <span class="string">'err'</span></div><div class="line">    INFO = <span class="string">'info'</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_log</span><span class="params">(logtype, p = <span class="string">""</span>)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        初始化日志对像</span></div><div class="line"><span class="string">        @param logtype:info 和 err分别是信息日志和错误日志</span></div><div class="line"><span class="string">        @param p :日志文件名后缀</span></div><div class="line"><span class="string">        '''</span></div><div class="line"></div><div class="line">        logfile = LogFactory.ilogfile % p</div><div class="line">        <span class="keyword">if</span> logtype == LogFactory.ERROR: logfile = LogFactory.elogfile % p</div><div class="line">        logger = logging.getLogger(logtype)</div><div class="line">        logger.setLevel(logging.INFO)</div><div class="line">        handler = logging.handlers.RotatingFileHandler(logfile, maxBytes=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>, backupCount=<span class="number">5</span>)</div><div class="line"></div><div class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)-8s %(filename)s %(lineno)d %(message)s'</span>)</div><div class="line"></div><div class="line">        handler.setFormatter(formatter)</div><div class="line">        logger.addHandler(handler)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> logger</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_err_logger</span><span class="params">(p=<span class="string">""</span>)</span>:</span></div><div class="line">        <span class="string">'''初使化错误日志'''</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> LogFactory.elog :</div><div class="line">            LogFactory.elog = LogFactory.init_log(LogFactory.ERROR, p)</div><div class="line">        <span class="keyword">return</span> LogFactory.elog</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info_logger</span><span class="params">(p=<span class="string">""</span>)</span>:</span></div><div class="line">        <span class="string">'''初使化错误日志'''</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> LogFactory.ilog :</div><div class="line">            LogFactory.ilog = LogFactory.init_log(LogFactory.INFO, p)</div><div class="line">        <span class="keyword">return</span> LogFactory.ilog</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w_info</span><span class="params">(msg,p=<span class="string">''</span>)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    写信息日志</span></div><div class="line"><span class="string">    @param msg:信息</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    ilogger = LogFactory.get_info_logger(p=p)</div><div class="line">    ilogger.info(msg)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w_err</span><span class="params">(msg,p=<span class="string">''</span>)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    写错误日志</span></div><div class="line"><span class="string">    @param msg : 错误信息</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    elogger = LogFactory.get_err_logger(p=p)</div><div class="line">    elogger.error(msg)</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[10]－ 日志－记文件log
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[9]－ 数据库操作之MongoDB</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-12-training-python-9/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-12-training-python-9/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库操作："><a href="#1-数据库操作：" class="headerlink" title="1.数据库操作："></a>1.数据库操作：</h4><p>&gt;<br>    数据操作在工作中最常用的操作类库之一，今天贴出来我常用的pymongo操作类，一直在用，也一直在不断优化，暂时可以满足业务</p><h4 id="2-接口代码："><a href="#2-接口代码：" class="headerlink" title="2.接口代码："></a>2.接口代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta  </div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractproperty</div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom_Interface</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    __metaclass__ = ABCMeta</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        关闭当前数据库句柄</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回一个list，多个结果。</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,table,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,table,where,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,table,where)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure><h4 id="2-类实现代码："><a href="#2-类实现代码：" class="headerlink" title="2.类实现代码："></a>2.类实现代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#/usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">auth:.启</span></div><div class="line"><span class="string">createtime:2014-6-17下午12:13:07</span></div><div class="line"><span class="string">usege:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">print</span> &gt;&gt; sys.stderr,<span class="string">"""\</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">There was a problem importing Python modules(pymongo) required.</span></div><div class="line"><span class="string">The error leading to this problem was:</span></div><div class="line"><span class="string">%s Please install a package which provides this module, or</span></div><div class="line"><span class="string">verify that the module is installed correctly.</span></div><div class="line"><span class="string">you can use this cmd :pip install pymongo</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">It's possible that the above module doesn't match the current version of Python,</span></div><div class="line"><span class="string">which is:</span></div><div class="line"><span class="string">%s</span></div><div class="line"><span class="string">"""</span> % (sys.exc_info(), sys.version)</div><div class="line"></div><div class="line"><span class="keyword">from</span> interface <span class="keyword">import</span> Custom_Interface</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom_Mongo</span><span class="params">(Custom_Interface)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,using=<span class="string">''</span>)</span>:</span></div><div class="line"></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @param cursor_hander:数据库句柄</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.cursor = <span class="keyword">None</span></div><div class="line">        self.cursor_hander = using</div><div class="line">        self.connections = <span class="keyword">None</span></div><div class="line">        self.conn  = <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> str(self.cursor_hander).rstrip() == <span class="string">''</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'please write Custom_MySQL`s using param'</span></div><div class="line">            exit(<span class="number">0</span>)</div><div class="line">   </div><div class="line">            </div><div class="line"></div><div class="line">        databases =&#123;</div><div class="line">            <span class="string">'logs'</span>:&#123;<span class="string">'host'</span>:<span class="string">'127.0.0.1'</span>, <span class="string">'user'</span>:<span class="string">'readonly'</span>,<span class="string">'password'</span>:<span class="string">'readonly'</span>, <span class="string">'database'</span>:<span class="string">'local'</span>,<span class="string">'charset'</span>:<span class="string">'utf8'</span>,<span class="string">'port'</span>:<span class="number">27017</span>,<span class="string">'connect_timeout'</span>:<span class="number">50</span>&#125;,</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">        </div><div class="line">        database = databases[self.cursor_hander]</div><div class="line">        </div><div class="line">        <span class="comment">#建立和数据库系统的连接,创建Connection时，指定host及port参数</span></div><div class="line">        self.conn   = pymongo.Connection(host=database[<span class="string">'host'</span>],port=database[<span class="string">'port'</span>])</div><div class="line">        self.database = self.conn[database[<span class="string">'database'</span>]]</div><div class="line">        <span class="comment">#admin 数据库有帐号，连接-认证-切换库</span></div><div class="line">        <span class="comment">#db_auth = conn.admin</span></div><div class="line">        <span class="comment">#db_auth.authenticate('sa','sa')</span></div><div class="line"></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        self.close()</div><div class="line">        </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        关闭当前数据库句柄</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> self.conn != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self.conn.disconnect()</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, table_name, parameters,skip=None,limit=None)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回一个list，多个结果。</span></div><div class="line"><span class="string">        @param table_name:表名</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        result = self.database[table_name].find(parameters)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> skip !=<span class="keyword">None</span>:</div><div class="line">            result.skip(skip)</div><div class="line">        <span class="keyword">if</span> limit !=<span class="keyword">None</span>:</div><div class="line">                </div><div class="line">            result.limit(limit) </div><div class="line">            </div><div class="line">        <span class="keyword">return</span> result</div><div class="line">       </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, table_name,**parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param table_name:表名</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span> self.database[table_name].find_one(parameters)</div><div class="line">       </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,table_name, **parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param table_name:表名</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span> self.database[table_name].find(parameters).count()</div><div class="line">       </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,table,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> self.database[table].insert(datas)</div><div class="line">       </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,table,where,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> self.database[table].update(where,datas)</div><div class="line">        </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,table,where)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> self.database[table].remove(where)</div></pre></td></tr></table></figure><h4 id="3-用例代码："><a href="#3-用例代码：" class="headerlink" title="3.用例代码："></a>3.用例代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">date:2014-06-17 12:00</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">from</span> custom.db.mongo <span class="keyword">import</span> Custom_Mongo</div><div class="line"></div><div class="line">n = Custom_Mongo(using=<span class="string">'logs'</span>)</div><div class="line"></div><div class="line">param = &#123;<span class="string">'sex'</span>:<span class="string">'man'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;</div><div class="line"><span class="keyword">print</span> n.insert(<span class="string">'users'</span>,**param)</div><div class="line"></div><div class="line">param = &#123;<span class="string">'sex'</span>:<span class="string">'man'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;</div><div class="line"><span class="keyword">print</span> n.get(<span class="string">'users'</span>,**param)</div><div class="line"></div><div class="line">param = &#123;<span class="string">'sex'</span>:<span class="string">'man'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;</div><div class="line"><span class="keyword">print</span> n.count(<span class="string">'users'</span>, **param)</div><div class="line"></div><div class="line">n.update(<span class="string">'users'</span>,&#123;<span class="string">'sex'</span>:<span class="string">'man'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;,**&#123;<span class="string">'sex'</span>:<span class="string">'wman'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;)</div><div class="line"></div><div class="line">param = &#123;<span class="string">'sex'</span>:<span class="string">'man'</span>,<span class="string">'name'</span>:<span class="string">'wuqichao'</span>&#125;</div><div class="line">res =  n.query(<span class="string">'users'</span>,param,skip=<span class="number">2</span>,limit=<span class="number">2</span>)</div><div class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</div><div class="line">    <span class="keyword">print</span> r</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[9]－ 数据库操作之MongoDB
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[1]－python初步感观</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-10-training-python-1/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-10-training-python-1/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>###1、环境简介</p><ul><li>os系统：centos6.5</li><li>python:2.7.7 或者 2.7.8</li><li>扩展要求:<pre><code>setuptools ,pip     ,MySQL-python    </code></pre></li><li>如果你的python版本过低，可以用下面的脚本升级为2.7.7</li><li><p>脚本下载：<a href="http://pan.baidu.com/s/1jGDvFzo" target="_blank" rel="external">http://pan.baidu.com/s/1jGDvFzo</a>      </p></li><li><p>###1.1 python使用方式</p><ul><li>进入python shell环境</li><li>执行脚本模式 python demo.py</li></ul></li></ul><p>###2、初步感观<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#!/usr/bin/python2.7</span></div><div class="line"></div><div class="line"><span class="comment">###################################################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      python 第一个显示程序，用于初步感观</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">###################################################</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></div><div class="line">  <span class="string">'''</span></div><div class="line"><span class="string">  a generator that produces the fibonacci series's elements</span></div><div class="line"><span class="string">  '''</span></div><div class="line"> </div><div class="line">  a = <span class="number">1</span></div><div class="line">  b = <span class="number">1</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    a, b = a + b, a</div><div class="line">    <span class="keyword">yield</span> a</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth</span><span class="params">(series, n)</span>:</span></div><div class="line">  <span class="string">'''</span></div><div class="line"><span class="string">  returns the nth element of a series,</span></div><div class="line"><span class="string">  consuming the series' earlier elements.</span></div><div class="line"><span class="string">  '''</span></div><div class="line"> </div><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> series:</div><div class="line">    n -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> x</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">print(<span class="string">'Executed from the command line'</span>)</div><div class="line"><span class="keyword">print</span> nth(fib(), <span class="number">10</span>)</div></pre></td></tr></table></figure></p><ul><li>执行 </li><li>python demo.py </li><li>输出</li><li>Executed from the command line</li><li>144</li></ul><p>###3、Python格言</p><ul><li>输入python 进入python shell环境</li><li>import this </li><li><p>显示python之禅</p></li><li><h5 id="3-1-Python之禅"><a href="#3-1-Python之禅" class="headerlink" title="3.1 Python之禅"></a>3.1 Python之禅</h5><ul><li>Beautiful is better than ugly.  </li><li>漂亮的代码要比丑陋的代码要好得多。  </li><li>Explicit is better than implicit.  </li><li>明确的定义比 隐式定义更好。  </li><li>Simple is better than complex.  </li><li>简单比负责要好。  </li><li>Complex is better than complicated.  </li><li>负责要比搞复杂要好。  </li><li>Flat is better than nested.  </li><li>扁平结构要比嵌套结构好。  </li><li>Sparse is better than dense.  </li><li>简洁明了的代码要比稠密的代码要好。  </li><li>Readability counts.  </li><li>可读写的计数。  </li><li>Special cases aren’t special enough to break the rules.  </li><li>专门的用例不是特殊到足以违反规则。  </li><li>Although practicality beats purity.  </li><li>是的，实用性练就纯度。  </li><li>Errors should never pass silently.  </li><li>错误永远都不会沉默。  </li><li>Unless explicitly silenced.  </li><li>除非明确啥也不干。  </li><li>In the face of ambiguity, refuse the temptation to guess.  </li><li>面对模糊定义、拒绝视图拍脑袋猜。  </li><li>There should be one– and preferably only one –obvious way to do it.  </li><li>Although that way may not be obvious at first unless you’re Dutch.  </li><li>虽然一开始不那面明确,我们会选择更清晰一条到走。  </li><li>Now is better than never.  </li><li>现在开始总比不开始的要好。  </li><li>Although never is often better than <em>right</em> now.  </li><li>虽然从不尝试总比现在开始尝试好。  </li><li>If the implementation is hard to explain, it’s a bad idea.  </li><li>如果实现难以说明，那它是个坏主意。  </li><li>If the implementation is easy to explain, it may be a good idea.  </li><li>如果实现容易说明，那它是个好主意。  </li><li>Namespaces are one honking great idea – let’s do more of those!  </li><li>名称空间是一个好东西——让我们做更多那样的东西!  </li></ul></li><li><h5 id="3-2-Python“八荣八耻”"><a href="#3-2-Python“八荣八耻”" class="headerlink" title="3.2 Python“八荣八耻”"></a>3.2 Python“八荣八耻”</h5><ul><li>以动手实践为荣 , 以只看不练为耻;</li><li>以打印日志为荣 , 以单步跟踪为耻;</li><li>以空格缩进为荣 , 以制表缩进为耻;</li><li>以单元测试为荣 , 以人工测试为耻;</li><li>以模块复用为荣 , 以复制粘贴为耻;</li><li>以多态应用为荣 , 以分支判断为耻;</li><li>以Pythonic为荣 , 以冗余拖沓为耻;</li><li>以总结分享为荣 , 以跪求其解为耻;</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[1]－python初步感观
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[11]－ 日志－日志记录到mongodb中</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-15-training-python-11/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-15-training-python-11/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-日志操作："><a href="#1-日志操作：" class="headerlink" title="1.日志操作："></a>1.日志操作：</h4><p>&gt;<br>    日志文件操作在工作中最常用的操作类库之一，今天贴出来我常用的文件操作类，一直在用，也一直在不断优化，暂时可以满足业务</p><h4 id="2-日志操作代码："><a href="#2-日志操作代码：" class="headerlink" title="2.日志操作代码："></a>2.日志操作代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> getpass</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> gethostname</div><div class="line"><span class="keyword">from</span> pymongo.connection <span class="keyword">import</span> Connection</div><div class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> InvalidDocument</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoFormatter</span><span class="params">(logging.Formatter)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format</span><span class="params">(self, record)</span>:</span></div><div class="line">        <span class="string">"""Format exception object as a string"""</span></div><div class="line">        data = record.__dict__.copy()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> record.args:</div><div class="line">            record.msg = record.msg % record.args</div><div class="line"></div><div class="line">        data.update(</div><div class="line">            username=getpass.getuser(),</div><div class="line">            time=datetime.now(),</div><div class="line">            host=gethostname(),</div><div class="line">            message=record.msg,</div><div class="line">            args=tuple(unicode(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> record.args)</div><div class="line">        )</div><div class="line">        <span class="keyword">if</span> <span class="string">'exc_info'</span> <span class="keyword">in</span> data <span class="keyword">and</span> data[<span class="string">'exc_info'</span>]:</div><div class="line">            data[<span class="string">'exc_info'</span>] = self.formatException(data[<span class="string">'exc_info'</span>])</div><div class="line">        <span class="keyword">return</span> data</div><div class="line">    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoHandler</span><span class="params">(logging.Handler)</span>:</span></div><div class="line">    <span class="string">""" Custom log handler</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Logs all messages to a mongo collection. This  handler is </span></div><div class="line"><span class="string">    designed to be used with the standard python logging mechanism.</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to</span><span class="params">(cls, db, collection, host=<span class="string">'localhost'</span>, port=None, level=logging.NOTSET)</span>:</span></div><div class="line">        <span class="string">""" Create a handler for a given  """</span></div><div class="line">        <span class="keyword">return</span> cls(Connection(host, port)[db][collection], level)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, collection, db=<span class="string">'mongolog'</span>, host=<span class="string">'localhost'</span>, port=None, level=logging.NOTSET)</span>:</span></div><div class="line">        <span class="string">""" Init log handler and store the collection handle """</span></div><div class="line">        logging.Handler.__init__(self, level)</div><div class="line">        <span class="keyword">if</span> (type(collection) == str):</div><div class="line">            self.collection = Connection(host, port)[db][collection]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.collection = collection</div><div class="line">        self.formatter = MongoFormatter()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(self,record)</span>:</span></div><div class="line">        <span class="string">""" Store the record to the collection. Async insert """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.collection.save(self.format(record))</div><div class="line">        <span class="keyword">except</span> InvalidDocument, e:</div><div class="line">            logging.error(<span class="string">"Unable to save log record: %s"</span>, e.message ,exc_info=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[11]－ 日志－日志记录到mongodb中
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[13]－ Flask实现restful接口</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-20-training-python-13/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-20-training-python-13/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装扩展"><a href="#1-安装扩展" class="headerlink" title="1.安装扩展"></a>1.安装扩展</h4><ul><li>pip install flask</li><li>pip install flask-restful</li><li>pip install sqlalchemy</li><li>网方文档地址：<br><a href="http://flask-restful.readthedocs.org/en/0.3.3/" target="_blank" rel="external">http://flask-restful.readthedocs.org/en/0.3.3/</a></li></ul><h4 id="2-models代码："><a href="#2-models代码：" class="headerlink" title="2.models代码："></a>2.models代码：</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/python</span></div><div class="line"><span class="meta">#coding=utf-8</span></div><div class="line"></div><div class="line">‘’‘</div><div class="line">功能：定义数据表结构，生成需要生成数据表时，直接python models.py</div><div class="line">’‘’</div><div class="line"><span class="title">from</span> sqlalchemy <span class="keyword">import</span> Column</div><div class="line"><span class="title">from</span> sqlalchemy <span class="keyword">import</span> Integer</div><div class="line"><span class="title">from</span> sqlalchemy <span class="keyword">import</span> String</div><div class="line"><span class="title">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"></div><div class="line"><span class="type">Base</span> = declarative_base()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Todo</span>(<span class="type">Base</span>):</span></div><div class="line"><span class="class">    __tablename__ = 'todos'</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">    id = <span class="type">Column</span>(<span class="type">Integer</span>, <span class="title">primary_key</span>=<span class="type">True</span>)</span></div><div class="line"><span class="class">    task = <span class="type">Column</span>(<span class="type">String(255)</span>)</span></div><div class="line"><span class="class">‘’‘</span></div><div class="line"><span class="class">if __name__ == "__main__":</span></div><div class="line"><span class="class">    from sqlalchemy import create_engine</span></div><div class="line"><span class="class">    from settings import <span class="type">DB_URI</span></span></div><div class="line"><span class="class">    engine = create_engine(<span class="type">DB_URI</span>)</span></div><div class="line"><span class="class">    <span class="type">Base</span>.metadata.drop_all(<span class="title">engine</span>)</span></div><div class="line"><span class="class">    <span class="type">Base</span>.metadata.create_all(<span class="title">engine</span>)</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">’‘’</span></div></pre></td></tr></table></figure><h4 id="3-db代码："><a href="#3-db代码：" class="headerlink" title="3.db代码："></a>3.db代码：</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf<span class="number">-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line">#<span class="keyword">from</span> settings <span class="keyword">import</span> DB_URI</div><div class="line"></div><div class="line">DB_URI = <span class="string">'mysql://root:@localhost:3306/test?charset=utf8'</span></div><div class="line"></div><div class="line">Session = sessionmaker(autocommit=<span class="literal">False</span>,</div><div class="line">                       autoflush=<span class="literal">False</span>,</div><div class="line">                       bind=create_engine(DB_URI))</div><div class="line">session = scoped_session(Session)</div></pre></td></tr></table></figure><h4 id="4-resources代码："><a href="#4-resources代码：" class="headerlink" title="4.resources代码："></a>4.resources代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">功能：引入上面的models文件，将数据表数据进行对象化，定义restful资源，返回前数据利用marshal_with装饰器做序列化</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Todo</div><div class="line"><span class="keyword">from</span> db <span class="keyword">import</span> session</div><div class="line"></div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> reqparse</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> abort</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> Resource</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> fields</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> marshal_with</div><div class="line"></div><div class="line">todo_fields = &#123;</div><div class="line">    <span class="string">'id'</span>: fields.Integer,</div><div class="line">    <span class="string">'task'</span>: fields.String,</div><div class="line">    <span class="string">'uri'</span>: fields.Url(<span class="string">'todo'</span>, absolute=<span class="keyword">True</span>),</div><div class="line">&#125;</div><div class="line"></div><div class="line">parser = reqparse.RequestParser()</div><div class="line">parser.add_argument(<span class="string">'task'</span>, type=str)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoResource</span><span class="params">(Resource)</span>:</span></div><div class="line"><span class="meta">    @marshal_with(todo_fields)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></div><div class="line">        todo = session.query(Todo).filter(Todo.id == id).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> todo:</div><div class="line">            abort(<span class="number">404</span>, message=<span class="string">"Todo &#123;&#125; doesn't exist"</span>.format(id))</div><div class="line">        <span class="keyword">return</span> todo</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span></div><div class="line">        todo = session.query(Todo).filter(Todo.id == id).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> todo:</div><div class="line">            abort(<span class="number">404</span>, message=<span class="string">"Todo &#123;&#125; doesn't exist"</span>.format(id))</div><div class="line">        session.delete(todo)</div><div class="line">        session.commit()</div><div class="line">        <span class="keyword">return</span> &#123;&#125;, <span class="number">204</span></div><div class="line"></div><div class="line"><span class="meta">    @marshal_with(todo_fields)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span></div><div class="line">        parsed_args = parser.parse_args()</div><div class="line">        <span class="keyword">print</span> parsed_args</div><div class="line">        todo = session.query(Todo).filter(Todo.id == id).first()</div><div class="line">        todo.task = parsed_args[<span class="string">'task'</span>]</div><div class="line">        session.add(todo)</div><div class="line">        session.commit()</div><div class="line">        <span class="keyword">return</span> todo, <span class="number">201</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListResource</span><span class="params">(Resource)</span>:</span></div><div class="line"><span class="meta">    @marshal_with(todo_fields)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        todos = session.query(Todo).all()</div><div class="line">        <span class="keyword">return</span> todos</div><div class="line"></div><div class="line"><span class="meta">    @marshal_with(todo_fields)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></div><div class="line">        parsed_args = parser.parse_args()</div><div class="line">        todo = Todo(task=parsed_args[<span class="string">'task'</span>])</div><div class="line">        session.add(todo)</div><div class="line">        session.commit()</div><div class="line">        <span class="keyword">return</span> todo, <span class="number">201</span></div></pre></td></tr></table></figure><h4 id="5-app代码："><a href="#5-app代码：" class="headerlink" title="5.app代码："></a>5.app代码：</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf<span class="number">-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> Api</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">api = Api(app)</div><div class="line"></div><div class="line"><span class="keyword">from</span> resources <span class="keyword">import</span> TodoListResource</div><div class="line"><span class="keyword">from</span> resources <span class="keyword">import</span> TodoResource</div><div class="line"></div><div class="line">api.add_resource(TodoListResource, <span class="string">'/todos'</span>, endpoint=<span class="string">'todos'</span>)</div><div class="line">api.add_resource(TodoResource, <span class="string">'/todos/&lt;string:id&gt;'</span>, endpoint=<span class="string">'todo'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(debug=<span class="literal">True</span>)</div></pre></td></tr></table></figure><h4 id="5-test代码："><a href="#5-test代码：" class="headerlink" title="5.test代码："></a>5.test代码：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests, json</div><div class="line"><span class="built_in">print</span> requests.<span class="built_in">get</span>(<span class="string">'http://localhost:5000/todos'</span>).json()</div><div class="line"><span class="built_in">print</span> requests.post(<span class="string">'http://localhost:5000/todos'</span>,</div><div class="line">                 headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">                 data=json.dumps(&#123;<span class="string">'task'</span>: <span class="string">'go outside!'</span>&#125;)).json()</div><div class="line"><span class="built_in">print</span> requests.<span class="built_in">get</span>(<span class="string">'http://localhost:5000/todos/1'</span>).json()</div><div class="line"><span class="built_in">print</span> requests.<span class="built_in">put</span>(<span class="string">'http://localhost:5000/todos/1'</span>,</div><div class="line">                headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">                data=json.dumps(&#123;<span class="string">'task'</span>: <span class="string">'go to the gym'</span>&#125;)).json()</div><div class="line"><span class="built_in">print</span> requests.<span class="keyword">delete</span>(<span class="string">'http://localhost:5000/todos/1'</span>)</div><div class="line"><span class="built_in">print</span> requests.<span class="built_in">get</span>(<span class="string">'http://localhost:5000/todos'</span>).json()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[13]－ Flask实现restful接口
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[7]－ 自定义数据库连接池</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-27-training-python-7/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-27-training-python-7/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库连接池原理："><a href="#1-数据库连接池原理：" class="headerlink" title="1.数据库连接池原理："></a>1.数据库连接池原理：</h4><p>&gt;<br>连接池基本的思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。而连接的建立、断开都由连接池自身来管理。同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PooledConnection</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxconnections, dbtype)</span>:</span></div><div class="line">        <span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line">        self._pool = Queue(maxconnections) <span class="comment"># create the queue</span></div><div class="line">    </div><div class="line">        self.dbtype=dbtype</div><div class="line">        self.maxconnections=maxconnections</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(maxconnections):</div><div class="line">                self.fillConnection(self.CreateConnection(dbtype))</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> e</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fillConnection</span><span class="params">(self,conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.put(conn)</div><div class="line"></div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"fillConnection error:"</span>+str(e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnConnection</span><span class="params">(self, conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.put(conn)</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"returnConnection error:"</span>+str(e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnection</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._pool.get()</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"getConnection error:"</span>+str(e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ColseConnection</span><span class="params">(self,conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.get().close()</div><div class="line">            self.fillConnection(self.CreateConnection(dbtype))</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"CloseConnection error:"</span>+str(e)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateConnection</span><span class="params">(self, dbtype)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            conndb=MySQLdb.connect(db=<span class="string">'test'</span>,host=<span class="string">'127.0.0.1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">''</span>);</div><div class="line">            conndb.clientinfo = <span class="string">'datasync connection pool from datasync.py'</span>;</div><div class="line">            conndb.ping();</div><div class="line">            <span class="keyword">return</span> conndb</div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">'conn targetdb datasource Excepts,%s!!!(%s).'</span>%(<span class="string">'127.0.0.1'</span>,str(e))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">DB = PooledConnection(<span class="number">10</span>,<span class="string">"mysql"</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_mod</span><span class="params">( ip, data)</span>:</span></div><div class="line"></div><div class="line"><span class="keyword">global</span> DB</div><div class="line">conn = DB.getConnection()</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">"""insert into pool (name) values('wwwww')"""</span>)</div><div class="line"><span class="comment">#result = cursor.fetchall();</span></div><div class="line"><span class="comment">#print  cursor.description</span></div><div class="line"></div><div class="line"></div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MtaskConnection</span><span class="params">(object)</span>:</span></div><div class="line">     </div><div class="line">     </div><div class="line">    stream_set = set([])</div><div class="line">    </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,stream, address)</span>:</span></div><div class="line">        </div><div class="line">        self.stream = stream</div><div class="line">        self.address = address</div><div class="line">        self.stream_set.add(self.stream)</div><div class="line">        self.stream.set_close_callback(self._on_close)</div><div class="line">        self.stream.read_until(<span class="string">'\n'</span>, self._on_read_line)</div><div class="line">        </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_on_read_line</span><span class="params">(self, data)</span>:</span></div><div class="line"> </div><div class="line"></div><div class="line">        sub_mod(self.address[<span class="number">0</span>], data)</div><div class="line">      </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_on_close</span><span class="params">(self)</span>:</span></div><div class="line">   </div><div class="line">        MtaskConnection.stream_set.remove(self.stream)</div><div class="line">         </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonitorTCPServer</span><span class="params">(TCPServer)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        TCPServer.__init__(self)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_stream</span><span class="params">(self, stream, address)</span>:</span></div><div class="line">        MtaskConnection(stream,address)</div><div class="line"></div><div class="line"><span class="comment">#def __del__(self):</span></div><div class="line"><span class="comment">#self.pool.ColseConnection()</span></div><div class="line">         </div><div class="line"></div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">from</span> tornado <span class="keyword">import</span> process</div><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> web,netutil</div><div class="line"><span class="keyword">from</span> tornado.tcpserver <span class="keyword">import</span> TCPServer</div><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</div><div class="line"></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> json,time</div><div class="line"><span class="keyword">import</span> sys,os,string</div><div class="line"><span class="keyword">import</span> socket, select</div><div class="line"><span class="keyword">import</span> syslog</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line">    sockets = netutil.bind_sockets(<span class="number">32777</span>)</div><div class="line">    process.fork_processes(<span class="number">0</span>)</div><div class="line">    server = MonitorTCPServer()</div><div class="line">    server.add_sockets(sockets)</div><div class="line">    ioloop.IOLoop.instance().start()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#经两次fork实现脱终端，成为守护进程</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemon</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        pid = os.fork()</div><div class="line">        <span class="keyword">if</span> pid &gt; <span class="number">0</span>:</div><div class="line">            sys.exit(<span class="number">0</span>)</div><div class="line">        os.setsid()</div><div class="line">        os.umask(<span class="number">0</span>)</div><div class="line">        pid = os.fork()</div><div class="line">        <span class="keyword">if</span> pid &gt; <span class="number">0</span>: <span class="comment"># exit from second parent</span></div><div class="line">            sys.exit(<span class="number">0</span>)</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65</span>):</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                os.close(i)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">        sys.stdin = open(<span class="string">"/dev/null"</span>, <span class="string">"r+"</span>)</div><div class="line">        sys.stdout = sys.stdin</div><div class="line">        sys.stderr = sys.stdin</div><div class="line"></div><div class="line">    <span class="keyword">except</span> OSError, e:</div><div class="line">        syslog.syslog(syslog.LOG_ERR, <span class="string">"fork failed: (%s)"</span> % e)</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    </div><div class="line">     </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"> main()</div><div class="line">     <span class="comment">#syslog.openlog("monitor_svr", 0, syslog.LOG_LOCAL6)</span></div><div class="line">     <span class="comment">#daemon()</span></div><div class="line">     <span class="comment">#syslog.closelog()</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[7]－ 自定义数据库连接池
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[2]－list dict 基本使用</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-13-training-python-2/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-13-training-python-2/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>定义:<ul><li>list:链表,有序的项目, 通过索引进行查找,使用方括号”[]”;</li><li>tuple:元组,元组将多样的对象集合到一起,不能修改,通过索引进行查找, 使用括号”()”;</li><li>dict:字典,字典是一组键(key)和值(value)的组合,通过键(key)进行查找,没有顺序, 使用大括号”{}”;</li><li>set:集合,无序,元素只出现一次, 自动去重,使用”set([])”</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#样例</div><div class="line">mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'Oh'</span>]  </div><div class="line">mytuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">'Hello'</span>, (<span class="number">4</span>, <span class="number">5</span>))  </div><div class="line">mydict = &#123;<span class="string">'Wang'</span> : <span class="number">1</span>, <span class="string">'Hu'</span> : <span class="number">2</span>, <span class="string">'Liu'</span> : <span class="number">4</span>&#125;  </div><div class="line">myset = set([<span class="string">'Wang'</span>, <span class="string">'Hu'</span>, <span class="string">'Liu'</span>, <span class="number">4</span>, <span class="string">'Wang'</span>])  </div><div class="line">  </div><div class="line"><span class="function"><span class="title">print</span><span class="params">(mylist)</span></span>  </div><div class="line"><span class="function"><span class="title">print</span><span class="params">(mytuple)</span></span>  </div><div class="line"><span class="function"><span class="title">print</span><span class="params">(mydict)</span></span>  </div><div class="line"><span class="function"><span class="title">print</span><span class="params">(myset)</span></span></div></pre></td></tr></table></figure><ul><li><p>输出</p><ul><li>[1, 2, 3, 4, ‘Oh’]  </li><li>(1, 2, ‘Hello’, (4, 5))  </li><li>{‘Liu’: 4, ‘Wang’: 1, ‘Hu’: 2}  </li><li>set([‘Liu’, 4, ‘Wang’, ‘Hu’]) </li></ul></li></ul><p>我们重点讲字典和列表</p><p>####一、List操作<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># coding=utf<span class="number">-8</span></div><div class="line">###################################################</div><div class="line">#  </div><div class="line">#  功能：python入门引导 </div><div class="line">#        </div><div class="line">####################################################</div><div class="line"></div><div class="line">#定义函数</div><div class="line">def list_test():</div><div class="line">    #初始化列表</div><div class="line">    sample_list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>]</div><div class="line">    print sample_list</div><div class="line">      </div><div class="line">    #得到列表中的某一个值</div><div class="line">    value_start = sample_list[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">    print value_start</div><div class="line">      </div><div class="line">    end_value = sample_list[<span class="number">-1</span>]</div><div class="line">    print end_value</div><div class="line">      </div><div class="line">    #删除列表的第一个值</div><div class="line">    del sample_list[<span class="number">0</span>]</div><div class="line">      </div><div class="line">    #在列表中插入一个值</div><div class="line">    sample_list[<span class="number">0</span>] = [<span class="string">'sample value'</span>]</div><div class="line">    sample_list[<span class="number">2</span>] = <span class="string">'second'</span></div><div class="line">    sample_list.append(<span class="string">'three'</span>)</div><div class="line">      </div><div class="line">    #得到列表的长度</div><div class="line">    list_length = len(sample_list)</div><div class="line">    print list_length</div><div class="line">      </div><div class="line">    #列表遍历</div><div class="line">    for element <span class="keyword">in</span> sample_list:</div><div class="line">        print(element)</div><div class="line">      </div><div class="line">    #用同一个值初始化，形成一个含有六个元素的列表</div><div class="line">    sample_list = [<span class="string">'test'</span>]*<span class="number">6</span></div><div class="line">    for element <span class="keyword">in</span> sample_list:</div><div class="line">        print(element)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    #调用函数</div><div class="line">    list_test()</div></pre></td></tr></table></figure></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#coding=utf<span class="number">-8</span></div><div class="line"></div><div class="line"></div><div class="line">###################################################</div><div class="line">#  </div><div class="line">#  功能：python入门引导 </div><div class="line">#        </div><div class="line">####################################################</div><div class="line"></div><div class="line">def dict_test():</div><div class="line">    #初始化字典    </div><div class="line">    sample_dict = &#123;<span class="string">'a'</span>:<span class="string">'a'</span>,<span class="string">'2'</span>:<span class="string">'b'</span>,<span class="number">3</span>:<span class="string">'c'</span>&#125;</div><div class="line">    print sample_dict</div><div class="line"></div><div class="line">    #获取指定的key的值</div><div class="line">    pop = sample_dict.pop(<span class="string">'2'</span>)</div><div class="line">    print pop</div><div class="line">    print sample_dict</div><div class="line"></div><div class="line">    get = sample_dict.get(<span class="string">'a'</span>)</div><div class="line">    print get</div><div class="line">    print sample_dict</div><div class="line"></div><div class="line">    print sample_dict[<span class="number">3</span>]</div><div class="line"></div><div class="line">    #删除指定key的值</div><div class="line">    pop = sample_dict.pop(<span class="number">3</span>)</div><div class="line">    print pop</div><div class="line">    print sample_dict</div><div class="line"></div><div class="line">    #在字典中插入一个值</div><div class="line">    sample_dict.update(&#123;<span class="number">3</span>:<span class="string">'c'</span>,<span class="string">'2'</span>:<span class="string">'b'</span>&#125;)</div><div class="line">    print sample_dict</div><div class="line"></div><div class="line">    #获取字典长度</div><div class="line">    print len(sample_dict)</div><div class="line"></div><div class="line">    #字典遍历</div><div class="line">    for element <span class="keyword">in</span> sample_dict:</div><div class="line">        print element,sample_dict[element]</div><div class="line"></div><div class="line">    for (k, v) <span class="keyword">in</span> sample_dict.items():</div><div class="line">        print <span class="string">"sample_dict[%s] ="</span> % k, v</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    dict_test()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[2]－list dict 基本使用
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[3]－list dict在实际中的应用</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-14-training-python-3/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-14-training-python-3/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在python中, list, tuple, dict, set有什么区别, 主要应用在什么样的场景?</li><li>定义:</li></ul><ul><li><ul><li>list:链表,有序的项目, 通过索引进行查找,使用方括号”[]”;<br>tuple:元组,元组将多样的对象集合到一起,不能修改,通过索引进行查找, 使用括号”()”;<br>dict:字典,字典是一组键(key)和值(value)的组合,通过键(key)进行查找,没有顺序, 使用大括号”{}”;<br>set:集合,无序,元素只出现一次, 自动去重,使用”set([])”</li></ul></li></ul><ul><li>应用场景:</li></ul><ul><li><ul><li>list, 简单的数据集合,可以使用索引;<br>tuple, 把一些数据当做一个整体去使用,不能修改;<br>dict,使用键值和值进行关联的数据;<br>set,数据只出现一次,只关心数据是否出现, 不关心其位置;</li></ul></li></ul><h4 id="实践样例"><a href="#实践样例" class="headerlink" title="实践样例"></a>实践样例</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># coding=utf<span class="number">-8</span></div><div class="line">###################################################</div><div class="line">#  </div><div class="line">#  功能：统计游戏中玩家及玩家登陆次数</div><div class="line">#        </div><div class="line">####################################################</div><div class="line"></div><div class="line">#统计游戏中玩家及玩家登陆次数</div><div class="line">games = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>]  </div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter  </div><div class="line">d = Counter(games) </div><div class="line">print d</div><div class="line"></div><div class="line"></div><div class="line">#排位赛规则，如果积分相同，则按胜利场次，再相同按失败场次</div><div class="line">games =[&#123;<span class="string">'f'</span>:<span class="number">3</span>,<span class="string">'s'</span>:<span class="number">10</span>,<span class="string">'b'</span>:<span class="number">12</span>&#125;,&#123;<span class="string">'f'</span>:<span class="number">3</span>,<span class="string">'s'</span>:<span class="number">10</span>,<span class="string">'b'</span>:<span class="number">12</span>&#125;,&#123;<span class="string">'f'</span>:<span class="number">13</span>,<span class="string">'s'</span>:<span class="number">20</span>,<span class="string">'b'</span>:<span class="number">16</span>&#125;,&#123;<span class="string">'f'</span>:<span class="number">13</span>,<span class="string">'s'</span>:<span class="number">12</span>,<span class="string">'b'</span>:<span class="number">12</span>&#125;,&#123;<span class="string">'f'</span>:<span class="number">13</span>,<span class="string">'s'</span>:<span class="number">10</span>,<span class="string">'b'</span>:<span class="number">12</span>&#125;,]</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter  </div><div class="line">print sorted(games ,key = itemgetter(<span class="string">'f'</span>,<span class="string">'s'</span>,<span class="string">'b'</span>),reverse=<span class="literal">True</span>)</div><div class="line"></div><div class="line"></div><div class="line">#选择某一天，然后以这天为准，次日留存，<span class="number">3</span>日留存，<span class="number">7</span>日留存，<span class="number">14</span>日留存，<span class="number">30</span>日留存</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta  </div><div class="line">def GetNextDay(baseday,n):  </div><div class="line">    return str((datetime.strptime(str(baseday),<span class="string">'%Y-%m-%d'</span>)+timedelta(days=n)).date())  </div><div class="line"></div><div class="line"><span class="keyword">import</span> functools  </div><div class="line">selected_day = <span class="string">'2015-02-01'</span></div><div class="line">nday = functools.partial(GetNextDay,selected_day)</div><div class="line">print nday(<span class="number">1</span>)</div><div class="line">print nday(<span class="number">2</span>)</div><div class="line">print nday(<span class="number">6</span>)</div><div class="line">print nday(<span class="number">13</span>)</div><div class="line">print nday(<span class="number">29</span>)</div><div class="line"></div><div class="line">#用来计算游戏包裹里面的变化情况</div><div class="line">def symmetric_difference(_oldobj,_newobj):  </div><div class="line">    _oldkeys = _oldobj.keys()  </div><div class="line">    _newkeys = _newobj.keys()  </div><div class="line">    _diff = &#123;&#125;  </div><div class="line">    for _key <span class="keyword">in</span> set(_oldkeys + _newkeys):  </div><div class="line">        _val = _newobj.get(_key,<span class="number">0</span>) - _oldobj.get(_key,<span class="number">0</span>)  </div><div class="line">        <span class="keyword">if</span> _val:  </div><div class="line">            _diff[_key] = _val   </div><div class="line">    return _diff   </div><div class="line">      </div><div class="line">oldobj = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;  </div><div class="line">newobj = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">3</span>,<span class="string">'d'</span>:<span class="number">4</span>&#125;  </div><div class="line">print symmetric_difference(oldobj,newobj)</div></pre></td></tr></table></figure><ul><li>输入：python 3.py</li><li>输出：<ul><li>Counter({‘a’: 3, ‘b’: 3, ‘c’: 2, ‘d’: 1})</li><li>[{‘s’: 20, ‘b’: 16, ‘f’: 13}, {‘s’: 12, ‘b’: 12, ‘f’: 13}, {‘s’: 10, ‘b’: 12, ‘f’: 13},  </li><li>{‘s’: - 10, ‘b’: 12, ‘f’: 3}, {‘s’: 10, ‘b’: 12, ‘f’: 3}]- </li><li>2015-02-02- </li><li>2015-02-03- </li><li>2015-02-07- </li><li>2015-02-14- </li><li>2015-03-02- </li><li>{‘c’: -3, ‘b’: 1, ‘d’: 4}- </li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[3]－list dict在实际中的应用
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[12]－ 利用BeautifulSoup进行采集</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-17-training-python-12/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-17-training-python-12/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-BeautifulSoup操作："><a href="#1-BeautifulSoup操作：" class="headerlink" title="1.BeautifulSoup操作："></a>1.BeautifulSoup操作：</h4><ul><li>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它像其它网络爬虫一样，可以便捷的操作html，<br>如果你有jquery的使用经验，请使用Beautiful Soup 4.</li><li>安装时：pip install Beautiful Soup 4 </li><li>网方文档地址：<br><a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></li></ul><h4 id="2-糗百内容采集代码："><a href="#2-糗百内容采集代码：" class="headerlink" title="2.糗百内容采集代码："></a>2.糗百内容采集代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line">‘’‘</div><div class="line">功能：演示BeautifulSoup  MySQLdb Process的使用</div><div class="line">’‘’</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool, Pipe, cpu_count, active_children</div><div class="line"><span class="keyword">import</span> time,requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> db.mysql <span class="keyword">import</span> Custom_MySQL</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RebotQB</span><span class="params">(Process)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, child_conn, data)</span>:</span></div><div class="line">        Process.__init__(self)</div><div class="line">        self.data = data</div><div class="line">        self.child_conn = child_conn</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_qiubai_content</span><span class="params">(self, datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        记录采集入口到数据库</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        self.mysql = Custom_MySQL(<span class="string">'test'</span>)</div><div class="line">        <span class="comment"># 查看当年当月当天的入口</span></div><div class="line">        <span class="comment"># 演示 mysql count</span></div><div class="line">        sql = <span class="string">'select count(*) as count from qiubai\</span></div><div class="line"><span class="string">            where year = %(year)s and month = %(month)s and day = %(day)s and page = %(page)s and `index`= %(index)s'</span>% datas</div><div class="line"></div><div class="line">        <span class="comment"># print sql</span></div><div class="line">        result = self.mysql.count(sql)</div><div class="line">        count = result[<span class="string">'count'</span>]</div><div class="line">        <span class="comment"># 如果不存在</span></div><div class="line">        <span class="keyword">if</span> int(count) == <span class="number">0</span>:</div><div class="line">            <span class="comment"># 演示insert</span></div><div class="line">            self.mysql.insert(<span class="string">'qiubai'</span>, **datas)</div><div class="line">        <span class="comment"># 如果存在</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 演示update</span></div><div class="line">            self.mysql.update(<span class="string">'qiubai'</span>,</div><div class="line">                              <span class="string">' year = %(year)s and  month =%(month)s and day = %(day)s and  page=%(page)s and `index`=%(index)s'</span> % datas,</div><div class="line">                              **datas)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.data[<span class="string">'url'</span>]</div><div class="line">        <span class="comment"># 获取页面内容</span></div><div class="line">        content = requests.get(self.data[<span class="string">'url'</span>]).text</div><div class="line">        <span class="keyword">if</span> content == <span class="keyword">None</span>:</div><div class="line">            self.child_conn.put(&#123;<span class="string">'count'</span>: <span class="number">0</span>&#125;)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="comment"># 变成soup可认内容</span></div><div class="line">        soup = BeautifulSoup(content, from_encoding=<span class="string">"utf-8"</span>)</div><div class="line">        <span class="comment"># 抓取笑话内容</span></div><div class="line">        <span class="comment"># 规范请参考http://www.crummy.com/software/BeautifulSoup/bs4/doc/</span></div><div class="line">        <span class="comment"># 同jquery选择器一样</span></div><div class="line">        tag_index = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> soup.select(<span class="string">'[id^="qiushi_tag"]'</span>):</div><div class="line">            <span class="comment"># 确定是第几个笑话</span></div><div class="line">            tag_index = tag_index + <span class="number">1</span></div><div class="line">            <span class="comment"># 去掉内容和图片上次的内容</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">del</span> self.data[<span class="string">'content'</span>]</div><div class="line">                <span class="keyword">del</span> self.data[<span class="string">'img'</span>]</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line">            <span class="comment"># 内容和图片变量</span></div><div class="line">            content = <span class="keyword">None</span></div><div class="line">            img = <span class="keyword">None</span></div><div class="line">            <span class="comment"># 连接数据库并确认是本页的第几个笑话</span></div><div class="line">            self.mysql = Custom_MySQL(<span class="string">'test'</span>)</div><div class="line">            self.data.update(&#123;<span class="string">'index'</span>: tag_index&#125;)</div><div class="line">            <span class="comment"># 采集笑话内容</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                content = i.find(<span class="string">"div"</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">"content"</span>&#125;)</div><div class="line">                content = content.string</div><div class="line">                self.data.update(&#123;<span class="string">'content'</span>: content.encode(<span class="string">'gbk'</span>)&#125;)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">            <span class="comment"># 采集笑话中的图片</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                img = i.find(<span class="string">"div"</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">"thumb"</span>&#125;)</div><div class="line">                img = img.find(<span class="string">'img'</span>).attrs[<span class="string">'src'</span>]</div><div class="line">                self.data.update(&#123;<span class="string">'img'</span>: img&#125;)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">            <span class="comment"># 内容入库</span></div><div class="line">            result = self.insert_qiubai_content(self.data)</div><div class="line">        <span class="comment"># 统计每页要采集多少个笑话</span></div><div class="line">        self.child_conn.put(&#123;<span class="string">'count'</span>: tag_index&#125;)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</div><div class="line">    q = Queue()</div><div class="line">    data =&#123;<span class="string">'id'</span>:<span class="number">2</span>,<span class="string">'url'</span>:<span class="string">'http://www.qiushibaike.com/history'</span>&#125;</div><div class="line">    r = RebotQB(q,data)</div><div class="line">    r.start()</div></pre></td></tr></table></figure><h4 id="3-利用进程池代码："><a href="#3-利用进程池代码：" class="headerlink" title="3.利用进程池代码："></a>3.利用进程池代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">功能：采集糗百笑话，利用进程池,更改了一下系统pool的默认行为支持daemon模式</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="comment">#我们必须显示声明引进multiprocessing模块，而不是Process</span></div><div class="line"><span class="keyword">import</span> multiprocessing.pool</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskProcess</span><span class="params">(Process)</span>:</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">替成自己的业务类即可</span></div><div class="line"><span class="string">'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        Process.__init__(self)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'TaskProcess is running '</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoDaemonProcess</span><span class="params">(multiprocessing.Process)</span>:</span></div><div class="line">    <span class="comment"># 使进程总是daemon模式</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_daemon</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_daemon</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    daemon = property(_get_daemon, _set_daemon, <span class="keyword">None</span>,</div><div class="line">                      doc=<span class="string">'make "daemon" attribute always return False'</span>)</div><div class="line"></div><div class="line"><span class="comment">#我们用multiprocessing.pool.Pool 代替 multiprocessing.Pool</span></div><div class="line"><span class="comment">#因为这里只有最新的包装器函数, 而不是一个类.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPool</span><span class="params">(multiprocessing.pool.Pool)</span>:</span></div><div class="line">    Process = NoDaemonProcess</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(num_procs)</span>:</span></div><div class="line">    print(<span class="string">"Creating %i (daemon) workers and jobs in child."</span> % num_procs)</div><div class="line">    <span class="comment"># 自己的业务进程</span></div><div class="line">    p = TaskProcess()</div><div class="line">    p.start()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Creating 5 (non-daemon) workers and jobs in main process."</span>)</div><div class="line">    year = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2008</span>, <span class="number">2014</span>)]</div><div class="line">    pool = CustomPool(len(year) * <span class="number">4</span>)</div><div class="line">    result = pool.map(work, year)</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line">    <span class="comment"># print(result)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[12]－ 利用BeautifulSoup进行采集
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[6]－ 自定义数据库连接池</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-23-training-python-6/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-23-training-python-6/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库连接池原理："><a href="#1-数据库连接池原理：" class="headerlink" title="1.数据库连接池原理："></a>1.数据库连接池原理：</h4><p>&gt;<br>连接池基本的思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。而连接的建立、断开都由连接池自身来管理。同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> string</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PooledConnection</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxconnections, connstr,dbtype)</span>:</span></div><div class="line">        <span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line">        self._pool = Queue(maxconnections) <span class="comment"># create the queue</span></div><div class="line">        self.connstr = connstr</div><div class="line">        self.dbtype=dbtype</div><div class="line">        self.maxconnections=maxconnections</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(maxconnections):</div><div class="line">                self.fillConnection(self.CreateConnection(connstr,dbtype))</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> e</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fillConnection</span><span class="params">(self,conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.put(conn)</div><div class="line"> </div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"fillConnection error:"</span>+str(e)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnConnection</span><span class="params">(self, conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.put(conn)</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"returnConnection error:"</span>+str(e)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnection</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._pool.get()</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"getConnection error:"</span>+str(e)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ColseConnection</span><span class="params">(self,conn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._pool.get().close()</div><div class="line">            self.fillConnection(self.CreateConnection(connstr,dbtype))</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">raise</span> <span class="string">"CloseConnection error:"</span>+str(e)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateConnection</span><span class="params">(self,connstr,dbtype)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            conndb=MySQLdb.connect(db=<span class="string">'test'</span>,host=<span class="string">'127.0.0.1'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">''</span>);</div><div class="line">            conndb.clientinfo = <span class="string">'datasync connection pool from datasync.py'</span>;</div><div class="line">            conndb.ping();</div><div class="line">            <span class="keyword">return</span> conndb</div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">print</span> <span class="string">'ssssssssss'</span></div><div class="line">            <span class="keyword">raise</span> <span class="string">'conn targetdb datasource Excepts,%s!!!(%s).'</span>%(<span class="string">'127.0.0.1'</span>,str(e))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"> </div><div class="line"><span class="comment">#创建连接池：</span></div><div class="line">connstring=<span class="string">"rooot#' '#127.0.0.1:3306/test"</span></div><div class="line">pool=PooledConnection(<span class="number">10</span>,connstring,<span class="string">"mysql"</span>);</div><div class="line"><span class="comment">#获取连接：</span></div><div class="line">conn = pool.getConnection()</div><div class="line">time.sleep(<span class="number">15</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">"""select * from emp"""</span>)</div><div class="line">result = cursor.fetchall();</div><div class="line"><span class="keyword">print</span>  cursor.description</div><div class="line">conn.close();</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[6]－ 自定义数据库连接池
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[5]－ splinter自动登录微博和qq空间</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-19-training-python-5/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-19-training-python-5/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-扩展安装："><a href="#1-扩展安装：" class="headerlink" title="1.扩展安装："></a>1.扩展安装：</h4><ul><li>pip install splinter</li><li>sudo pip install selenium</li><li>sudo pip install mozmill</li><li>要求python2.7+ </li><li>默认使用firefox浏览器，如果需要使用chrom且在mac的情况下可用 brew install chromedriver 安装，不过请使用代理，要不download会失败。</li></ul><h4 id="2-登录微博代码："><a href="#2-登录微博代码：" class="headerlink" title="2.登录微博代码："></a>2.登录微博代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">利用splinter模块模拟发布微博，仅为QA讲例测试</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> splinter.browser <span class="keyword">import</span> Browser</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">web_firefox = Browser(<span class="string">'firefox'</span>)</div><div class="line">web_firefox.visit(<span class="string">'http://weibo.com/login.php'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> web_firefox.find_by_name(<span class="string">'username'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">'uname'</span></div><div class="line">    <span class="comment"># web_firefox.find_by_name('username').click()</span></div><div class="line">    <span class="comment"># 这个地方用by_name能找到，但是模拟点击时有问题，改成by_css</span></div><div class="line">    web_firefox.find_by_css(</div><div class="line">        <span class="string">"input[node-type=\"username\"]"</span>).fill(<span class="string">'xxxx@sina.com'</span>)</div><div class="line">time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</div><div class="line"></div><div class="line"><span class="keyword">if</span> web_firefox.find_by_name(<span class="string">'password'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">'passwd'</span></div><div class="line">    web_firefox.find_by_css(<span class="string">"input[node-type=\"password\"]"</span>).fill(<span class="string">'******'</span>)</div><div class="line">    </div><div class="line">time.sleep(random.randint(<span class="number">3</span>, <span class="number">15</span>))</div><div class="line"><span class="keyword">print</span> web_firefox.find_by_css(<span class="string">".loginbox .W_login_form .login_btn div a "</span>)[<span class="number">0</span>].click()</div><div class="line"></div><div class="line">time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</div><div class="line"><span class="keyword">print</span> web_firefox.find_by_css(<span class="string">".input .W_input"</span>).fill(<span class="string">u'我说不让你用微博测试，你非用，得了吧。。。。 封ip了吧'</span>)</div><div class="line"></div><div class="line">time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</div><div class="line"><span class="keyword">print</span> web_firefox.find_by_css(<span class="string">"a[node-type=\"submit\"]"</span>).click()</div></pre></td></tr></table></figure><ul><li>效果：<a href="http://pan.baidu.com/s/1pJA3QyR" target="_blank" rel="external">http://pan.baidu.com/s/1pJA3QyR</a></li></ul><h4 id="3-登录QQ空间代码："><a href="#3-登录QQ空间代码：" class="headerlink" title="3.登录QQ空间代码："></a>3.登录QQ空间代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> splinter <span class="keyword">import</span> Browser</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">splinter</span><span class="params">(url, q, p)</span>:</span></div><div class="line">    <span class="comment"># browser=Browser('chrome')</span></div><div class="line">    <span class="comment">#browser = Browser('webdriver.chrome')</span></div><div class="line">    browser = Browser(<span class="string">'firefox'</span>)</div><div class="line">    browser.visit(url)</div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="comment">#fill in account and password</span></div><div class="line">    <span class="keyword">if</span> browser.find_by_id(<span class="string">'login_frame'</span>):</div><div class="line">        <span class="keyword">with</span> browser.get_iframe(<span class="string">'login_frame'</span>) <span class="keyword">as</span> frame:</div><div class="line">            frame.find_by_id(<span class="string">'switcher_plogin'</span>).click()</div><div class="line">            <span class="keyword">print</span> <span class="string">'输入账号...'</span></div><div class="line">            frame.find_by_id(<span class="string">'u'</span>).fill(q)</div><div class="line">            <span class="keyword">print</span> <span class="string">'输入密码...'</span></div><div class="line">            frame.find_by_id(<span class="string">'p'</span>).fill(p)</div><div class="line">            <span class="keyword">print</span> <span class="string">'尝试登录...'</span></div><div class="line">            frame.find_by_id(<span class="string">'login_button'</span>).click()</div><div class="line">            <span class="keyword">print</span> <span class="string">'完成登录动作...'</span></div><div class="line"></div><div class="line">    browser.find_by_id(<span class="string">'aMyFriends'</span>).click()</div><div class="line">    time.sleep(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    website = <span class="string">'http://qzone.qq.com'</span></div><div class="line">    qq = <span class="string">'qq号'</span></div><div class="line">    pwd = <span class="string">'***********'</span></div><div class="line">    splinter(website, qq, pwd)</div></pre></td></tr></table></figure><ul><li>效果：<a href="http://pan.baidu.com/s/1hqfAaX2" target="_blank" rel="external">http://pan.baidu.com/s/1hqfAaX2</a></li></ul><h4 id="4-模块简介："><a href="#4-模块简介：" class="headerlink" title="4.模块简介："></a>4.模块简介：</h4><ul><li>Splinter 可以通过api自动模拟用户行为，可以利用Splinter开发浏览器自动化操作。<br>* Splinter:  <a href="https://github.com/cobrateam/splinter" target="_blank" rel="external">https://github.com/cobrateam/splinter</a></li></ul><ul><li>功能：<ul><li>simple api 接口简单</li><li>multi webdrivers (chrome webdriver, firefox webdriver, phantomjs webdriver, zopetestbrowser, - remote webdriver) 多个浏览器驱动</li><li>css and xpath selectors css和xpath作为选择器</li><li>support to iframe and alert 支持iframe和alert</li><li>execute javascript 可执行javascript</li><li>works with ajax and async javascript 支持javascript的ajax的异步操作</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[5]－ splinter自动登录微博和qq空间
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[8]－ 数据库操作之MySQLdb</title>
    <link href="//www.zwting.com/2017/09/15/2015-05-10-training-python-8/"/>
    <id>//www.zwting.com/2017/09/15/2015-05-10-training-python-8/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数据库操作："><a href="#1-数据库操作：" class="headerlink" title="1.数据库操作："></a>1.数据库操作：</h4><p>&gt;<br>    数据操作在工作中最常用的操作类库之一，今天贴出来我常用的MySQl操作类，一直在用，也一直在不断优化，暂时可以满足业务</p><h4 id="2-接口代码："><a href="#2-接口代码：" class="headerlink" title="2.接口代码："></a>2.接口代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta  </div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractproperty</div><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom_Interface</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    __metaclass__ = ABCMeta</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        关闭当前数据库句柄</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回一个list，多个结果。</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,table,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">       </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,table,where,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">        </div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,table,where)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure><h4 id="2-类实现代码："><a href="#2-类实现代码：" class="headerlink" title="2.类实现代码："></a>2.类实现代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Created on 2011-8-28</span></div><div class="line"><span class="string">@author: wuqichao</span></div><div class="line"><span class="string">@copyright: $Id: custom_mysql.py 12565 2013-01-29 08:00:34Z wuqichao $</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> MySQLdb</div><div class="line">    <span class="keyword">import</span> MySQLdb.cursors</div><div class="line">    <span class="keyword">from</span> MySQLdb <span class="keyword">import</span>  IntegrityError  <span class="keyword">as</span> IntegrityError</div><div class="line">    <span class="keyword">from</span> MySQLdb <span class="keyword">import</span> OperationalError <span class="keyword">as</span> OperationalError</div><div class="line">    <span class="keyword">from</span> MySQLdb <span class="keyword">import</span> DatabaseError <span class="keyword">as</span> DatabaseError</div><div class="line">    <span class="keyword">from</span> MySQLdb <span class="keyword">import</span> InternalError <span class="keyword">as</span> InternalError</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">print</span> &gt;&gt; sys.stderr,<span class="string">"""\</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">There was a problem importing Python modules(MySQLdb-python) required.</span></div><div class="line"><span class="string">The error leading to this problem was:</span></div><div class="line"><span class="string">%s Please install a package which provides this module, or</span></div><div class="line"><span class="string">verify that the module is installed correctly.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">It's possible that the above module doesn't match the current version of Python,</span></div><div class="line"><span class="string">which is:</span></div><div class="line"><span class="string">%s</span></div><div class="line"><span class="string">"""</span> % (sys.exc_info(), sys.version)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">__ALL__=[<span class="string">'Custom_MySQL'</span>]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom_MySQL</span><span class="params">()</span> :</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    service 基础类</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,using=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @param cursor_hander:数据库句柄</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.cursor = <span class="keyword">None</span></div><div class="line">        self.cursor_hander = using</div><div class="line">        self.connections = <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> str(self.cursor_hander).rstrip() == <span class="string">''</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'please write Custom_MySQL`s using param'</span></div><div class="line">            exit(<span class="number">0</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            </div><div class="line">            databases =&#123;</div><div class="line">                       </div><div class="line">                        <span class="string">'log'</span>:&#123;<span class="string">'host'</span>:<span class="string">'115.*.*.*'</span>, <span class="string">'user'</span>:<span class="string">'xxxxxxx'</span>,<span class="string">'password'</span>:<span class="string">'xxxxxxxx'</span>, <span class="string">'database'</span>:<span class="string">'logs'</span>,<span class="string">'charset'</span>:<span class="string">'utf8'</span>,<span class="string">'port'</span>:<span class="number">3306</span>,<span class="string">'connect_timeout'</span>:<span class="number">60</span>&#125;,</div><div class="line">                      &#125;,</div><div class="line">            </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            </div><div class="line">            </div><div class="line">            database = databases[self.cursor_hander]</div><div class="line">            </div><div class="line">            </div><div class="line">            self.connections = MySQLdb.connect(database[<span class="string">'host'</span>],database[<span class="string">'user'</span>],database[<span class="string">'password'</span>],</div><div class="line">                                               database[<span class="string">'database'</span>],charset = database[<span class="string">'charset'</span>],</div><div class="line">                                               port = int(database[<span class="string">'port'</span>]),connect_timeout = int(database[<span class="string">'connect_timeout'</span>]));</div><div class="line">            self.connections.ping(<span class="keyword">True</span>)</div><div class="line">            self.cursor = self.connections.cursor(MySQLdb.cursors.DictCursor)</div><div class="line">           </div><div class="line">            </div><div class="line">        <span class="keyword">except</span> MySQLdb.Error, e:</div><div class="line">          </div><div class="line">            err_info = <span class="string">"Error %d: %s"</span> % (e.args[<span class="number">0</span>],e.args[<span class="number">1</span>])</div><div class="line">            <span class="keyword">print</span> err_info</div><div class="line">            sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.connections.ping(<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> self.connections:</div><div class="line">                self.connections.close()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> self.connections:</div><div class="line">                self.connections.close()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_execute</span><span class="params">(self, cursor, query, parameters)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> cursor.execute(query, parameters)</div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL._execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">except</span> IntegrityError:</div><div class="line">            Exception(<span class="string">"IntegrityError for Custom_MySQL._execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">except</span> DatabaseError:</div><div class="line">            Exception(<span class="string">"IntegrityError for Custom_MySQL._execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">        <span class="keyword">except</span> InternalError:</div><div class="line">            Exception(<span class="string">"IntegrityError for Custom_MySQL._execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_execute_affected_rows</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._execute(self.cursor,query, parameters)</div><div class="line">            <span class="keyword">return</span> self.cursor.rowcount</div><div class="line"></div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL.execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._execute(self.cursor,query, parameters)</div><div class="line">            <span class="keyword">return</span> self.cursor.lastrowid</div><div class="line"></div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL.execute() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">executemany</span><span class="params">(self, query, parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cursor.executemany(query, parameters)</div><div class="line">            <span class="keyword">return</span> self.cursor.lastrowid</div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL.executemany() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回一个list，多个结果。</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._execute(self.cursor,query, parameters)</div><div class="line">            <span class="keyword">return</span> self.cursor.fetchall()</div><div class="line"></div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL.query() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        rows = self.query(query, *parameters)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rows:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> len(rows) &gt; <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> query</div><div class="line">            <span class="keyword">raise</span> Exception(<span class="string">"Multiple rows returned for Database.get() query"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> rows[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self,query, *parameters)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        @return: 返回单个结果</span></div><div class="line"><span class="string">        @param query:SQL语句</span></div><div class="line"><span class="string">        @param parameters:SQL语句参数</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._execute(self.cursor,query, parameters)</div><div class="line">            <span class="keyword">return</span> self.cursor.fetchone()</div><div class="line"></div><div class="line">        <span class="keyword">except</span> OperationalError:</div><div class="line">            Exception(<span class="string">"OperationalError for Custom_MySQL.count() query"</span>)</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,table,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> Insert(self,table)(**datas)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,table,where,**datas)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> Update(self,table,where)(**datas)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,table,where)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        @param table:表名</span></div><div class="line"><span class="string">        @param datas:｛字段：值｝</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="keyword">return</span> Delete(self,table,where)()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.cursor.execute(<span class="string">'set autocommit =0;'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.cursor.execute(<span class="string">'COMMIT;'</span>)</div><div class="line">            <span class="keyword">except</span> Exception,e:</div><div class="line">                self.cursor.execute(<span class="string">'ROLLBACK;'</span>)</div><div class="line">                Exception(<span class="string">"OperationalError for Custom_MySQL.commit() Error:%s"</span>,e)</div><div class="line">                <span class="keyword">raise</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rollback</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.cursor.execute(<span class="string">'ROLLBACK;'</span>)</div><div class="line">            <span class="keyword">except</span> Exception,e:</div><div class="line">                Exception(<span class="string">"OperationalError for Custom_MySQL.rollback() Error:%s"</span>,e)</div><div class="line">                <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insert</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db,tablename)</span>:</span></div><div class="line"></div><div class="line">        self.db=db</div><div class="line">        self.tablename=tablename</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,**fileds)</span>:</span></div><div class="line">        columns=fileds.keys()</div><div class="line">        _prefix=<span class="string">""</span>.join([<span class="string">'INSERT INTO `'</span>,self.tablename,<span class="string">'`'</span>])</div><div class="line">        _fields=<span class="string">","</span>.join([<span class="string">""</span>.join([<span class="string">'`'</span>,column,<span class="string">'`'</span>]) <span class="keyword">for</span> column <span class="keyword">in</span> columns])</div><div class="line">        _values=<span class="string">","</span>.join([<span class="string">"%s"</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(columns))])</div><div class="line">        _sql=<span class="string">""</span>.join([_prefix,<span class="string">"("</span>,_fields,<span class="string">") VALUES ("</span>,_values,<span class="string">")"</span>])</div><div class="line">        _params=[fileds[key] <span class="keyword">for</span> key <span class="keyword">in</span> columns] </div><div class="line">        <span class="keyword">return</span> self.db.execute(_sql,*tuple(_params))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Update</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db,tablename,where)</span>:</span></div><div class="line">        self.db=db</div><div class="line">        self._tablename=tablename</div><div class="line">        self._where=where</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,**fileds)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(fileds)&lt;<span class="number">1</span>:</div><div class="line">            <span class="keyword">raise</span> OperationalError,<span class="string">"Must have unless 1 field to update"</span></div><div class="line">        _params=[]</div><div class="line">        _cols=[]</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fileds.keys():</div><div class="line">            _cols.append(<span class="string">""</span>.join([<span class="string">"`"</span>,i,<span class="string">'`'</span>,<span class="string">'=%s'</span>]))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fileds.values():</div><div class="line">            _params.append(i)</div><div class="line"></div><div class="line">        _sql_slice=[<span class="string">"UPDATE "</span>,self._tablename,<span class="string">" SET "</span>,<span class="string">","</span>.join(_cols)]</div><div class="line">        <span class="keyword">if</span> self._where:</div><div class="line">            _sql_slice.append(<span class="string">" WHERE "</span>+self._where)</div><div class="line"></div><div class="line">        _sql=<span class="string">""</span>.join(_sql_slice)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> self.db._execute_affected_rows(_sql,*_params)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delete</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db,tablename,where)</span>:</span></div><div class="line">        self.db=db</div><div class="line">        self._tablename=tablename</div><div class="line">        self._where=where</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        _sql_slice=[<span class="string">"DELETE FROM `"</span>,self._tablename,<span class="string">"`"</span>]</div><div class="line">        <span class="keyword">if</span> self._where:</div><div class="line">            _sql_slice.append(<span class="string">" WHERE "</span>+self._where)</div><div class="line"></div><div class="line">            _sql=<span class="string">""</span>.join(_sql_slice)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> self.db._execute_affected_rows(_sql)</div></pre></td></tr></table></figure><h4 id="2-接口代码：-1"><a href="#2-接口代码：-1" class="headerlink" title="2.接口代码："></a>2.接口代码：</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/usr/bin/<span class="keyword">python</span></div><div class="line">#coding=gbk</div><div class="line"></div><div class="line"></div><div class="line">from custom_mysql import Custom_MySQL</div><div class="line">#声明实例</div><div class="line"></div><div class="line">mysql = Custom_MySQL(<span class="string">'test'</span>)</div><div class="line"></div><div class="line">#演示 mysql <span class="built_in">count</span> 查询条数</div><div class="line">sql = <span class="string">'select count(*) as count from qiubai'</span></div><div class="line">result = mysql.<span class="built_in">count</span>(sql)</div><div class="line"><span class="built_in">count</span> = result[<span class="string">'count'</span>]</div><div class="line"><span class="keyword">print</span> <span class="built_in">count</span></div><div class="line"></div><div class="line">#演示 mysql query 查询结果集多条</div><div class="line">sql = <span class="string">'select id,url from qiubai limit 10'</span></div><div class="line">result = mysql.query(sql)</div><div class="line"><span class="keyword">for</span> i in resul<span class="variable">t:</span></div><div class="line"></div><div class="line">    <span class="keyword">print</span> i[<span class="string">'id'</span>],i[<span class="string">'url'</span>]</div><div class="line"></div><div class="line">#演示 mysql <span class="built_in">get</span>  查询结果集只有一条</div><div class="line">sql = <span class="string">'select id,url from qiubai limit 10'</span></div><div class="line">result = mysql.<span class="built_in">get</span>(sql)</div><div class="line"><span class="keyword">print</span> result</div><div class="line"></div><div class="line">#事务处理</div><div class="line">mysql.begin()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    datas =&#123;</div><div class="line">        <span class="string">'year'</span>:<span class="string">'2013'</span>,</div><div class="line">        <span class="string">'month'</span>:<span class="string">'10'</span>,</div><div class="line">        <span class="string">'day'</span>:<span class="string">'12'</span>,</div><div class="line">        <span class="string">'page'</span>:<span class="string">'80'</span>,</div><div class="line">        <span class="string">'index'</span>:<span class="string">'2'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    #演示 mysql <span class="keyword">insert</span>  返回last_insert_id</div><div class="line">    <span class="keyword">print</span> mysql.<span class="keyword">insert</span>(<span class="string">'qiubai'</span>,**datas)</div><div class="line">    datas.<span class="keyword">update</span>(&#123;<span class="string">'url'</span>:<span class="string">'wwwwwwwwwww'</span>&#125;)</div><div class="line"></div><div class="line">    #演示 mysql <span class="keyword">update</span>  返回<span class="keyword">update</span>的影响数</div><div class="line">    <span class="keyword">print</span> mysql.<span class="keyword">update</span>(<span class="string">'qiubai'</span>,</div><div class="line">                      <span class="string">' year = %(year)s and  month =%(month)s and day = %(day)s and  page=%(page)s and `index`=%(index)s'</span>%datas,</div><div class="line">                      **datas)</div><div class="line">    #演示 mysql <span class="keyword">delete</span>  返回<span class="keyword">delete</span>的影响数</div><div class="line">    <span class="keyword">print</span> mysql.<span class="keyword">delete</span>(<span class="string">'qiubai'</span>,</div><div class="line"></div><div class="line">                      <span class="string">' year = %(year)s and  month =%(month)s and day = %(day)s and  page=%(page)s and `index`=%(index)s'</span>%datas)</div><div class="line"></div><div class="line">    #提交事务</div><div class="line">    mysql.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    #回滚</div><div class="line">    mysql.rollback()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[8]－ 数据库操作之MySQLdb
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[4]－使用pylint约束代码规范</title>
    <link href="//www.zwting.com/2017/09/15/2015-04-17-training-python-4/"/>
    <id>//www.zwting.com/2017/09/15/2015-04-17-training-python-4/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>pylint是一个Python代码风格的检查工具, 它依据的标准是Guido van Rossum的PEP8<br>* Pylint:  <a href="http://www.logilab.org/project/pylint" target="_blank" rel="external">http://www.logilab.org/project/pylint</a></li><li>Pep8:    <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-0008/</a></li><li>Pep8中文: <a href="http://code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="external">http://code.google.com/p/zhong-wiki/wiki/PEP8</a> </li><li>原谅我用2007年译的版本，我只是觉得当年这篇比较靠近原意。</li></ul><h4 id="1-扩展安装："><a href="#1-扩展安装：" class="headerlink" title="1.扩展安装："></a>1.扩展安装：</h4><ul><li>pip install pylint</li><li>可以这样用 pylint demo.py </li><li></li><li>pip install pep8</li><li>pep8 –show-source –show-pep8  demo.py </li></ul><h4 id="2-Pylint-的输出"><a href="#2-Pylint-的输出" class="headerlink" title="2.Pylint 的输出"></a>2.Pylint 的输出</h4><ul><li>对于每一个 Python 模块，Pylint 的结果中首先显示一些”*”字符 , 后面紧跟模块的名字，然后是一系列的 message, </li><li>message 的格式如下：</li><li>MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE <ul><li>MESSAGE_TYPE 有如下几种：</li><li>(C) 惯例。违反了编码风格标准</li><li>(R) 重构。写得非常糟糕的代码。</li><li>(W) 警告。某些 Python 特定的问题。</li><li>(E) 错误。很可能是代码中的错误。</li><li>(F) 致命错误。阻止 Pylint 进一步运行的错误。</li></ul></li></ul><p>####3.样本实例<br>demo.py在 <a href="http://djshell.github.io/python/training-python-1.html" target="_blank" rel="external">http://djshell.github.io/python/training-python-1.html</a></p><p>######3.1检查python格式</p><ul><li>pylint demo.py <ul><li>No config file found, using default configuration</li><li><strong><strong><strong>*</strong></strong></strong> Module demo</li><li>W: 11, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 15, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 16, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 17, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 18, 0: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)</li><li>W: 19, 0: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)</li><li>W: 22, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 27, 0: Bad indentation. Found 2 spaces, expected 4 (bad-indentation)</li><li>W: 28, 0: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)</li><li>W: 29, 0: Bad indentation. Found 4 spaces, expected 8 (bad-indentation)</li><li>C: 32, 0: Unnecessary parens after u’print’ keyword (superfluous-parens)</li><li>C:  1, 0: Missing module docstring (missing-docstring)</li><li>C: 15, 2: Invalid variable name “a” (invalid-name)</li><li>C: 16, 2: Invalid variable name “b” (invalid-name)</li><li>C: 18, 4: Invalid variable name “a” (invalid-name)</li><li>C: 18, 7: Invalid variable name “b” (invalid-name)</li><li>C: 21, 0: Invalid argument name “n” (invalid-name)</li><li>C: 27, 6: Invalid variable name “x” (invalid-name)</li><li>C: 29,15: More than one statement on a single line (multiple-statements)</li><li>…………</li><li>…………省略多行，下面是得分</li><li>Your code has been rated at -2.67/10<br><br><br><br></li></ul></li><li>可能是在页面复制贴粘时空格数据发生改变了，我们只得了负分现在我们来按照提示整理格式<ul><li>Bad indentation. Found 2 spaces, expected 4 (bad-indentation) 空格期望四个，错误缩进</li><li>Unnecessary parens after u’print’ keyword (superfluous-parens) print 之后多余的小括号</li><li>Missing module docstring (missing-docstring) 没有模块文档说明</li><li>Invalid variable name “a” (invalid-name) 非法的变量</li><li>No space allowed around keyword argument assignment 不要在用于指定<br>关键字参数 (keyword argument) 或默认参数值的 ‘=’ 号周围使用空格</li><li>Trailing whitespace (trailing-whitespace) 尾随空白，行尾有空白字符，需要删除</li></ul></li></ul><p><br><br></p><ul><li>按照提示更改代码直到得到10分<ul><li>Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)</li></ul></li></ul><p>####更改完的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment">#!/usr/bin/python2.7</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">python pylint demo</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    a generator that produces the fibonacci series's elements</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    int_a = <span class="number">1</span></div><div class="line">    int_b = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        int_a, int_b = int_a + int_b, int_a</div><div class="line">        <span class="keyword">yield</span> int_a</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth</span><span class="params">(series, num)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">   returns the nth element of a series, consuming the series' earlier elements.    '''</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> series:</div><div class="line">        num -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> key</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Executed from the command line'</span></div><div class="line">    <span class="keyword">print</span> nth(fib(), <span class="number">10</span>)</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[4]－使用pylint约束代码规范
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[15]－ 视频教程</title>
    <link href="//www.zwting.com/2017/09/15/2017-04-20-training-python-15/"/>
    <id>//www.zwting.com/2017/09/15/2017-04-20-training-python-15/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>###为了培训python录的视频，每周更新，欢迎拍砖！</p><h3 id="请用无线观看，每个约200M大小"><a href="#请用无线观看，每个约200M大小" class="headerlink" title="请用无线观看，每个约200M大小"></a>请用无线观看，每个约200M大小</h3><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=z0395naxllw&auto=0" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=n0395xrwzdg&auto=0" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><p>&gt;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[15]－ 视频教程
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[14]－ ansible多进程并发执行</title>
    <link href="//www.zwting.com/2017/09/15/2016-12-06-training-python-14/"/>
    <id>//www.zwting.com/2017/09/15/2016-12-06-training-python-14/</id>
    <published>2017-09-15T11:30:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-业务场景"><a href="#1-业务场景" class="headerlink" title="1.业务场景"></a>1.业务场景</h4><pre><code>游戏发布版本，涉及多个游戏平台一起发布的情况，所以在执行ansible时，需要指定游戏平以的服务器集群IP，需要执行的yaml文件和host文件不同，为了对接资产，所以用python2.7实现最好.</code></pre><h4 id="2-安装扩展"><a href="#2-安装扩展" class="headerlink" title="2.安装扩展"></a>2.安装扩展</h4><pre><code>- pip install ansible2.2</code></pre><h4 id="3-接管ansible的playbook接口v2版本"><a href="#3-接管ansible的playbook接口v2版本" class="headerlink" title="3.接管ansible的playbook接口v2版本"></a>3.接管ansible的playbook接口v2版本</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># unitl.py</span></div><div class="line"></div><div class="line">from collections import namedtuple</div><div class="line">from ansible.parsing.dataloader import DataLoader</div><div class="line">from ansible.vars import VariableManager</div><div class="line">from ansible.inventory import Inventory</div><div class="line">from ansible.playbook.play import Play</div><div class="line">from ansible.executor.task_queue_manager import TaskQueueManager</div><div class="line">from ansible.executor.playbook_executor import PlaybookExecutor</div><div class="line">from ansible.plugins.callback import CallbackBase</div><div class="line">from ansible.utils.display import Display</div><div class="line">import json</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsCollector</span>(<span class="title">CallbackBase</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, *args, **kwargs)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">super</span>(ResultsCollector, <span class="keyword">self</span>).__init_<span class="number">_</span>(*args, **kwargs)</div><div class="line">        <span class="keyword">self</span>.host_ok = &#123;&#125;</div><div class="line">        <span class="keyword">self</span>.host_unreachable = &#123;&#125;</div><div class="line">        <span class="keyword">self</span>.host_failed = &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">v2_runner_on_unreachable</span><span class="params">(<span class="keyword">self</span>, result)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.host_unreachable.setdefault(result._host.get_name(), []).append(result._result)</div><div class="line">        <span class="comment">#print result._result.items()</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">v2_runner_on_ok</span><span class="params">(<span class="keyword">self</span>, result, *args, **kwargs)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">if</span> result._task.<span class="symbol">name:</span></div><div class="line">            <span class="keyword">self</span>.host_ok.setdefault(result._task.name,[]).append(result._host.name)</div><div class="line">        <span class="comment">#print result._result.items()</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">v2_runner_on_failed</span><span class="params">(<span class="keyword">self</span>, result, *args, **kwargs)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">if</span> result._task.<span class="symbol">name:</span></div><div class="line">            <span class="keyword">self</span>.host_failed.setdefault(result._task.name, []).append(result._host.name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Distribute_playbook</span>():</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, playbook=<span class="string">"./test.yaml"</span>, hosts=<span class="string">""</span>, group=<span class="string">""</span>, username=<span class="string">"playcrab"</span>, passwd=&#123;&#125;,</span></span></div><div class="line"><span class="function"><span class="params">                 extra_vars=&#123;&#125;)</span></span><span class="symbol">:</span></div><div class="line">      </div><div class="line">        <span class="keyword">self</span>.display = Display()</div><div class="line">        <span class="keyword">self</span>.callback = ResultsCollector()</div><div class="line">        <span class="keyword">self</span>.extra_vars = extra_vars</div><div class="line"></div><div class="line">        Options = namedtuple(<span class="string">'Options'</span>,</div><div class="line">                             [<span class="string">'listtags'</span>, <span class="string">'listtasks'</span>, <span class="string">'listhosts'</span>, <span class="string">'syntax'</span>, <span class="string">'connection'</span>, <span class="string">'module_path'</span>, <span class="string">'forks'</span>,</div><div class="line">                              <span class="string">'async'</span>, <span class="string">'remote_user'</span>,</div><div class="line">                              <span class="string">'private_key_file'</span>, <span class="string">'ssh_common_args'</span>, <span class="string">'ssh_extra_args'</span>, <span class="string">'sftp_extra_args'</span>,</div><div class="line">                              <span class="string">'scp_extra_args'</span>, <span class="string">'become'</span>, <span class="string">'become_method'</span>, <span class="string">'become_user'</span>, <span class="string">'verbosity'</span>, <span class="string">'check'</span>])</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.options = Options(listtags=False, listtasks=False, listhosts=False, syntax=False, connection=<span class="string">'smart'</span>,</div><div class="line">                               module_path=<span class="string">'/usr/share/ansible'</span>, forks=<span class="number">10</span>, async=<span class="number">3</span>,</div><div class="line">                               remote_user=username, private_key_file=None, ssh_common_args=None, ssh_extra_args=None,</div><div class="line">                               sftp_extra_args=None, scp_extra_args=None, become=None, become_method=None,</div><div class="line">                               become_user=None, verbosity=None, check=False)</div><div class="line"></div><div class="line">        <span class="comment"># initialize needed objects</span></div><div class="line">        <span class="keyword">self</span>.variable_manager = VariableManager()</div><div class="line">        <span class="keyword">self</span>.variable_manager.extra_vars = <span class="keyword">self</span>.extra_vars</div><div class="line">        <span class="keyword">self</span>.loader = DataLoader()</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.passwords =  dict(vault_pass=passwd)</div><div class="line"></div><div class="line">        <span class="comment"># 初始化</span></div><div class="line">        <span class="keyword">self</span>.inventory_example = Inventory(loader=<span class="keyword">self</span>.loader, variable_manager=<span class="keyword">self</span>.variable_manager, host_list=hosts)</div><div class="line">        <span class="comment"># 得到所有组</span></div><div class="line">        <span class="keyword">self</span>.inventory_example.get_groups()</div><div class="line"></div><div class="line">        <span class="comment"># 得到所有主机</span></div><div class="line">        result_hosts = <span class="keyword">self</span>.inventory_example.get_hosts(pattern=group)</div><div class="line">        host_list = []</div><div class="line">        <span class="keyword">for</span> host <span class="keyword">in</span> <span class="symbol">result_hosts:</span></div><div class="line">            host_list.append(str(host))</div><div class="line"></div><div class="line"></div><div class="line">        </div><div class="line">        <span class="comment"># create inventory and pass to var manager</span></div><div class="line">        <span class="keyword">self</span>.inventory = Inventory(loader=<span class="keyword">self</span>.loader, variable_manager=<span class="keyword">self</span>.variable_manager, host_list=host_list)</div><div class="line">        <span class="keyword">self</span>.variable_manager.set_inventory(<span class="keyword">self</span>.inventory)</div><div class="line">        </div><div class="line">        <span class="comment"># create play with tasks</span></div><div class="line">        <span class="keyword">self</span>.play_source = dict(</div><div class="line">            <span class="comment">#     name = "Ansible Play",</span></div><div class="line">            hosts = host_list,</div><div class="line">            <span class="comment">#     gather_facts = 'no',</span></div><div class="line">            <span class="comment">#     #tasks = [</span></div><div class="line">            <span class="comment">#     #    dict(action=dict(module='shell', args='ls'), register='shell_out'),</span></div><div class="line">            <span class="comment">#     #    dict(action=dict(module='debug', args=dict(msg='&#123;&#123;shell_out.stdout&#125;&#125;')))</span></div><div class="line">            <span class="comment">#     # ]</span></div><div class="line">            <span class="comment"># tasks = [ dict(action=dict(module='command', args=dict(cmd=cmd))) ]</span></div><div class="line">        )</div><div class="line">        <span class="keyword">self</span>.play = Play().load(<span class="keyword">self</span>.play_source, variable_manager=<span class="keyword">self</span>.variable_manager, loader=<span class="keyword">self</span>.loader)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.playbook = playbook</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># actually run it</span></div><div class="line"></div><div class="line">        tqm = PlaybookExecutor(</div><div class="line">            playbooks=[<span class="keyword">self</span>.playbook],</div><div class="line">            inventory=<span class="keyword">self</span>.inventory,</div><div class="line">            variable_manager=<span class="keyword">self</span>.variable_manager,</div><div class="line">            loader=<span class="keyword">self</span>.loader,</div><div class="line">            options=<span class="keyword">self</span>.options,</div><div class="line">            passwords=<span class="keyword">self</span>.passwords,</div><div class="line">        )</div><div class="line">        tqm._tqm._stdout_callback = <span class="keyword">self</span>.callback</div><div class="line">        tqm.run()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line"></div><div class="line">        res=&#123;&#125;</div><div class="line">        res[<span class="string">'succ'</span>]=<span class="keyword">self</span>.callback.host_ok</div><div class="line">        res[<span class="string">'fail'</span>] = <span class="keyword">self</span>.callback.host_failed</div><div class="line">        res[<span class="string">'unreach'</span>]=<span class="keyword">self</span>.callback.host_unreachable</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure><h4 id="4-任务所需test-yaml"><a href="#4-任务所需test-yaml" class="headerlink" title="4.任务所需test.yaml"></a>4.任务所需test.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">all</span></div><div class="line"><span class="attr">  gather_facts:</span> <span class="literal">False</span></div><div class="line"><span class="attr">  vars:</span> </div><div class="line"><span class="attr">   key:</span> <span class="string">Ansible</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">  - name:</span> <span class="string">display</span> <span class="string">Host</span> <span class="string">Variable</span> <span class="string">from</span> <span class="string">hostfile</span></div><div class="line"><span class="attr">    debug:</span> <span class="string">msg="</span> <span class="string">The</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span> <span class="string">Value</span> <span class="string">is</span> <span class="string">&#123;&#123;</span> <span class="string">key</span> <span class="string">&#125;&#125;"</span></div></pre></td></tr></table></figure><h4 id="5-任务所需hosts"><a href="#5-任务所需hosts" class="headerlink" title="5.任务所需hosts"></a>5.任务所需hosts</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[test]</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.5</span><span class="selector-class">.2</span> </div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.5</span><span class="selector-class">.3</span> </div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.5</span><span class="selector-class">.4</span></div></pre></td></tr></table></figure><h4 id="5-执行任务"><a href="#5-执行任务" class="headerlink" title="5.执行任务"></a>5.执行任务</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># test.py</span></div><div class="line"></div><div class="line">from unitl import Distribute_playbook</div><div class="line">import multiprocessing</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>(<span class="title">multiprocessing</span>.<span class="title">Process</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,index)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.index = index</div><div class="line"></div><div class="line">        multiprocessing.Process.__init_<span class="number">_</span>(<span class="keyword">self</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment">#ansible-playbook -i ./hosts ./test.yaml</span></div><div class="line">        test = Distribute_playbook(playbook=<span class="string">"./test%s.yaml"</span>%<span class="keyword">self</span>.index, hosts=<span class="string">"./hosts"</span>, group=<span class="string">"test"</span>)</div><div class="line">        </div><div class="line">        test.run()</div><div class="line">        res = test.get_result()</div><div class="line">        print(res)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></div><div class="line">    jobs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)<span class="symbol">:</span></div><div class="line">        p = Worker(i)</div><div class="line">        jobs.append(p)</div><div class="line">        p.start()</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="symbol">jobs:</span></div><div class="line">        j.join()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[14]－ ansible多进程并发执行
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="python技术分享" scheme="//www.zwting.com/tags/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>kafka-flume集群环境搭建【1】</title>
    <link href="//www.zwting.com/2017/09/11/2017-09-11-cluster-kafka-1/"/>
    <id>//www.zwting.com/2017/09/11/2017-09-11-cluster-kafka-1/</id>
    <published>2017-09-11T09:30:00.000Z</published>
    <updated>2017-09-21T10:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><h4 id="1-1-操作系统"><a href="#1-1-操作系统" class="headerlink" title="1.1 操作系统"></a>1.1 操作系统</h4><pre><code>172.16.61.102,centos6.9172.16.61.103,centos6.9172.16.61.104,centos6.9</code></pre><h3 id="1-2-etc-hosts-（3主机均需要）"><a href="#1-2-etc-hosts-（3主机均需要）" class="headerlink" title="1.2 /etc/hosts  （3主机均需要）"></a>1.2 /etc/hosts  （3主机均需要）</h3><pre><code>172.16.61.102  kafka01172.16.61.103  kafka02172.16.61.104  kafka03</code></pre><h3 id="1-3-安装Java-（3主机均需要）"><a href="#1-3-安装Java-（3主机均需要）" class="headerlink" title="1.3 安装Java （3主机均需要）"></a>1.3 安装Java （3主机均需要）</h3><pre><code>yum install java-1.8.0-openjdk -y</code></pre><h3 id="1-4-下载安装kafka-（3主机均需要）"><a href="#1-4-下载安装kafka-（3主机均需要）" class="headerlink" title="1.4 下载安装kafka （3主机均需要）"></a>1.4 下载安装kafka （3主机均需要）</h3><pre><code>cd ~wget http://mirrors.hust.edu.cn/apache/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgztar -xf kafka_2.11-0.11.0.0.tgz -C /usr/local/ln -sv /usr/local/kafka_2.11-0.11.0.0 /usr/local/kafkall  /usr/local/kafka</code></pre><h3 id="2-配置zookeeper"><a href="#2-配置zookeeper" class="headerlink" title="2. 配置zookeeper"></a>2. 配置zookeeper</h3><h5 id="2-1-zookeeper-配置"><a href="#2-1-zookeeper-配置" class="headerlink" title="2.1 zookeeper 配置"></a>2.1 zookeeper 配置</h5><p>[root@kafka102 ] cat /usr/local/kafka/config/zookeeper.properties</p><pre><code>dataDir=/data/zookeeperclientPort=2181tickTime=2000initLimit=20syncLimit=10server.102=172.16.61.102:2888:3888server.103=172.16.61.103:2888:3888server.104=172.16.61.104:2888:3888</code></pre><p>[root@kafka103 ] cat /usr/local/kafka/config/zookeeper.properties</p><pre><code>dataDir=/data/zookeeperclientPort=2181tickTime=2000initLimit=20syncLimit=10server.102=172.16.61.102:2888:3888server.103=172.16.61.103:2888:3888server.104=172.16.61.104:2888:3888</code></pre><p>[root@kafka104 ] cat /usr/local/kafka/config/zookeeper.properties</p><pre><code>dataDir=/data/zookeeperclientPort=2181tickTime=2000initLimit=20syncLimit=10server.102=172.16.61.102:2888:3888server.103=172.16.61.103:2888:3888server.104=172.16.61.104:2888:3888</code></pre><h5 id="2-2-创建数据目录-（3主机均需要）"><a href="#2-2-创建数据目录-（3主机均需要）" class="headerlink" title="2.2 创建数据目录 （3主机均需要）"></a>2.2 创建数据目录 （3主机均需要）</h5><pre><code>[root@kafka102 ] mkdir -p /data/zookeeper [root@kafka103 ] mkdir -p /data/zookeeper [root@kafka104] mkdir -p /data/zookeeper </code></pre><h5 id="2-3-写zookeeper标识（3主机均需要）"><a href="#2-3-写zookeeper标识（3主机均需要）" class="headerlink" title="2.3 写zookeeper标识（3主机均需要）"></a>2.3 写zookeeper标识（3主机均需要）</h5><pre><code>[root@kafka102 ] echo 102 &gt; /data/zookeeper/myid[root@kafka103 ] echo 103 &gt; /data/zookeeper/myid[root@kafka104 ] echo 104 &gt; /data/zookeeper/myid</code></pre><font color="red"> 注意数字要zookeeper.properties中一致</font> <h5 id="2-4-启动zookeeper"><a href="#2-4-启动zookeeper" class="headerlink" title="2.4 启动zookeeper"></a>2.4 启动zookeeper</h5><pre><code>[root@kafka102 ]# nohup /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;[root@kafka103 ]# nohup /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;[root@kafka104 ]# nohup /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;</code></pre><h5 id="2-5-停止zookeeper"><a href="#2-5-停止zookeeper" class="headerlink" title="2.5 停止zookeeper"></a>2.5 停止zookeeper</h5><pre><code>/usr/local/kafka/bin/zookeeper-server-stop.sh</code></pre><h3 id="3-配置kafka"><a href="#3-配置kafka" class="headerlink" title="3. 配置kafka"></a>3. 配置kafka</h3><h5 id="3-1-server-properties-修改-broker-id、zookeeper-connect"><a href="#3-1-server-properties-修改-broker-id、zookeeper-connect" class="headerlink" title="3.1 server.properties 修改 broker.id、zookeeper.connect"></a>3.1 server.properties 修改 broker.id、zookeeper.connect</h5><p>[root@kafka102 ~]# grep -v ^#  /usr/local/kafka/config/server.properties|sed ‘/^$/d’</p><pre><code>broker.id=102num.network.threads=3num.io.threads=8socket.send.buffer.bytes=102400socket.receive.buffer.bytes=102400socket.request.max.bytes=104857600log.dirs=/tmp/kafka-logsnum.partitions=1num.recovery.threads.per.data.dir=1offsets.topic.replication.factor=1transaction.state.log.replication.factor=1transaction.state.log.min.isr=1log.retention.hours=168log.segment.bytes=1073741824log.retention.check.interval.ms=300000zookeeper.connect=172.16.61.102:2181,172.16.61.103:2181,172.16.61.104:2181zookeeper.connection.timeout.ms=6000group.initial.rebalance.delay.ms=0</code></pre><p>[root@kafka103 ~]# grep -v ^#  /usr/local/kafka/config/server.properties|sed ‘/^$/d’</p><pre><code>broker.id=103num.network.threads=3num.io.threads=8socket.send.buffer.bytes=102400socket.receive.buffer.bytes=102400socket.request.max.bytes=104857600log.dirs=/tmp/kafka-logsnum.partitions=1num.recovery.threads.per.data.dir=1offsets.topic.replication.factor=1transaction.state.log.replication.factor=1transaction.state.log.min.isr=1log.retention.hours=168log.segment.bytes=1073741824log.retention.check.interval.ms=300000zookeeper.connect=172.16.61.102:2181,172.16.61.103:2181,172.16.61.104:2181zookeeper.connection.timeout.ms=6000group.initial.rebalance.delay.ms=0</code></pre><p>[root@kafka104 ~]# grep -v ^#  /usr/local/kafka/config/server.properties|sed ‘/^$/d’</p><pre><code>broker.id=104num.network.threads=3num.io.threads=8socket.send.buffer.bytes=102400socket.receive.buffer.bytes=102400socket.request.max.bytes=104857600log.dirs=/tmp/kafka-logsnum.partitions=1num.recovery.threads.per.data.dir=1offsets.topic.replication.factor=1transaction.state.log.replication.factor=1transaction.state.log.min.isr=1log.retention.hours=168log.segment.bytes=1073741824log.retention.check.interval.ms=300000zookeeper.connect=172.16.61.102:2181,172.16.61.103:2181,172.16.61.104:2181zookeeper.connection.timeout.ms=6000group.initial.rebalance.delay.ms=0</code></pre><h5 id="3-2-启动kafka"><a href="#3-2-启动kafka" class="headerlink" title="3.2 启动kafka"></a>3.2 启动kafka</h5><pre><code>[root@kafka102 zookeeper]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;[root@kafka103 zookeeper]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;[root@kafka104 zookeeper]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;</code></pre><h5 id="3-3-停止kafka"><a href="#3-3-停止kafka" class="headerlink" title="3.3 停止kafka"></a>3.3 停止kafka</h5><pre><code>/usr/local/kafka/bin/kafka-server-stop.sh</code></pre><h3 id="3-4-查看各机器端口"><a href="#3-4-查看各机器端口" class="headerlink" title="3.4 查看各机器端口"></a>3.4 查看各机器端口</h3><pre><code>netstat -nlpt | grep -E &quot;2181|2888|3888|9092&quot;</code></pre><h3 id="4-kafka日常操作"><a href="#4-kafka日常操作" class="headerlink" title="4. kafka日常操作"></a>4. kafka日常操作</h3><h5 id="4-1-创建主题"><a href="#4-1-创建主题" class="headerlink" title="4.1 创建主题"></a>4.1 创建主题</h5><pre><code>[root@kafka102 ~]# /usr/local/kafka/bin/kafka-topics.sh --create --zookeeper 172.16.61.102:2181 --replication-factor 3 --partitions 1 --topic test000</code></pre><h5 id="4-2-查看主题列表"><a href="#4-2-查看主题列表" class="headerlink" title="4.2 查看主题列表"></a>4.2 查看主题列表</h5><pre><code>[root@kafka102 ~]# /usr/local/kafka/bin/kafka-topics.sh --list --zookeeper 172.16.61.102:2181</code></pre><h5 id="4-3-查看主题详细内容"><a href="#4-3-查看主题详细内容" class="headerlink" title="4.3 查看主题详细内容"></a>4.3 查看主题详细内容</h5><pre><code>[root@kafka102 ~]# /usr/local/kafka/bin/kafka-topics.sh --describe --zookeeper 172.16.61.102:2181 --topic test000</code></pre><h5 id="4-4-生产者-和-消费者"><a href="#4-4-生产者-和-消费者" class="headerlink" title="4.4 生产者 和 消费者"></a>4.4 生产者 和 消费者</h5><pre><code>[root@kafka01 ~]# /usr/local/kafka/bin/kafka-console-producer.sh --broker-list 172.16.61.102:2181 --topic test000[root@kafka01 ~]# /usr/local/kafka/bin/kafka-console-consumer.sh --zookeeper  172.16.61.102:2181 --topic test000 --from-beginning会有如下提示，需要用最新的指令 0.9+Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper]. /usr/local/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test --producer.config /usr/local/kafka/config/producer.properties /usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --new-consumer --from-beginning --consumer.config /usr/local/kafka/config/consumer.properties</code></pre><h3 id="5-kafka问题实录："><a href="#5-kafka问题实录：" class="headerlink" title="5. kafka问题实录："></a>5. kafka问题实录：</h3><h5 id="5-1-Q：因为没有启动kafka"><a href="#5-1-Q：因为没有启动kafka" class="headerlink" title="5.1 Q：因为没有启动kafka"></a>5.1 Q：因为没有启动kafka</h5><pre><code>[root@kafka102 ~]# /usr/local/kafka/bin/kafka-topics.sh --create --zookeeper 172.16.61.102:2181 --replication-factor 3 --partitions 1 --topic test000Error while executing topic command : replication factor: 3 larger than available brokers: 0[2017-09-12 16:42:56,533] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: replication factor: 3 larger than available brokers: 0 (kafka.admin.TopicCommand$)</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>&gt;<br><a href="http://blog.csdn.net/ddcowboy/article/details/54617740" target="_blank" rel="external">http://blog.csdn.net/ddcowboy/article/details/54617740</a><br><a href="http://orchome.com/454" target="_blank" rel="external">http://orchome.com/454</a></p>]]></content>
    
    <summary type="html">
    
      使用kafka处理大量的日志
    
    </summary>
    
      <category term="集群搭建" scheme="//www.zwting.com/categories/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="集群搭建" scheme="//www.zwting.com/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>PHP7扩展开发官方译文[2]</title>
    <link href="//www.zwting.com/2017/08/29/Internal-value-representation-in-PHP-7-part-2/"/>
    <id>//www.zwting.com/2017/08/29/Internal-value-representation-in-PHP-7-part-2/</id>
    <published>2017-08-29T11:51:59.000Z</published>
    <updated>2017-08-30T07:02:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文第一部分和第二均翻译自Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 的<a href="http://nikic.github.io/" target="_blank" rel="external">博客</a>。为了更符合汉语的阅读习惯，文中并不会逐字逐句的翻译。</em></p><p><em>要理解本文，你应该对 PHP5 中变量的实现有了一些了解，本文重点在于解释 PHP7 中 zval 的变化。</em></p><p>第一部分讲了 PHP5 和 PHP7 中关于变量最基础的实现和变化。这里再重复一下，主要的变化就是 zval 不再单独分配内存，不自己存储引用计数。整型浮点型等简单类型直接存储在 zval 中。复杂类型则通过指针指向一个独立的结构体。</p><p>复杂的 zval 数据值有一个共同的头，其结构由 <code>zend_refcounted</code> 定义：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">_zend_refcounted</span> &#123;</span></div><div class="line">    uint32_t refcount;</div><div class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">            ZEND_ENDIAN_LOHI_3(</div><div class="line">                zend_uchar    <span class="keyword">type</span>,</div><div class="line">                zend_uchar    flags,</div><div class="line">                uint16_t      gc_info)</div><div class="line">        &#125; v;</div><div class="line">        uint32_t type_info;</div><div class="line">    &#125; u;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这个头存储有 <code>refcount</code>（引用计数），值的类型 <code>type</code> 和循环回收的相关信息 <code>gc_info</code> 以及类型标志位 <code>flags</code>。</p><p>接下来会对每种复杂类型的实现单独进行分析并和 PHP5 的实现进行比较。引用虽然也属于复杂类型，但是上一部分已经介绍过了，这里就不再赘述。另外这里也不会讲到资源类型（因为作者觉得资源类型没什么好讲的）。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>PHP7 中定义了一个新的结构体 <code>zend_string</code> 用于存储字符串变量：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct _zend_string &#123;</div><div class="line">    zend_refcounted   gc<span class="comment">;</span></div><div class="line">    zend_ulong        h<span class="comment">;        /* hash value */</span></div><div class="line">    size_t            len<span class="comment">;</span></div><div class="line">    char              val[<span class="number">1</span>]<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure><p>除了引用计数的头以外，字符串还包含哈希缓存 <code>h</code>，字符串长度 <code>len</code> 以及字符串的值 <code>val</code>。哈希缓存的存在是为了防止使用字符串做为 hashtable 的 key 在查找时需要重复计算其哈希值，所以这个在使用之前就对其进行初始化。</p><p>如果你对 C 语言了解的不是很深入的话，可能会觉得 <code>val</code> 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串偿付肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』方法：在声明数组时只定义一个元素，但是实际创建 <code>zend_string</code> 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 <code>val</code> 访问完整的字符串。</p><p>当然这属于非常规的实现手段，因为我们实际的读和写的内容都超过了单字符数组的边界。但是 C 语言编译器却不知道你是这么做的。虽然 C99 也曾明确规定过支持『柔性数组』，但是感谢我们的好朋友微软，没人能在不同的平台上保证 C99 的一致性（所以这种手段是为了解决 Windows 平台下柔性数组的支持问题）。</p><p>新的字符串类型的结构比原生的 C 字符串更方便使用：第一是因为直接存储了字符串的长度，这样就不用每次使用时都去计算。第二是字符串也有引用计数的头，这样也就可以在不同的地方共享字符串本身而无需使用 zval。一个经常使用的地方就是共享 hashtable 的 key。</p><p>但是新的字符串类型也有一个很不好的地方：虽然可以很方便的从 zend_string 中取出 C 字符串（使用 <code>str-&gt;val</code> 即可），但反过来，如果将 C 字符串变成 zend_string 就需要先分配 zend_string 需要的内存，再将字符串复制到 zend_string 中。这在实际使用的过程中并不是很方便。</p><p>字符串也有一些特有的标志（存储在 GC 的标志位中的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STR_PERSISTENT           (1&lt;&lt;0) <span class="comment">/* allocated using malloc */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STR_INTERNED             (1&lt;&lt;1) <span class="comment">/* interned string */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STR_PERMANENT            (1&lt;&lt;2) <span class="comment">/* interned string surviving request boundary */</span></span></div></pre></td></tr></table></figure><p>持久化的字符串需要的内存直接从系统本身分配而不是 zend 内存管理器（ZMM），这样它就可以一直存在而不是只在单次请求中有效。给这种特殊的分配打上标记便于 zval 使用持久化字符串。在 PHP5 中并不是这样处理的，是在使用前复制一份到 ZMM 中。</p><p>保留字符（interned strings）有点特殊，它会一直存在直到请求结束时才销毁，所以也就无需进行引用计数。保留字符串也不可重复（duplicate），所以在创建新的保留字符时也会先检查是否有同样字符的已经存在。所有 PHP 源码中不可变的字符串都是保留字符（包括字符串常量、变量名函数名等）。持久化字符串也是请求开始之前已经创建好的保留字符。但普通的保留字符在请求结束后会销毁，持久化字符串却始终存在。</p><p>如果使用了 opcache 的话保留字符会被存储在共享内存（SHM）中这样就可以在所有 PHP 进程质检共享。这种情况下持久化字符串也就没有存在的意义了，因为保留字符也是不会被销毁的。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>因为<a href="http://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html" target="_blank" rel="external">之前的文章</a>有讲过新的数组实现，所以这里就不再详细描述了。虽然最近有些变化导致之前的描述不是十分准确了，但是基本的概念还是一致的。</p><p>这里要说的是之前的文章中没有提到的数组相关的概念：不可变数组。其本质上和保留字符类似：没有引用计数且在请求结束之前一直存在（也可能在请求结束之后还存在）。</p><p>因为某些内存管理方便的原因，不可变数组只会在开启 opcache 时会使用到。我们来看看实际使用的例子，先看以下的脚本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">1000000</span>; ++$i) &#123;</span></div><div class="line"><span class="php">    $array[] = [<span class="string">'foo'</span>];</span></div><div class="line"><span class="php">&#125;</span></div><div class="line"><span class="php">var_dump(memory_get_usage());</span></div></pre></td></tr></table></figure><p>开启 opcache 时，以上代码会使用 32MB 的内存，不开启的情况下因为 <code>$array</code> 每个元素都会复制一份 <code>[&#39;foo&#39;]</code> ，所以需要 390MB。这里会进行完整的复制而不是增加引用计数值的原因是防止 zend 虚拟机操作符执行的时候出现共享内存出错的情况。我希望不使用 opcache 时内存暴增的问题以后能得到改善。</p><h2 id="PHP5-中的对象"><a href="#PHP5-中的对象" class="headerlink" title="PHP5 中的对象"></a>PHP5 中的对象</h2><p>在了解 PHP7 中的对象实现直线我们先看一下 PHP5 的并且看一下有什么效率上的问题。PHP5 中的 zval 会存储一个 <code>zend_object_value</code> 结构，其定义如下：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef struct <span class="number">_</span>zend<span class="number">_</span><span class="keyword">object</span><span class="number">_</span><span class="keyword">value</span> &#123;</div><div class="line">    zend<span class="number">_</span><span class="keyword">object</span><span class="number">_</span>handle handle;</div><div class="line">    const zend<span class="number">_</span><span class="keyword">object</span><span class="number">_</span>handlers *handlers;</div><div class="line">&#125; zend<span class="number">_</span><span class="keyword">object</span><span class="number">_</span><span class="keyword">value</span>;</div></pre></td></tr></table></figure><p><code>handle</code> 是对象的唯一 ID，可以用于查找对象数据。<code>handles</code> 是保存对象各种属性方法的虚函数表指针。通常情况下 PHP 对象都有着同样的 handler 表，但是 PHP 扩展创建的对象也可以通过操作符重载等方式对其行为自定义。</p><p>对象句柄（handler）是作为索引用于『对象存储』，对象存储本身是一个存储容器（bucket）的数组，bucket 定义如下：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">_zend_object_store_bucket</span> &#123;</span></div><div class="line">    zend_bool destructor_called;</div><div class="line">    zend_bool valid;</div><div class="line">    zend_uchar apply_count;</div><div class="line">    <span class="class"><span class="keyword">union</span> <span class="title">_store_bucket</span> &#123;</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">_store_object</span> &#123;</span></div><div class="line">            void *object;</div><div class="line">            zend_objects_store_dtor_t dtor;</div><div class="line">            zend_objects_free_object_storage_t free_storage;</div><div class="line">            zend_objects_store_clone_t clone;</div><div class="line">            const zend_object_handlers *handlers;</div><div class="line">            zend_uint refcount;</div><div class="line">            gc_root_buffer *buffered;</div><div class="line">        &#125; obj;</div><div class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">            int <span class="keyword">next</span>;</div><div class="line">        &#125; free_list;</div><div class="line">    &#125; bucket;</div><div class="line">&#125; zend_object_store_bucket;</div></pre></td></tr></table></figure><p>这个结构体包含了很多东西。前三个成员只是些普通的元数据（对象的析构函数是否被调用过、bucke 是否被使用过以及对象被递归调用过多少次）。接下来的联合体用于区分 bucket 是处于使用中的状态还是空闲状态。上面的结构中最重要的是 <code>struct _store_object</code> 子结构体：</p><p>第一个成员 <code>object</code> 是指向实际对象（也就是对象最终存储的位置）的指针。对象实际并不是直接嵌入到对象存储的 bucket 中的，因为对象不是定长的。对象指针下面是三个用于管理对象销毁、释放与克隆的操作句柄（handler）。这里要注意的是 PHP 销毁和释放对象是不同的步骤，前者在某些情况下有可能会被跳过（不完全释放）。克隆操作实际上几乎几乎不会被用到，因为这里包含的操作不是普通对象本身的一部分，所以（任何时候）他们在每个对象中他们都会被单独复制（duplicate）一份而不是共享。</p><p>这些对象存储操作句柄后面是一个普通的对象 <code>handlers</code> 指针。存储这几个数据是因为有时候可能会在 zval 未知的情况下销毁对象（通常情况下这些操作都是针对 zval 进行的）。</p><p>bucket 也包含了 <code>refcount</code> 的字段，不过这种行为在 PHP5 中显得有些奇怪，因为 zval 本身已经存储了引用计数。为什么还需要一个多余的计数呢？问题在于虽然通常情况下 zval 的『复制』行为都是简单的增加引用计数即可，但是偶尔也会有深度复制的情况出现，比如创建一个全新的 zval 但是保存同样的 <code>zend_object_value</code>。这种情况下两个不同的 zval 就用到了同一个对象存储的 bucket，所以 bucket 自身也需要进行引用计数。这种『双重计数』的方式是 PHP5 的实现内在的问题。GC 根缓冲区中的 <code>buffered</code> 指针也是由于同样的原因才需要进行完全复制（duplicate）。</p><p>现在看看对象存储中指针指向的实际的 <code>object</code> 的结构，通常情况下用户层面的对象定义如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct _zend_object &#123;</div><div class="line">    zend_class_entry *ce<span class="comment">;</span></div><div class="line">    HashTable *properties<span class="comment">;</span></div><div class="line">    zval **properties_table<span class="comment">;</span></div><div class="line">    HashTable *guards<span class="comment">;</span></div><div class="line">&#125; zend_object<span class="comment">;</span></div></pre></td></tr></table></figure><p><code>zend_class_entry</code> 指针指向的是对象实现的类原型。接下来的两个元素是使用不同的方式存储对象属性。动态属性（运行时添加的而不是在类中定义的）全部存在 <code>properties</code> 中，不过只是属性名和值的简单匹配。</p><p>不过这里有针对已经声明的属性的一个优化：编译期间每个属性都会被指定一个索引并且属性本身是存储在 <code>properties_table</code> 的索引中。属性名称和索引的匹配存储在类原型的 hashtable 中。这样就可以防止每个对象使用的内存超过 hashtable 的上限，并且属性的索引会在运行时有多处缓存。</p><p><code>guards</code> 的哈希表是用于实现魔术方法的递归行为的，比如 <code>__get</code>，这里我们不深入讨论。</p><p>除了上文提到过的双重计数的问题，这种实现还有一个问题是一个最小的只有一个属性的对象也需要 136 个字节的内存（这还不算 zval 需要的内存）。而且中间存在很多间接访问动作：比如要从对象 zval 中取出一个元素，先需要取出对象存储 bucket，然后是 <code>zend object</code>，然后才能通过指针找到对象属性表和 zval。这样这里至少就有 4 层间接访问（并且实际使用中可能最少需要七层）。</p><h2 id="PHP7-中的对象"><a href="#PHP7-中的对象" class="headerlink" title="PHP7 中的对象"></a>PHP7 中的对象</h2><p>PHP7 的实现中试图解决上面这些问题，包括去掉双重引用计数、减少内存使用以及间接访问。新的 <code>zend_object</code> 结构体如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct _zend_object &#123;</div><div class="line">    zend_refcounted   gc<span class="comment">;</span></div><div class="line">    uint32_t          handle<span class="comment">;</span></div><div class="line">    zend_class_entry *ce<span class="comment">;</span></div><div class="line">    const zend_object_handlers *handlers<span class="comment">;</span></div><div class="line">    HashTable        *properties<span class="comment">;</span></div><div class="line">    zval              properties_table[<span class="number">1</span>]<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure><p>可以看到现在这个结构体几乎就是一个对象的全部内容了：<code>zend_object_value</code> 已经被替换成一个直接指向对象和对象存储的指针，虽然没有完全移除，但已经是很大的提升了。</p><p>除了 PHP7 中惯用的 <code>zend_refcounted</code> 头以外，<code>handle</code> 和 对象的 <code>handlers</code> 现在也被放到了 <code>zend_object</code> 中。这里的 <code>properties_table</code> 同样用到了 C 结构体的小技巧，这样 <code>zend_object</code> 和属性表就会得到一整块内存。当然，现在属性表是直接嵌入到 zval 中的而不是指针。</p><p>现在对象结构体中没有了 <code>guards</code> 表，现在如果需要的话这个字段的值会被存储在 <code>properties_table</code> 的第一位中，也就是使用 <code>__get</code> 等方法的时候。不过如果没有使用魔术方法的话，guards 表会被省略。</p><p><code>dtor</code>、<code>free_storage</code>  和  <code>clone</code> 三个操作句柄之前是存储在对象操作 bucket 中，现在直接存在 <code>handlers</code> 表中，其结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_object_handlers</span> &#123;</span></div><div class="line">    <span class="comment">/* offset of real object header (usually zero) */</span></div><div class="line">    <span class="keyword">int</span>                                     offset;</div><div class="line">    <span class="comment">/* general object functions */</span></div><div class="line">    <span class="keyword">zend_object_free_obj_t</span>                  free_obj;</div><div class="line">    <span class="keyword">zend_object_dtor_obj_t</span>                  dtor_obj;</div><div class="line">    <span class="keyword">zend_object_clone_obj_t</span>                 clone_obj;</div><div class="line">    <span class="comment">/* individual object functions */</span></div><div class="line">    <span class="comment">// ... rest is about the same in PHP 5</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>handler 表的第一个成员是 <code>offset</code>，很显然这不是一个操作句柄。这个 offset 是现在的实现中必须存在的，因为虽然内部的对象总是嵌入到标准的 <code>zend_object</code> 中，但是也总会有添加一些成员进去的需求。在 PHP5 中解决这个问题的方法是添加一些内容到标准的对象后面：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">custom_object</span> &#123;</span></div><div class="line">    zend_object <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">uint32_t</span> something;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这样如果你可以轻易的将 <code>zend_object*</code> 添加到 <code>struct custom_object*</code> 中。这也是 C 语言中常用的结构体继承的做法。但是在 PHP7 中这种实现会有一个问题：因为 <code>zend_object</code> 在存储属性表时用了结构体 hack 的技巧，<code>zend_object</code> 尾部存储的 PHP 属性会覆盖掉后续添加进去的内部成员。所以 PHP7 的实现中会把自己添加的成员添加到标准对象结构的前面：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">custom_object</span> &#123;</span></div><div class="line">    <span class="keyword">uint32_t</span> something;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    zend_object <span class="built_in">std</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>不过这样也就意味着现在无法直接在 <code>zend_object*</code> 和 <code>struct custom_object*</code> 进行简单的转换了，因为两者都一个偏移分割开了。所以这个偏移量就需要被存储在对象 handler 表中的第一个元素中，这样在编译时通过 <code>offsetof()</code> 宏就能确定具体的偏移值。</p><p>也许你会好奇既然现在已经直接（在 <code>zend_value</code> 中）存储了 <code>zend_object</code> 的指针，那现在就不需要再到对象存储中去查找对象了，为什么 PHP7 的对象者还保留着 <code>handle</code> 字段呢？</p><p>这是因为现在对象存储仍然存在，虽然得到了极大的简化，所以保留 handle 仍然是有必要的。现在它只是一个指向对象的指针数组。当对象被创建时，会有一个指针插入到对象存储中并且其索引会保存在 <code>handle</code> 中，当对象被释放时，索引也会被移除。</p><p>那么为什么现在还需要对象存储呢？因为在请求结束的阶段会在存在某个节点，在这之后再去执行用户代码并且取指针数据时就不安全了。为了避免这种情况出现 PHP 会在更早的节点上执行所有对象的析构函数并且之后就不再有此类操作，所以就需要一个活跃对象的列表。</p><p>并且 handle 对于调试也是很有用的，它让每个对象都有了一个唯一的 ID，这样就很容易区分两个对象是同一个还是只是有相同的内容。虽然 HHVM 没有对象存储的概念，但它也存了对象的 handle。</p><p>和 PHP5 相比，现在的实现中只有一个引用计数（zval 自身不计数），并且内存的使用量有了很大的缩减：40 个字节用于基础对象，每个属性需要 16 个字节，并且这还是算了 zval 之后的。间接访问的情况也有了显著的改善，因为现在中间层的结构体要么被去掉了，要么就是直接嵌入的，所以现在读取一个属性只有一层访问而不再是四层。</p><h2 id="间接-zval"><a href="#间接-zval" class="headerlink" title="间接 zval"></a>间接 zval</h2><p>到现在我们已经基本提到过了所有正常的 zval 类型，但是也有一对特殊类型用于某些特定的情况的，其中之一就是 PHP7 新添加的 <code>IS_INDIRECT</code>。</p><p>间接 zval 指的就是其真正的值是存储在其他地方的。注意这个 <code>IS_REFERENCE</code> 类型是不同的，间接 zval 是直接指向另外一个 zval 而不是像 <code>zend_reference</code> 结构体一样嵌入 zval。</p><p>为了理解在什么时候会出现这种情况，我们来看一下 PHP 中变量的实现（实际上对象属性的存储也是一样的情况）。</p><p>所有在编译过程中已知的变量都会被指定一个索引并且其值会被存在编译变量（CV）表的相应位置中。但是 PHP 也允许你动态的引用变量，不管是局部变量还是全局变量（比如 <code>$GLOBALS</code>），只要出现这种情况，PHP 就会为脚本或者函数创建一个符号表，这其中包含了变量名和它们的值之间的映射关系。</p><p>但是问题在于：怎么样才能实现两个表的同时访问呢？我们需要在 CV 表中能够访问普通变量，也需要能在符号表中访问编译变量。在 PHP5 中 CV 表用了双重指针 <code>zval**</code>，通常这些指针指向中间的 <code>zval*</code> 的表，<code>zval*</code> 最终指向的才是实际的 zval:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+------ CV_ptr_ptr[0]</div><div class="line">|<span class="string"> +---- CV_ptr_ptr[1]</span></div><div class="line">|<span class="string"> </span>|<span class="string"> +-- CV_ptr_ptr[2]</span></div><div class="line">|<span class="string"> </span>|<span class="string"> </span>|</div><div class="line">|<span class="string"> </span>|<span class="string"> +-&gt; CV_ptr[0] --&gt; some zval</span></div><div class="line">|<span class="string"> +---&gt; CV_ptr[1] --&gt; some zval</span></div><div class="line"><span class="string">+-----&gt; CV_ptr[2] --&gt; some zval</span></div></pre></td></tr></table></figure><p>当需要使用符号表时存储 <code>zval*</code> 的中间表其实是没有用到的而 <code>zval**</code> 指针会被更新到 hashtable buckets 的响应位置中。我们假定有 <code>$a</code>、<code>$b</code> 和 <code>$c</code> 三个变量，下面是简单的示意图：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CV_<span class="function"><span class="title">ptr_ptr</span>[0] --&gt;</span> S<span class="function"><span class="title">ymbolTable</span>["a"].pDataPtr --&gt;</span> some zval</div><div class="line">CV_<span class="function"><span class="title">ptr_ptr</span>[1] --&gt;</span> S<span class="function"><span class="title">ymbolTable</span>["b"].pDataPtr --&gt;</span> some zval</div><div class="line">CV_<span class="function"><span class="title">ptr_ptr</span>[2] --&gt;</span> S<span class="function"><span class="title">ymbolTable</span>["c"].pDataPtr --&gt;</span> some zval</div></pre></td></tr></table></figure><p>但是 PHP7 的用法中已经没有这个问题了，因为 PHP7 中的 hashtable 大小发生变化时 hashtable bucket 就失效了。所以 PHP7 用了一个相反的策略：为了访问 CV 表中存储的变量，符号表中存储 <code>INDIRECT</code> 来指向 CV 表。CV 表在符号表的生命周期内不会重新分配，所以也就不会存在有无效指针的问题了。</p><p>所以加入你有一个函数并且在 CV 表中有 <code>$a</code>、<code>$b</code> 和 <code>$c</code>，同时还有一个动态分配的变量 <code>$d</code>，符号表的结构看起来大概就是这个样子：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">SymbolTable</span>[<span class="string">"a"</span>].<span class="keyword">value</span> = <span class="type">INDIRECT</span> --&gt; <span class="type">CV</span>[<span class="number">0</span>] = <span class="type">LONG</span> <span class="number">42</span></div><div class="line"><span class="type">SymbolTable</span>[<span class="string">"b"</span>].<span class="keyword">value</span> = <span class="type">INDIRECT</span> --&gt; <span class="type">CV</span>[<span class="number">1</span>] = <span class="type">DOUBLE</span> <span class="number">42.0</span></div><div class="line"><span class="type">SymbolTable</span>[<span class="string">"c"</span>].<span class="keyword">value</span> = <span class="type">INDIRECT</span> --&gt; <span class="type">CV</span>[<span class="number">2</span>] = <span class="type">STRING</span> --&gt; zend_string(<span class="string">"42"</span>)</div><div class="line"><span class="type">SymbolTable</span>[<span class="string">"d"</span>].<span class="keyword">value</span> = <span class="type">ARRAY</span> --&gt; zend_array([<span class="number">4</span>, <span class="number">2</span>])</div></pre></td></tr></table></figure><p>间接 zval 也可以是一个指向 <code>IS_UNDEF</code> 类型 zval 的指针，当 hashtable 没有和它关联的 key 时就会出现这种情况。所以当使用 <code>unset($a)</code> 将 <code>CV[0]</code> 的类型标记为 <code>UNDEF</code> 时就会判定符号表不存在键值为 <code>a</code> 的数据。</p><h2 id="常量和-AST"><a href="#常量和-AST" class="headerlink" title="常量和 AST"></a>常量和 AST</h2><p>还有两个需要说一下的在 PHP5 和 PHP7 中都存在的特殊类型 <code>IS_CONSTANT</code> 和 <code>IS_CONSTANT_AST</code>。要了解他们我们还是先看以下的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($a = ANSWER,</span></span></div><div class="line"><span class="function"><span class="params">              $b = ANSWER * ANSWER)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $a + $b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">define(<span class="string">'ANSWER'</span>, <span class="number">42</span>);</div><div class="line">var_dump(test()); <span class="comment">// int(42 + 42 * 42)·</span></div></pre></td></tr></table></figure><p><code>test()</code> 函数的两个参数的默认值都是由常量 <code>ANSWER</code>构成，但是函数声明时常量的值尚未定义。常量的具体值只有通过 <code>define()</code> 定义时才知道。</p><p>由于以上问题的存在，参数和属性的默认值、常量以及其他接受『静态表达式』的东西都支持『延时绑定』直到首次使用时。</p><p>常量（或者类的静态属性）这些需要『延时绑定』的数据就是最常需要用到 <code>IS_CONSTANT</code> 类型 zval 的地方。如果这个值是表达式，就会使用 <code>IS_CONSTANT_AST</code> 类型的 zval 指向表达式的抽象语法树（AST）。</p><p>到这里我们就结束了对 PHP7 中变量实现的分析。后面我可能还会写两篇文章来介绍一些虚拟机优化、新的命名约定以及一些编译器基础结构的优化的内容（这是作者原话）。</p><p><em>译者注：两篇文章篇幅较长，翻译中可能有疏漏或不正确的地方，如果发现了请及时指正。</em></p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PHP7扩展开发官方译文[1]</title>
    <link href="//www.zwting.com/2017/08/28/Internal-value-representation-in-PHP-7-part-1/"/>
    <id>//www.zwting.com/2017/08/28/Internal-value-representation-in-PHP-7-part-1/</id>
    <published>2017-08-28T07:51:59.000Z</published>
    <updated>2017-08-30T06:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文第一部分和第二均翻译自Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 的<a href="http://nikic.github.io/" target="_blank" rel="external">博客</a>。为了更符合汉语的阅读习惯，文中并不会逐字逐句的翻译。</em></p><p><em>要理解本文，你应该对 PHP5 中变量的实现有了一些了解，本文重点在于解释 PHP7 中 zval 的变化。</em></p><p>由于大量的细节描述，本文将会分成两个部分：第一部分主要描述 zval(zend value) 的实现在 PHP5 和 PHP7 中有何不同以及引用的实现。第二部分将会分析单独类型（strings、objects）的细节。</p><h2 id="PHP5-中的-zval"><a href="#PHP5-中的-zval" class="headerlink" title="PHP5 中的 zval"></a>PHP5 中的 zval</h2><p>PHP5 中 zval 结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></div><div class="line">    zvalue_value value;</div><div class="line">    zend_uint refcount__gc;</div><div class="line">    zend_uchar type;</div><div class="line">    zend_uchar is_ref__gc;</div><div class="line">&#125; zval;</div></pre></td></tr></table></figure><p>如上，zval 包含一个 <code>value</code>、一个 <code>type</code> 以及两个 <code>__gc</code> 后缀的字段。<code>value</code> 是个联合体，用于存储不同类型的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</div><div class="line">    <span class="keyword">long</span> lval;                 <span class="comment">// 用于 bool 类型、整型和资源类型</span></div><div class="line">    <span class="keyword">double</span> dval;               <span class="comment">// 用于浮点类型</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span>                   <span class="comment">// 用于字符串</span></div><div class="line">        <span class="keyword">char</span> *val;</div><div class="line">        <span class="keyword">int</span> len;</div><div class="line">    &#125; str;</div><div class="line">    HashTable *ht;             <span class="comment">// 用于数组</span></div><div class="line">    zend_object_value obj;     <span class="comment">// 用于对象</span></div><div class="line">    zend_ast *ast;             <span class="comment">// 用于常量表达式(PHP5.6 才有)</span></div><div class="line">&#125; zvalue_value;</div></pre></td></tr></table></figure><p>C 语言联合体的特征是一次只有一个成员是有效的并且分配的内存与需要内存最多的成员匹配（也要考虑内存对齐）。所有成员都存储在内存的同一个位置，根据需要存储不同的值。当你需要 <code>lval</code> 的时候，它存储的是有符号整形，需要 <code>dval</code> 时，会存储双精度浮点数。</p><p>需要指出的是是联合体中当前存储的数据类型会记录到 <code>type</code> 字段，用一个整型来标记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_NULL     0      <span class="comment">/* Doesn't use value */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_LONG     1      <span class="comment">/* Uses lval */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DOUBLE   2      <span class="comment">/* Uses dval */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_BOOL     3      <span class="comment">/* Uses lval with values 0 and 1 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ARRAY    4      <span class="comment">/* Uses ht */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_OBJECT   5      <span class="comment">/* Uses obj */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STRING   6      <span class="comment">/* Uses str */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_RESOURCE 7      <span class="comment">/* Uses lval, which is the resource ID */</span></span></div><div class="line"></div><div class="line"><span class="comment">/* Special types used for late-binding of constants */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT 8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT_AST 9</span></div></pre></td></tr></table></figure><h2 id="PHP5-中的引用计数"><a href="#PHP5-中的引用计数" class="headerlink" title="PHP5 中的引用计数"></a>PHP5 中的引用计数</h2><p>在PHP5中，zval 的内存是单独从堆（heap）中分配的（有少数例外情况），PHP 需要知道哪些 zval 是正在使用的，哪些是需要释放的。所以这就需要用到引用计数：zval 中 <code>refcount__gc</code> 的值用于保存 zval 本身被引用的次数，比如 <code>$a = $b = 42</code> 语句中，<code>42</code> 被两个变量引用，所以它的引用计数就是 2。如果引用计数变成 0，就意味着这个变量已经没有用了，内存也就可以释放了。</p><p>注意这里提及到的引用计数指的不是 PHP 代码中的引用（使用 <code>&amp;</code>），而是变量的使用次数。后面两者需要同时出现时会使用『PHP 引用』和『引用』来区分两个概念，这里先忽略掉 PHP 的部分。</p><p>一个和引用计数紧密相关的概念是『写时复制』：对于多个引用来说，zaval 只有在没有变化的情况下才是共享的，一旦其中一个引用改变 zval 的值，就需要复制（”separated”）一份 zval，然后修改复制后的 zval。</p><p>下面是一个关于『写时复制』和 zval 的销毁的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">42</span>;   <span class="comment">// $a         -&gt; zval_1(type=IS_LONG, value=42, refcount=1)</span></div><div class="line">$b = $a;   <span class="comment">// $a, $b     -&gt; zval_1(type=IS_LONG, value=42, refcount=2)</span></div><div class="line">$c = $b;   <span class="comment">// $a, $b, $c -&gt; zval_1(type=IS_LONG, value=42, refcount=3)</span></div><div class="line"></div><div class="line"><span class="comment">// 下面几行是关于 zval 分离的</span></div><div class="line">$a += <span class="number">1</span>;   <span class="comment">// $b, $c -&gt; zval_1(type=IS_LONG, value=42, refcount=2)</span></div><div class="line">           <span class="comment">// $a     -&gt; zval_2(type=IS_LONG, value=43, refcount=1)</span></div><div class="line"></div><div class="line"><span class="keyword">unset</span>($b); <span class="comment">// $c -&gt; zval_1(type=IS_LONG, value=42, refcount=1)</span></div><div class="line">           <span class="comment">// $a -&gt; zval_2(type=IS_LONG, value=43, refcount=1)</span></div><div class="line"></div><div class="line"><span class="keyword">unset</span>($c); <span class="comment">// zval_1 is destroyed, because refcount=0</span></div><div class="line">           <span class="comment">// $a -&gt; zval_2(type=IS_LONG, value=43, refcount=1)</span></div></pre></td></tr></table></figure><p>引用计数有个致命的问题：无法检查并释放<a href="http://derickrethans.nl/circular-references.html" target="_blank" rel="external">循环引用</a>（使用的内存）。为了解决这问题，PHP 使用了<a href="http://php.net/manual/zh/features.gc.collecting-cycles.php" target="_blank" rel="external">循环回收</a>的方法。当一个 zval 的计数减一时，就有可能属于循环的一部分，这时将 zval 写入到『根缓冲区』中。当缓冲区满时，潜在的循环会被打上标记并进行回收。</p><p>因为要支持循环回收，实际使用的 zval 的结构实际上如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_gc_info</span> &#123;</span></div><div class="line">    zval z;</div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        gc_root_buffer       *buffered;</div><div class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">zval_gc_info</span> *<span class="title">next</span>;</span></div><div class="line">    &#125; u;</div><div class="line">&#125; zval_gc_info;</div></pre></td></tr></table></figure><p><code>zval_gc_info</code> 结构体中嵌入了一个正常的 zval 结构，同时也增加了两个指针参数，但是共属于同一个联合体 <code>u</code>，所以实际使用中只有一个指针是有用的。<code>buffered</code> 指针用于存储 zval 在根缓冲区的引用地址，所以如果在循环回收执行之前 zval 已经被销毁了，这个字段就可能被移除了。<code>next</code> 在回收销毁值的时候使用，这里不会深入。</p><h2 id="修改动机"><a href="#修改动机" class="headerlink" title="修改动机"></a>修改动机</h2><p>下面说说关于内存使用上的情况，这里说的都是指在 64 位的系统上。首先，由于 <code>str</code> 和 <code>obj</code> 占用的大小一样， <code>zvalue_value</code> 这个联合体占用 16 个字节（bytes）的内存。整个 <code>zval</code> 结构体占用的内存是 24 个字节（考虑到内存对齐），<code>zval_gc_info</code> 的大小是 32 个字节。综上，在堆（相对于栈）分配给 zval 的内存需要额外的 16 个字节，所以每个 zval 在不同的地方一共需要用到 48 个字节（要理解上面的计算方式需要注意每个指针在 64 位的系统上也需要占用 8 个字节）。</p><p>在这点上不管从什么方面去考虑都可以认为 zval 的这种设计效率是很低的。比如 zval 在存储整型的时候本身只需要 8 个字节，即使考虑到需要存一些附加信息以及内存对齐，额外 8 个字节应该也是足够的。</p><p>在存储整型时本来确实需要 16 个字节，但是实际上还有 16 个字节用于引用计数、16 个字节用于循环回收。所以说 zval 的内存分配和释放都是消耗很大的操作，我们有必要对其进行优化。</p><p>从这个角度思考：一个整型数据真的需要存储引用计数、循环回收的信息并且单独在堆上分配内存吗？答案是当然不，这种处理方式一点都不好。</p><p>这里总结一下 PHP5 中 zval 实现方式存在的主要问题：</p><ul><li>zval 总是单独从堆中分配内存；</li><li>zval 总是存储引用计数和循环回收的信息，即使是整型这种可能并不需要此类信息的数据；</li><li>在使用对象或者资源时，直接引用会导致两次计数（原因会在下一部分讲）；</li><li>某些间接访问需要一个更好的处理方式。比如现在访问存储在变量中的对象间接使用了四个指针（指针链的长度为四）。这个问题也放到下一部分讨论；</li><li>直接计数也就意味着数值只能在 zval 之间共享。如果想在 zval 和 hashtable key 之间共享一个字符串就不行（除非 hashtable key 也是 zval）。</li></ul><h2 id="PHP7-中的-zval"><a href="#PHP7-中的-zval" class="headerlink" title="PHP7 中的 zval"></a>PHP7 中的 zval</h2><p>在 PHP7 中 zval 有了新的实现方式。最基础的变化就是 zval 需要的内存不再是单独从堆上分配，不再自己存储引用计数。复杂数据类型（比如字符串、数组和对象）的引用计数由其自身来存储。这种实现方式有以下好处：</p><ul><li>简单数据类型不需要单独分配内存，也不需要计数；</li><li>不会再有两次计数的情况。在对象中，只有对象自身存储的计数是有效的；</li><li>由于现在计数由数值自身存储，所以也就可以和非 zval 结构的数据共享，比如 zval 和 hashtable key 之间；</li><li>间接访问需要的指针数减少了。</li></ul><p>我们看看现在 zval 结构体的定义（现在在 zend_types.h 文件中）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></div><div class="line">zend_value        value;<span class="comment">/* value */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    type,<span class="comment">/* active type */</span></div><div class="line">zend_uchar    type_flags,</div><div class="line">zend_uchar    const_flags,</div><div class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u1;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span>     var_flags;</div><div class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></div><div class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></div><div class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></div><div class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></div><div class="line">&#125; u2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>结构体的第一个元素没太大变化，仍然是一个 <code>value</code> 联合体。第二个成员是由一个表示类型信息的整型和一个包含四个字符变量的结构体组成的联合体（可以忽略 <code>ZEND_ENDIAN_LOHI_4</code> 宏，它只是用来解决跨平台大小端问题的）。这个子结构中比较重要的部分是 <code>type</code>（和以前类似）和 <code>type_flags</code>，这个接下来会解释。</p><p>上面这个地方也有一点小问题：<code>value</code> 本来应该占 8 个字节，但是由于内存对齐，哪怕只增加一个字节，实际上也是占用 16 个字节（使用一个字节就意味着需要额外的 8 个字节）。但是显然我们并不需要 8 个字节来存储一个 type 字段，所以我们在 <code>u1</code> 的后面增加了了一个名为 <code>u2</code> 的联合体。默认情况下是用不到的，需要使用的时候可以用来存储 4 个字节的数据。这个联合体可以满足不同场景下的需求。</p><p>PHP7 中 <code>value</code> 的结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">zend_long         lval;<span class="comment">/* long value */</span></div><div class="line"><span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></div><div class="line">zend_refcounted  *counted;</div><div class="line">zend_string      *str;</div><div class="line">zend_array       *arr;</div><div class="line">zend_object      *obj;</div><div class="line">zend_resource    *res;</div><div class="line">zend_reference   *ref;</div><div class="line">zend_ast_ref     *ast;</div><div class="line">zval             *zv;</div><div class="line"><span class="keyword">void</span>             *ptr;</div><div class="line">zend_class_entry *ce;</div><div class="line">zend_function    *func;</div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">uint32_t</span> w1;</div><div class="line"><span class="keyword">uint32_t</span> w2;</div><div class="line">&#125; ww;</div><div class="line">&#125; zend_value;</div></pre></td></tr></table></figure><p>首先需要注意的是现在 value 联合体需要的内存是 8 个字节而不是 16。它只会直接存储整型（<code>lval</code>）或者浮点型（<code>dval</code>）数据，其他情况下都是指针（上面提到过，指针占用 8 个字节，最下面的结构体由两个 4 字节的无符号整型组成）。上面所有的指针类型（除了特殊标记的）都有一个同样的头（<code>zend_refcounted</code>）用来存储引用计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_refcounted_h</span> &#123;</span></div><div class="line"><span class="keyword">uint32_t</span>         refcount;<span class="comment">/* reference counter 32-bit */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">ZEND_ENDIAN_LOHI_3(</div><div class="line">zend_uchar    type,</div><div class="line">zend_uchar    flags,    <span class="comment">/* used for strings &amp; objects */</span></div><div class="line"><span class="keyword">uint16_t</span>      gc_info)  <span class="comment">/* keeps GC root number (or 0) and color */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u;</div><div class="line">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure><p>现在，这个结构体肯定会包含一个存储引用计数的字段。除此之外还有 <code>type</code>、<code>flags</code> 和 <code>gc_info</code>。<code>type</code> 存储的和 zval 中的 type 相同的内容，这样 GC 在不存储 zval 的情况下单独使用引用计数。<code>flags</code> 在不同的数据类型中有不同的用途，这个放到下一部分讲。</p><p><code>gc_info</code> 和 PHP5 中的 <code>buffered</code> 作用相同，不过不再是位于根缓冲区的指针，而是一个索引数字。因为以前根缓冲区的大小是固定的（10000 个元素），所以使用一个 16 位（2 字节）的数字代替 64 位（8 字节）的指针足够了。<code>gc_info</code> 中同样包含一个『颜色』位用于回收时标记结点。</p><h2 id="zval-内存管理"><a href="#zval-内存管理" class="headerlink" title="zval 内存管理"></a>zval 内存管理</h2><p>上文提到过 zval 需要的内存不再单独从堆上分配。但是显然总要有地方来存储它，所以会存在哪里呢？实际上大多时候它还是位于堆中（所以前文中提到的地方重点不是<code>堆</code>，而是<code>单独分配</code>），只不过是嵌入到其他的数据结构中的，比如 hashtable 和 bucket 现在就会直接有一个 zval 字段而不是指针。所以函数表编译变量和对象属性在存储时会是一个 zval 数组并得到一整块内存而不是散落在各处的 zval 指针。之前的 <code>zval *</code> 现在都变成了 <code>zval</code>。</p><p>之前当 zval 在一个新的地方使用时会复制一份 <code>zval *</code> 并增加一次引用计数。现在就直接复制 zval 的值（忽略 <code>u2</code>），某些情况下<em>可能</em>会增加其结构指针指向的引用计数（如果在进行计数）。</p><p>那么 PHP 怎么知道 zval 是否正在计数呢？不是所有的数据类型都能知道，因为有些类型（比如字符串或数组）并不是总需要进行引用计数。所以 <code>type_info</code> 字段就是用来记录 zval 是否在进行计数的，这个字段的值有以下几种情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_CONSTANT            (1&lt;&lt;0)   <span class="comment">/* special */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_IMMUTABLE           (1&lt;&lt;1)   <span class="comment">/* special */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_REFCOUNTED          (1&lt;&lt;2)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_COLLECTABLE         (1&lt;&lt;3)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_COPYABLE            (1&lt;&lt;4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TYPE_SYMBOLTABLE         (1&lt;&lt;5)   <span class="comment">/* special */</span></span></div></pre></td></tr></table></figure><p><em>注：在 7.0.0 的正式版本中，上面这一段宏定义的注释这几个宏是供 <code>zval.u1.v.type_flags</code> 使用的。这应该是注释的错误，因为这个上述字段是 <code>zend_uchar</code> 类型。</em></p><p><code>type_info</code> 的三个主要的属性就是『可计数』（refcounted）、『可回收』（collectable）和『可复制』（copyable）。计数的问题上面已经提过了。『可回收』用于标记 zval 是否参与循环，不如字符串通常是可计数的，但是你却没办法给字符串制造一个循环引用的情况。</p><p>是否可复制用于表示在复制时是否需要在复制时制造（原文用的 “duplication” 来表述，用中文表达出来可能不是很好理解）一份一模一样的实体。”duplication” 属于深度复制，比如在复制数组时，不仅仅是简单增加数组的引用计数，而是制造一份全新值一样的数组。但是某些类型（比如对象和资源）即使 “duplication” 也只能是增加引用计数，这种就属于不可复制的类型。这也和对象和资源现有的语义匹配（现有，PHP7 也是这样，不单是 PHP5）。</p><p>下面的表格上标明了不同的类型会使用哪些标记（<code>x</code> 标记的都是有的特性）。『简单类型』（simple types）指的是整型或布尔类型这些不使用指针指向一个结构体的类型。下表中也有『不可变』（immutable）的标记，它用来标记不可变数组的，这个在下一部分再详述。</p><p><em>interned string（保留字符）在这之前没有提过，其实就是函数名、变量名等无需计数、不可重复的字符串。</em></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">                |<span class="string"> refcounted </span>|<span class="string"> collectable </span>|<span class="string"> copyable </span>|<span class="string"> immutable</span></div><div class="line"><span class="string">----------------+------------+-------------+----------+----------</span></div><div class="line"><span class="string">simple types    </span>|<span class="string">            </span>|<span class="string">             </span>|<span class="string">          </span>|</div><div class="line">string          |<span class="string">      x     </span>|<span class="string">             </span>|<span class="string">     x    </span>|</div><div class="line">interned string |<span class="string">            </span>|<span class="string">             </span>|<span class="string">          </span>|</div><div class="line">array           |<span class="string">      x     </span>|<span class="string">      x      </span>|<span class="string">     x    </span>|</div><div class="line">immutable array |<span class="string">            </span>|<span class="string">             </span>|<span class="string">          </span>|<span class="string">     x</span></div><div class="line"><span class="string">object          </span>|<span class="string">      x     </span>|<span class="string">      x      </span>|<span class="string">          </span>|</div><div class="line">resource        |<span class="string">      x     </span>|<span class="string">             </span>|<span class="string">          </span>|</div><div class="line">reference       |<span class="string">      x     </span>|<span class="string">             </span>|<span class="string">          </span>|</div></pre></td></tr></table></figure><p>要理解这一点，我们可以来看几个例子，这样可以更好的认识 zval 内存管理是怎么工作的。</p><p>下面是整数行为模式，在上文中 PHP5 的例子的基础上进行了一些简化 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">42</span>;   <span class="comment">// $a = zval_1(type=IS_LONG, value=42)</span></div><div class="line"></div><div class="line">$b = $a;   <span class="comment">// $a = zval_1(type=IS_LONG, value=42)</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_LONG, value=42)</span></div><div class="line"></div><div class="line">$a += <span class="number">1</span>;   <span class="comment">// $a = zval_1(type=IS_LONG, value=43)</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_LONG, value=42)</span></div><div class="line"></div><div class="line"><span class="keyword">unset</span>($a); <span class="comment">// $a = zval_1(type=IS_UNDEF)</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_LONG, value=42)</span></div></pre></td></tr></table></figure><p>这个过程其实挺简单的。现在整数不再是共享的，变量直接就会分离成两个单独的 zval，由于现在 zval 是内嵌的所以也不需要单独分配内存，所以这里的注释中使用 <code>=</code> 来表示的而不是指针符号 <code>-&gt;</code>，unset 时变量会被标记为 <code>IS_UNDEF</code>。下面看一下更复杂的情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = [];   <span class="comment">// $a = zval_1(type=IS_ARRAY) -&gt; zend_array_1(refcount=1, value=[])</span></div><div class="line"></div><div class="line">$b = $a;   <span class="comment">// $a = zval_1(type=IS_ARRAY) -&gt; zend_array_1(refcount=2, value=[])</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_ARRAY) ---^</span></div><div class="line"></div><div class="line"><span class="comment">// zval 分离在这里进行</span></div><div class="line">$a[] = <span class="number">1</span>   <span class="comment">// $a = zval_1(type=IS_ARRAY) -&gt; zend_array_2(refcount=1, value=[1])</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_ARRAY) -&gt; zend_array_1(refcount=1, value=[])</span></div><div class="line"></div><div class="line"><span class="keyword">unset</span>($a); <span class="comment">// $a = zval_1(type=IS_UNDEF),   zend_array_2 被销毁</span></div><div class="line">           <span class="comment">// $b = zval_2(type=IS_ARRAY) -&gt; zend_array_1(refcount=1, value=[])</span></div></pre></td></tr></table></figure><p>这种情况下每个变量变量有一个单独的 zval，但是是指向同一个（有引用计数） <code>zend_array</code> 的结构体。修改其中一个数组的值时才会进行复制。这点和 PHP5 的情况类似。</p><h2 id="类型（Types）"><a href="#类型（Types）" class="headerlink" title="类型（Types）"></a>类型（Types）</h2><p>我们大概看一下 PHP7 支持哪些类型（zval 使用的类型标记）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* regular data types */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_UNDEF0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_NULL1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_FALSE2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TRUE3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_LONG4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DOUBLE5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STRING6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ARRAY7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_OBJECT8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_RESOURCE9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_REFERENCE10</span></div><div class="line"></div><div class="line"><span class="comment">/* constant expressions */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT11</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT_AST12</span></div><div class="line"></div><div class="line"><span class="comment">/* internal types */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_INDIRECT15</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_PTR17</span></div></pre></td></tr></table></figure><p>这个列表和 PHP5 使用的类似，不过增加了几项：</p><ul><li><code>IS_UNDEF</code> 用来标记之前为 <code>NULL</code> 的 zval 指针（和 <code>IS_NULL</code> 并不冲突）。比如在上面的例子中使用 <code>unset</code> 注销变量；</li><li><code>IS_BOOL</code> 现在分割成了 <code>IS_FALSE</code> 和 <code>IS_TRUE</code> 两项。现在布尔类型的标记是直接记录到 type 中，这么做可以优化类型检查。不过这个变化对用户是透明的，还是只有一个『布尔』类型的数据（PHP 脚本中）。</li><li>PHP 引用不再使用 <code>is_ref</code> 来标记，而是使用 <code>IS_REFERENCE</code> 类型。这个也要放到下一部分讲；</li><li><code>IS_INDIRECT</code>  和  <code>IS_PTR</code> 是特殊的内部标记。</li></ul><p><em>实际上上面的列表中应该还存在两个 fake types，这里忽略了。</em></p><p><code>IS_LONG</code> 类型表示的是一个 <code>zend_long</code> 的值，而不是原生的 C 语言的 long 类型。原因是 Windows 的 64 位系统（LLP64）上的 <code>long</code> 类型只有 32 位的位深度。所以 PHP5 在 Windows 上只能使用 32 位的数字。PHP7 允许你在 64 位的操作系统上使用 64 位的数字，即使是在 Windows 上面也可以。</p><p><code>zend_refcounted</code> 的内容会在下一部分讲。下面看看 PHP 引用的实现。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>PHP7 使用了和 PHP5 中完全不同的方法来处理 PHP <code>&amp;</code> 符号引用的问题（这个改动也是 PHP7 开发过程中大量 bug 的根源）。我们先从 PHP5 中 PHP 引用的实现方式说起。</p><p>通常情况下， 写时复制原则意味着当你修改一个 zval 之前需要对其进行分离来保证始终修改的只是某一个 PHP 变量的值。这就是传值调用的含义。</p><p>但是使用 PHP 引用时这条规则就不适用了。如果一个 PHP 变量是 PHP 引用，就意味着你<em>想要</em>在将多个 PHP 变量指向同一个值。PHP5 中的 <code>is_ref</code> 标记就是用来注明一个 PHP 变量是不是 PHP 引用，在修改时需不需要进行分离的。比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = [];  <span class="comment">// $a     -&gt; zval_1(type=IS_ARRAY, refcount=1, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line">$b =&amp; $a; <span class="comment">// $a, $b -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=1) -&gt; HashTable_1(value=[])</span></div><div class="line"></div><div class="line">$b[] = <span class="number">1</span>; <span class="comment">// $a = $b = zval_1(type=IS_ARRAY, refcount=2, is_ref=1) -&gt; HashTable_1(value=[1])</span></div><div class="line">          <span class="comment">// 因为 is_ref 的值是 1, 所以 PHP 不会对 zval 进行分离</span></div></pre></td></tr></table></figure><p>但是这个设计的一个很大的问题在于它无法在一个 PHP 引用变量和 PHP 非引用变量之间共享同一个值。比如下面这种情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = [];  <span class="comment">// $a         -&gt; zval_1(type=IS_ARRAY, refcount=1, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line">$b = $a;  <span class="comment">// $a, $b     -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line">$c = $b   <span class="comment">// $a, $b, $c -&gt; zval_1(type=IS_ARRAY, refcount=3, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line"></div><div class="line">$d =&amp; $c; <span class="comment">// $a, $b -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line">          <span class="comment">// $c, $d -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=1) -&gt; HashTable_2(value=[])</span></div><div class="line">          <span class="comment">// $d 是 $c 的引用, 但却不是 $a 的 $b, 所以这里 zval 还是需要进行复制</span></div><div class="line">          <span class="comment">// 这样我们就有了两个 zval, 一个 is_ref 的值是 0, 一个 is_ref 的值是 1.</span></div><div class="line"></div><div class="line">$d[] = <span class="number">1</span>; <span class="comment">// $a, $b -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=0) -&gt; HashTable_1(value=[])</span></div><div class="line">          <span class="comment">// $c, $d -&gt; zval_1(type=IS_ARRAY, refcount=2, is_ref=1) -&gt; HashTable_2(value=[1])</span></div><div class="line">          <span class="comment">// 因为有两个分离了的 zval, $d[] = 1 的语句就不会修改 $a 和 $b 的值.</span></div></pre></td></tr></table></figure><p>这种行为方式也导致在 PHP 中使用引用比普通的值要慢。比如下面这个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$array = range(<span class="number">0</span>, <span class="number">1000000</span>);</div><div class="line">$ref =&amp; $array;</div><div class="line">var_dump(count($array)); <span class="comment">// &lt;-- 这里会进行分离</span></div></pre></td></tr></table></figure><p>因为 <code>count()</code> 只接受传值调用，但是 <code>$array</code> 是一个 PHP 引用，所以 <code>count()</code> 在执行之前实际上会有一个对数组进行完整的复制的过程。如果 <code>$array</code> 不是引用，这种情况就不会发生了。</p><p>现在我们来看看 PHP7 中 PHP 引用的实现。因为 zval 不再单独分配内存，也就没办法再使用和 PHP5 中相同的实现了。所以增加了一个 <code>IS_REFERENCE</code> 类型，并且专门使用 <code>zend_reference</code> 来存储引用值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_reference</span> &#123;</span></div><div class="line">    zend_refcounted   gc;</div><div class="line">    zval              val;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>本质上 <code>zend_reference</code> 只是增加了引用计数的 zval。所有引用变量都会存储一个 zval 指针并且被标记为 <code>IS_REFERENCE</code>。<code>val</code> 和其他的 zval 的行为一样，尤其是它也可以在共享其所存储的复杂变量的指针，比如数组可以在引用变量和值变量之间共享。</p><p>我们还是看例子，这次是 PHP7 中的语义。为了简洁明了这里不再单独写出 zval，只展示它们指向的结构体：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = [];  <span class="comment">// $a                                     -&gt; zend_array_1(refcount=1, value=[])</span></div><div class="line">$b =&amp; $a; <span class="comment">// $a, $b -&gt; zend_reference_1(refcount=2) -&gt; zend_array_1(refcount=1, value=[])</span></div><div class="line"></div><div class="line">$b[] = <span class="number">1</span>; <span class="comment">// $a, $b -&gt; zend_reference_1(refcount=2) -&gt; zend_array_1(refcount=1, value=[1])</span></div></pre></td></tr></table></figure><p>上面的例子中进行引用传递时会创建一个 <code>zend_reference</code>，注意它的引用计数是 2（因为有两个变量在使用这个 PHP 引用）。但是值本身的引用计数是 1（因为 <code>zend_reference</code> 只是有一个指针指向它）。下面看看引用和非引用混合的情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = [];  <span class="comment">// $a         -&gt; zend_array_1(refcount=1, value=[])</span></div><div class="line">$b = $a;  <span class="comment">// $a, $b,    -&gt; zend_array_1(refcount=2, value=[])</span></div><div class="line">$c = $b   <span class="comment">// $a, $b, $c -&gt; zend_array_1(refcount=3, value=[])</span></div><div class="line"></div><div class="line">$d =&amp; $c; <span class="comment">// $a, $b                                 -&gt; zend_array_1(refcount=3, value=[])</span></div><div class="line">          <span class="comment">// $c, $d -&gt; zend_reference_1(refcount=2) ---^</span></div><div class="line">          <span class="comment">// 注意所有变量共享同一个 zend_array, 即使有的是 PHP 引用有的不是</span></div><div class="line"></div><div class="line">$d[] = <span class="number">1</span>; <span class="comment">// $a, $b                                 -&gt; zend_array_1(refcount=2, value=[])</span></div><div class="line">          <span class="comment">// $c, $d -&gt; zend_reference_1(refcount=2) -&gt; zend_array_2(refcount=1, value=[1])</span></div><div class="line">          <span class="comment">// 只有在这时进行赋值的时候才会对 zend_array 进行赋值</span></div></pre></td></tr></table></figure><p>这里和 PHP5 最大的不同就是所有的变量都可以共享同一个数组，即使有的是 PHP 引用有的不是。只有当其中某一部分被修改的时候才会对数组进行分离。这也意味着使用 <code>count()</code> 时即使给其传递一个很大的引用数组也是安全的，不会再进行复制。不过引用仍然会比普通的数值慢，因为存在需要为 <code>zend_reference</code> 结构体分配内存（间接）并且引擎本身处理这一块儿也不快的的原因。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总结一下 PHP7 中最重要的改变就是 zval 不再单独从堆上分配内存并且不自己存储引用计数。需要使用 zval 指针的复杂类型（比如字符串、数组和对象）会自己存储引用计数。这样就可以有更少的内存分配操作、更少的间接指针使用以及更少的内存分配。</p><p>文章的第二部分我们会讨论复杂类型的问题。</p>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[12] autoload机制实现</title>
    <link href="//www.zwting.com/2017/08/12/2016-02-12-php-ext-12/"/>
    <id>//www.zwting.com/2017/08/12/2016-02-12-php-ext-12/</id>
    <published>2017-08-12T09:09:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">场景：实现PHP的autoload</div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">myLoader</span></span>&#123;</span></div><div class="line"><span class="php">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span></span>&#123;</span></div><div class="line"><span class="php">            $filename = <span class="string">'./include/'</span>.$className.<span class="string">'.php'</span>;</span></div><div class="line"><span class="php">            <span class="keyword">if</span>(file_exists($filename))&#123;</span></div><div class="line"><span class="php">                <span class="keyword">include_once</span> $filename;</span></div><div class="line"><span class="php">            &#125;<span class="keyword">else</span>&#123;</span></div><div class="line"><span class="php">                <span class="keyword">exit</span>(<span class="string">'no file'</span>);</span></div><div class="line"><span class="php">            &#125;</span></div><div class="line"><span class="php">        &#125;</span></div><div class="line"><span class="php">    &#125;</span></div><div class="line"><span class="php"></span></div><div class="line"><span class="php">    spl_autoload_register(<span class="keyword">array</span>(<span class="string">'myLoader'</span>, <span class="string">'autoload'</span>));</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">摘抄自yaf的代码，实现INCLUDE</span></div><div class="line"><span class="comment">**/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loader_import</span><span class="params">(<span class="keyword">char</span> *path, <span class="keyword">size_t</span> len)</span> </span>&#123;</div><div class="line"></div><div class="line">  zend_file_handle file_handle;</div><div class="line">  zend_op_array   *op_array;</div><div class="line">  <span class="keyword">char</span> realpath[<span class="number">255</span>];</div><div class="line"></div><div class="line"></div><div class="line">  file_handle.filename = path;</div><div class="line">  file_handle.free_filename = <span class="number">0</span>;</div><div class="line">  file_handle.type = ZEND_HANDLE_FILENAME;</div><div class="line">  file_handle.opened_path = <span class="literal">NULL</span>;</div><div class="line">  file_handle.handle.fp = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">  op_array = zend_compile_file(&amp;file_handle, ZEND_INCLUDE);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (op_array &amp;&amp; file_handle.handle.stream.handle) &#123;</div><div class="line">      zval dummy;</div><div class="line">      ZVAL_NULL(&amp;dummy);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!file_handle.opened_path) &#123;</div><div class="line">      file_handle.opened_path = zend_string_init(path, len, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    zend_hash_add(&amp;EG(included_files), file_handle.opened_path, &amp;dummy);</div><div class="line">  &#125;</div><div class="line">  zend_destroy_file_handle(&amp;file_handle);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (op_array) &#123;</div><div class="line">        zval result;</div><div class="line"></div><div class="line">        ZVAL_UNDEF(&amp;result);</div><div class="line">        zend_execute(op_array, &amp;result);</div><div class="line"></div><div class="line">    destroy_op_array(op_array);</div><div class="line">    efree(op_array);</div><div class="line">        <span class="keyword">if</span> (!EG(exception)) &#123;</div><div class="line">            zval_ptr_dtor(&amp;result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明构造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(doua,__construct)&#123;</div><div class="line"></div><div class="line">  zend_printf(<span class="string">"__construct\n"</span>);  </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_METHOD(doua,load)&#123;</div><div class="line"></div><div class="line"></div><div class="line">    zend_printf(<span class="string">"load\n"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    loader_import(<span class="string">"/data/work/php-7.0.5/ext/doua/2.php"</span>,<span class="built_in">strlen</span>(<span class="string">"/data/work/php-7.0.5/ext/doua/2.php"</span>));</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载view</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(doua,run)&#123;</div><div class="line"></div><div class="line"></div><div class="line">    zend_printf(<span class="string">"run\n"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//loader_import("/data/work/php-7.0.5/ext/doua/2.php",strlen("/data/work/php-7.0.5/ext/doua/2.php"));</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    zval arg;<span class="comment">//参数</span></div><div class="line">    zval * pthis = getThis();<span class="comment">//当前类</span></div><div class="line"></div><div class="line">    array_init(&amp;arg);<span class="comment">//初始化数据，</span></div><div class="line">    Z_ADDREF_P(pthis);</div><div class="line"></div><div class="line">    add_next_index_zval(&amp;arg, pthis);</div><div class="line">    add_next_index_string(&amp;arg, <span class="string">"load"</span>);</div><div class="line"> </div><div class="line">    zend_call_method_with_1_params(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">"spl_autoload_register"</span>, <span class="literal">NULL</span>, &amp;arg);</div><div class="line"></div><div class="line">    zval_ptr_dtor(&amp;arg);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry doua_functions[] = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//注册loader类中的方法</span></div><div class="line">    ZEND_ME(doua, __construct, <span class="literal">NULL</span>, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">    <span class="comment">//ZEND_ME(loader,autoload,NULL,ZEND_ACC_PUBLIC)</span></div><div class="line">    ZEND_ME(doua,run,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">    ZEND_ME(doua,load,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line"></div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in doua_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">PHP_MINIT_FUNCTION(doua)</div><div class="line">&#123;</div><div class="line">    <span class="comment">/* If you have INI entries, uncomment these lines</span></div><div class="line"><span class="comment">    REGISTER_INI_ENTRIES();</span></div><div class="line"><span class="comment">    */</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//注册loader类</span></div><div class="line">    zend_class_entry ce;</div><div class="line">    INIT_CLASS_ENTRY(ce, <span class="string">"doua"</span>, doua_functions);</div><div class="line"></div><div class="line">    doua_ce = zend_register_internal_class(&amp;ce TSRMLS_CC);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$n = <span class="keyword">new</span> doua();</div><div class="line">$n-&gt;run();</div><div class="line"></div><div class="line"></div><div class="line">$ab = <span class="keyword">new</span> abc\ab();</div><div class="line"><span class="keyword">echo</span> $ab-&gt;test(<span class="string">"test"</span>);</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[12] autoload机制实现
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[11] MVC之自动加载文件</title>
    <link href="//www.zwting.com/2017/08/11/2016-02-11-php-ext-11/"/>
    <id>//www.zwting.com/2017/08/11/2016-02-11-php-ext-11/</id>
    <published>2017-08-11T09:09:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">场景：想要用C实现PHP的一个MVC结构的路由解析和加载文件的功能，一共要解决几个问题</div><div class="line">1.由于MVC要加载多个C文件，所以要修正config.m4，修改config.m4内容第十行左右，去掉dnl,</div><div class="line">PHP_ARG_WITH(dora, <span class="keyword">for</span><span class="built_in"> route </span>support,</div><div class="line">dnl Make sure that the comment is aligned:</div><div class="line">[  --with-route             Include dora support])</div><div class="line">在下面追加到以下内容：</div><div class="line"><span class="keyword">if</span> test -z <span class="string">"<span class="variable">$PHP_DEBUG</span>"</span> ; then </div><div class="line">    AC_ARG_ENABLE(debug, [--enable-<span class="builtin-name">debug</span> compile with debugging system], [<span class="attribute">PHP_DEBUG</span>=<span class="variable">$enableval</span>],[<span class="attribute">PHP_DEBUG</span>=<span class="literal">no</span>] ) </div><div class="line">fi </div><div class="line"></div><div class="line">最后一行，加载所需所有C文件，如下：</div><div class="line">  PHP_NEW_EXTENSION(dora, dora.c common/utilts.c loader/loader.c route/route.c controller/controller.c model/model.c, <span class="variable">$ext_shared</span>,, <span class="attribute">-DZEND_ENABLE_STATIC_TSRMLS_CACHE</span>=1)</div><div class="line">  PHP_ADD_BUILD_DIR([<span class="variable">$ext_builddir</span>/common])</div><div class="line">  PHP_ADD_BUILD_DIR([<span class="variable">$ext_builddir</span>/loader])</div><div class="line">  PHP_ADD_BUILD_DIR([<span class="variable">$ext_builddir</span>/route])</div><div class="line">  PHP_ADD_BUILD_DIR([<span class="variable">$ext_builddir</span>/controller])</div><div class="line">  PHP_ADD_BUILD_DIR([<span class="variable">$ext_builddir</span>/model])</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utilts.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"php_ini.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ext/standard/info.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Zend/zend_list.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Zend/zend_interfaces.h"</span> </span></div><div class="line"></div><div class="line"><span class="comment">//执行PHP文件函数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">zend_execute_scripts_ext</span><span class="params">(<span class="keyword">char</span> *filepath)</span></span>&#123;</div><div class="line"></div><div class="line">    zval retval;</div><div class="line"></div><div class="line">    zend_file_handle zfd;</div><div class="line">    zfd.type = ZEND_HANDLE_FILENAME;</div><div class="line">    zfd.filename = filepath;</div><div class="line">    zfd.free_filename = <span class="number">0</span>;</div><div class="line">    zfd.opened_path = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">//zend_execute_scripts(int type, zval *retval, int file_count, ...);</span></div><div class="line">    <span class="comment">//FAILURE OR SUCCESS</span></div><div class="line">    <span class="keyword">return</span>  zend_execute_scripts(ZEND_INCLUDE TSRMLS_CC,&amp;retval,<span class="number">1</span>,&amp;zfd); </div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//调用类中的方法</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">call_user_class_method</span><span class="params">(zval *retval, zend_class_entry *obj_ce, </span></span></div><div class="line"><span class="function"><span class="params">                           zval *obj, zval func,  <span class="keyword">uint32_t</span> params_count, zval params[])</span></span>&#123; </div><div class="line"></div><div class="line"></div><div class="line">    HashTable *function_table; </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(obj) &#123; </div><div class="line">                function_table = &amp;Z_OBJCE_P(obj)-&gt;function_table;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                function_table = (CG(function_table));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    zend_fcall_info fci;  </div><div class="line">    fci.size = <span class="keyword">sizeof</span>(fci);  </div><div class="line">    fci.function_table = function_table;  </div><div class="line">    fci.object =  obj ? Z_OBJ_P(obj) : <span class="literal">NULL</span>;;</div><div class="line">    fci.function_name = func;   </div><div class="line">    fci.retval = retval;  </div><div class="line">    fci.param_count = params_count;  </div><div class="line">    fci.params = params;  </div><div class="line">    fci.no_separation = <span class="number">1</span>;  </div><div class="line">    fci.symbol_table = <span class="literal">NULL</span>;  </div><div class="line"></div><div class="line"></div><div class="line">  </div><div class="line">    <span class="comment">//FAILURE OR SUCCESS</span></div><div class="line">    <span class="keyword">return</span>  zend_call_function(&amp;fci, <span class="literal">NULL</span> TSRMLS_CC);         <span class="comment">//函数调用结束。  </span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">3.</span>修改php_route.h头文件内容</div><div class="line"></div><div class="line">在第五十行左右，加入以下内容</div><div class="line"></div><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="keyword">extern</span> zend_class_entry *route_ce;</div><div class="line"><span class="comment">//定义loader类中的方法</span></div><div class="line">PHP_METHOD(route_ce,__construct);</div><div class="line">PHP_METHOD(route_ce,run);</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="number">4.</span>修改route.c文件内容</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明构造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(route,__construct)&#123;</div><div class="line"></div><div class="line">  </div><div class="line">    zval *app_dir;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"z"</span>, &amp;app_dir) == FAILURE )</div><div class="line">    &#123;</div><div class="line">        RETURN_NULL();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//zend_update_static_property_stringl(zend_class_entry *scope, const char *name, size_t name_length, const char *value, size_t value_length);</span></div><div class="line">    zend_update_static_property(route_ce, <span class="string">"app_dir"</span>, <span class="keyword">sizeof</span>(<span class="string">"app_dir"</span>)<span class="number">-1</span>, app_dir TSRMLS_CC);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载view</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(route,run)&#123;</div><div class="line"></div><div class="line"></div><div class="line">      zend_string* controller_name = zend_string_init(<span class="string">"Index"</span>,<span class="built_in">strlen</span>(<span class="string">"Index"</span>),<span class="number">0</span>);</div><div class="line">      zend_string* action_name     = zend_string_init(<span class="string">"Index"</span>,<span class="built_in">strlen</span>(<span class="string">"Index"</span>),<span class="number">0</span>);</div><div class="line"></div><div class="line">      zval *c_result;</div><div class="line">      zval *a_result;</div><div class="line">      <span class="keyword">int</span> flag;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//设置站点目录</span></div><div class="line">      zval *app_dir = zend_read_static_property(Z_OBJCE_P(getThis()), <span class="string">"app_dir"</span>, <span class="keyword">sizeof</span>(<span class="string">"app_dir"</span>)<span class="number">-1</span>, <span class="number">0</span> TSRMLS_DC);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//获取GET请求参数hashtable</span></div><div class="line">      zval *get_arr = &amp;PG(http_globals)[TRACK_VARS_GET]; </div><div class="line">      HashTable *ht= HASH_OF(get_arr);</div><div class="line">      <span class="comment">//int array_count = zend_hash_num_elements(Z_ARRVAL_P(get_arr));</span></div><div class="line">    </div><div class="line"></div><div class="line">      <span class="comment">//获取controller_name</span></div><div class="line">      zend_string *c_key= zend_string_init(<span class="string">"controller"</span>, <span class="keyword">sizeof</span>(<span class="string">"controller"</span>)<span class="number">-1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ((c_result = zend_hash_find(ht, c_key)) != <span class="literal">NULL</span>) &#123;</div><div class="line">      </div><div class="line">            controller_name = zval_get_string(c_result);</div><div class="line">        </div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">            zend_error_noreturn(E_CORE_ERROR,  <span class="string">"Couldn't find controller param in url."</span>);</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      <span class="comment">//释放key的变量</span></div><div class="line">      zend_string_release(c_key);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//获取action_name</span></div><div class="line">      zend_string *a_key= zend_string_init(<span class="string">"action"</span>, <span class="keyword">sizeof</span>(<span class="string">"action"</span>)<span class="number">-1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ((a_result = zend_hash_find(ht, a_key)) != <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">            action_name = zval_get_string(a_result);</div><div class="line">            <span class="comment">//php_printf("%s\n", Z_STRVAL_P(a_result));</span></div><div class="line">            <span class="comment">//php_printf("%s\n", zval_get_string(a_result));</span></div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">            zend_error_noreturn(E_CORE_ERROR,<span class="string">"Couldn't find action param in url."</span>);</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//释放key的变量</span></div><div class="line">      zend_string_release(a_key);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//拼装controller文件路径</span></div><div class="line">      <span class="keyword">char</span> *path = Z_STRVAL_P(app_dir);</div><div class="line">      <span class="keyword">char</span> *c_2 = <span class="string">"controllers/"</span>;</div><div class="line">      <span class="built_in">strcat</span>(path,c_2);</div><div class="line"></div><div class="line">      <span class="comment">//zend_string-&gt;char *</span></div><div class="line">      <span class="keyword">char</span> *c_3 = ZSTR_VAL(controller_name);</div><div class="line">      <span class="built_in">strcat</span>(path,c_3);</div><div class="line"></div><div class="line">      <span class="keyword">char</span> *c_4 = <span class="string">".php"</span>;</div><div class="line">      <span class="built_in">strcat</span>(path,c_4);</div><div class="line"></div><div class="line">      <span class="comment">//php_printf("%s\n", c_1); </span></div><div class="line">      <span class="comment">// php_printf("%s\n", controller_name);</span></div><div class="line">      <span class="comment">// php_printf("%s\n", action_name);</span></div><div class="line">      <span class="comment">//PHPWRITE(Z_STRVAL_P(app_dir), Z_STRLEN_P(app_dir));</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//加载执行controller文件</span></div><div class="line">      flag = zend_execute_scripts_ext(c_1);</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(flag == FAILURE)&#123;</div><div class="line"></div><div class="line">            zend_error_noreturn(E_CORE_ERROR,<span class="string">"Couldn't find file: %s."</span>,c_1);</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//查找controller对应的</span></div><div class="line">      <span class="comment">//zend_class_entry *zend_lookup_class(zend_string *name);</span></div><div class="line">      zend_class_entry *controller_ce = zend_lookup_class(controller_name);</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(controller_ce == <span class="literal">NULL</span>)&#123;</div><div class="line"></div><div class="line">            zend_error_noreturn(E_CORE_ERROR,<span class="string">"Couldn't find file: %s."</span>,c_1);</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">      zval obj;</div><div class="line">      object_init_ex(&amp;obj, controller_ce);</div><div class="line"></div><div class="line">      </div><div class="line">      zval function_name;</div><div class="line">      ZVAL_STRING(&amp;function_name,ZSTR_VAL(action_name));</div><div class="line"></div><div class="line">      </div><div class="line">      flag = call_user_class_method(return_value, controller_ce, &amp;obj, function_name, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(flag == FAILURE)&#123;</div><div class="line"></div><div class="line"></div><div class="line">            zend_error_noreturn(E_CORE_ERROR, </div><div class="line">                                <span class="string">"Couldn't find implementation for method %s%s%s"</span>, </div><div class="line">                                controller_ce ? ZSTR_VAL(controller_ce-&gt;name) : <span class="string">""</span>, </div><div class="line">                                controller_ce ? <span class="string">"::"</span> : <span class="string">""</span>, </div><div class="line">                                function_name);</div><div class="line">        </div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//RETURN_ZVAL(get_arr, 1, 0);</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry route_functions[] = &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//注册route类中的方法</span></div><div class="line">    ZEND_ME(route, __construct, <span class="literal">NULL</span>, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">    ZEND_ME(route,run,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line"></div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in route_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">PHP_MINIT_FUNCTION(route)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">//注册route类</span></div><div class="line">    zend_class_entry ce;</div><div class="line"></div><div class="line">    <span class="comment">//define INIT_NS_CLASS_ENTRY(class_container, ns, class_name, functions)</span></div><div class="line">    INIT_NS_CLASS_ENTRY(ce,<span class="string">"Dora"</span> ,<span class="string">"Route"</span>, route_functions);</div><div class="line">    route_ce = zend_register_internal_class(&amp;ce TSRMLS_CC);</div><div class="line"></div><div class="line">    <span class="comment">//声明一个静态数据成员app_dir</span></div><div class="line">    <span class="comment">//zend_declare_property_string(zend_class_entry *ce, const char *name, size_t name_length, const char *value, int access_type);</span></div><div class="line">    zend_declare_property_string(route_ce, <span class="string">"app_dir"</span>, <span class="built_in">strlen</span>(<span class="string">"app_dir"</span>), <span class="string">""</span>,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC TSRMLS_DC);</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">5.</span>编译安装</div><div class="line">phpize</div><div class="line">./configure --with-php-config=/usr/bin/php-config</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div></pre></td><td class="code"><pre><div class="line"><span class="number">6.</span>php7创建类所有到的知识点</div><div class="line"></div><div class="line"></div><div class="line">常见的变量操作宏</div><div class="line"></div><div class="line">CG    -&gt; Complier Global      编译时信息，包括函数表等(zend_globals_macros.h:<span class="number">32</span>)</div><div class="line">EG    -&gt; Executor Global      执行时信息(zend_globals_macros.h:<span class="number">43</span>)</div><div class="line">PG    -&gt; PHP Core Global      主要存储php.ini中的信息</div><div class="line">SG    -&gt; SAPI Global          SAPI信息</div><div class="line"></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line">PHP7中的zval的类型:</div><div class="line"><span class="comment">/* regular data types */</span></div><div class="line">define IS_UNDEF                    <span class="number">0</span></div><div class="line">define IS_NULL                     <span class="number">1</span></div><div class="line">define IS_FALSE                    <span class="number">2</span></div><div class="line">define IS_TRUE                     <span class="number">3</span></div><div class="line">define IS_LONG                     <span class="number">4</span></div><div class="line">define IS_DOUBLE                   <span class="number">5</span></div><div class="line">define IS_STRING                   <span class="number">6</span></div><div class="line">define IS_ARRAY                    <span class="number">7</span></div><div class="line">define IS_OBJECT                   <span class="number">8</span></div><div class="line">define IS_RESOURCE                 <span class="number">9</span></div><div class="line">define IS_REFERENCE                <span class="number">10</span></div><div class="line"></div><div class="line">define IS_CONSTANT                 <span class="number">11</span></div><div class="line">define IS_CONSTANT_AST             <span class="number">12</span></div><div class="line"></div><div class="line">define _IS_BOOL                    <span class="number">13</span></div><div class="line">define IS_CALLABLE                 <span class="number">14</span></div><div class="line"></div><div class="line">define IS_INDIRECT                 <span class="number">15</span></div><div class="line">define IS_PTR                      <span class="number">17</span></div><div class="line"></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line">PHP7中获取的zval赋值:</div><div class="line">- ZVAL_STRING(zv, str, <span class="number">1</span>);</div><div class="line">+ ZVAL_STRING(zv, str);</div><div class="line">- ZVAL_STRINGL(zv, str, len, <span class="number">1</span>);</div><div class="line">+ ZVAL_STRINGL(zv, str, len);</div><div class="line">- ZVAL_STRING(zv, str, <span class="number">0</span>);</div><div class="line">+ ZVAL_STRING(zv, str);</div><div class="line">+ efree(str);</div><div class="line">- ZVAL_STRINGL(zv, str, len, <span class="number">0</span>);</div><div class="line">+ ZVAL_STRINGL(zv, str, len);</div><div class="line"></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line"></div><div class="line">PHP7中获取的zval的值和长度:</div><div class="line">define Z_LVAL(zval)                (zval).value.lval</div><div class="line">define Z_LVAL_P(zval_p)            Z_LVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_DVAL(zval)                (zval).value.dval</div><div class="line">define Z_DVAL_P(zval_p)            Z_DVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_STR(zval)                 (zval).value.str</div><div class="line">define Z_STR_P(zval_p)             Z_STR(*(zval_p))</div><div class="line"></div><div class="line">define Z_STRVAL(zval)              ZSTR_VAL(Z_STR(zval))</div><div class="line">define Z_STRVAL_P(zval_p)          Z_STRVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_STRLEN(zval)              ZSTR_LEN(Z_STR(zval))</div><div class="line">define Z_STRLEN_P(zval_p)          Z_STRLEN(*(zval_p))</div><div class="line"></div><div class="line">define Z_STRHASH(zval)             ZSTR_HASH(Z_STR(zval))</div><div class="line">define Z_STRHASH_P(zval_p)         Z_STRHASH(*(zval_p))</div><div class="line"></div><div class="line">define Z_ARR(zval)                 (zval).value.arr</div><div class="line">define Z_ARR_P(zval_p)             Z_ARR(*(zval_p))</div><div class="line"></div><div class="line"><span class="function">define <span class="title">Z_ARRVAL</span><span class="params">(zval)</span>              <span class="title">Z_ARR</span><span class="params">(zval)</span></span></div><div class="line">define Z_ARRVAL_P(zval_p)          Z_ARRVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJ(zval)                 (zval).value.obj</div><div class="line">define Z_OBJ_P(zval_p)             Z_OBJ(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJ_HT(zval)              Z_OBJ(zval)-&gt;handlers</div><div class="line">define Z_OBJ_HT_P(zval_p)          Z_OBJ_HT(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJ_HANDLER(zval, hf)     Z_OBJ_HT((zval))-&gt;hf</div><div class="line">define Z_OBJ_HANDLER_P(zv_p, hf)   Z_OBJ_HANDLER(*(zv_p), hf)</div><div class="line"></div><div class="line">define Z_OBJ_HANDLE(zval)          (Z_OBJ((zval)))-&gt;handle</div><div class="line">define Z_OBJ_HANDLE_P(zval_p)      Z_OBJ_HANDLE(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJCE(zval)               (Z_OBJ(zval)-&gt;ce)</div><div class="line">define Z_OBJCE_P(zval_p)           Z_OBJCE(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJPROP(zval)             Z_OBJ_HT((zval))-&gt;get_properties(&amp;(zval))</div><div class="line">define Z_OBJPROP_P(zval_p)         Z_OBJPROP(*(zval_p))</div><div class="line"></div><div class="line">define Z_OBJDEBUG(zval,tmp)        (Z_OBJ_HANDLER((zval),get_debug_info)?Z_OBJ_HANDLER((zval),get_debug_info)(&amp;(zval),&amp;tmp):(tmp=0,Z_OBJ_HANDLER((zval),get_properties)?Z_OBJPROP(zval):NULL))</div><div class="line">define Z_OBJDEBUG_P(zval_p,tmp)    Z_OBJDEBUG(*(zval_p), tmp)</div><div class="line"></div><div class="line">define Z_RES(zval)                 (zval).value.res</div><div class="line"><span class="function">define <span class="title">Z_RES_P</span><span class="params">(zval_p)</span>             <span class="title">Z_RES</span><span class="params">(*zval_p)</span></span></div><div class="line"><span class="function"></span></div><div class="line">define Z_RES_HANDLE(zval)          Z_RES(zval)-&gt;handle</div><div class="line"><span class="function">define <span class="title">Z_RES_HANDLE_P</span><span class="params">(zval_p)</span>      <span class="title">Z_RES_HANDLE</span><span class="params">(*zval_p)</span></span></div><div class="line"><span class="function"></span></div><div class="line">define Z_RES_TYPE(zval)            Z_RES(zval)-&gt;type</div><div class="line"><span class="function">define <span class="title">Z_RES_TYPE_P</span><span class="params">(zval_p)</span>        <span class="title">Z_RES_TYPE</span><span class="params">(*zval_p)</span></span></div><div class="line"><span class="function"></span></div><div class="line">define Z_RES_VAL(zval)             Z_RES(zval)-&gt;ptr</div><div class="line"><span class="function">define <span class="title">Z_RES_VAL_P</span><span class="params">(zval_p)</span>         <span class="title">Z_RES_VAL</span><span class="params">(*zval_p)</span></span></div><div class="line"><span class="function"></span></div><div class="line">define Z_REF(zval)                 (zval).value.ref</div><div class="line">define Z_REF_P(zval_p)             Z_REF(*(zval_p))</div><div class="line"></div><div class="line">define Z_REFVAL(zval)              &amp;Z_REF(zval)-&gt;val</div><div class="line">define Z_REFVAL_P(zval_p)          Z_REFVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_AST(zval)                 (zval).value.ast</div><div class="line">define Z_AST_P(zval_p)             Z_AST(*(zval_p))</div><div class="line"></div><div class="line">define Z_ASTVAL(zval)              (zval).value.ast-&gt;ast</div><div class="line">define Z_ASTVAL_P(zval_p)          Z_ASTVAL(*(zval_p))</div><div class="line"></div><div class="line">define Z_INDIRECT(zval)            (zval).value.zv</div><div class="line">define Z_INDIRECT_P(zval_p)        Z_INDIRECT(*(zval_p))</div><div class="line"></div><div class="line">define Z_CE(zval)                  (zval).value.ce</div><div class="line">define Z_CE_P(zval_p)              Z_CE(*(zval_p))</div><div class="line"></div><div class="line">define Z_FUNC(zval)                (zval).value.func</div><div class="line">define Z_FUNC_P(zval_p)            Z_FUNC(*(zval_p))</div><div class="line"></div><div class="line">define Z_PTR(zval)                 (zval).value.ptr</div><div class="line">define Z_PTR_P(zval_p)             Z_PTR(*(zval_p))</div><div class="line"></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line"></div><div class="line">php7 用来判断类型和取值 </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_value</span><span class="params">(zval zv,zval *zv_p,zval **zv_pp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>( Z_TYPE(zv) == IS_NULL )</div><div class="line">    &#123;</div><div class="line">        php_printf(<span class="string">"类型是 IS_NULL!\n"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">if</span>( Z_TYPE_P(zv_p) == IS_LONG )</div><div class="line">    &#123;</div><div class="line">        php_printf(<span class="string">"类型是 IS_LONG，值是：%ld"</span> , Z_LVAL_P(zv_p));</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">if</span>(Z_TYPE_PP(zv_pp) == IS_DOUBLE )</div><div class="line">    &#123;</div><div class="line">        php_printf(<span class="string">"类型是 IS_DOUBLE,值是：%f"</span> , Z_DVAL_PP(zv_pp) );</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//================================================================================</span></div><div class="line"></div><div class="line">PHP7中的定义返回值的宏 Zend/zend_API.h</div><div class="line"><span class="function">define <span class="title">RETVAL_BOOL</span><span class="params">(b)</span>                                  <span class="title">ZVAL_BOOL</span><span class="params">(return_value, b)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_NULL</span><span class="params">()</span>                                   <span class="title">ZVAL_NULL</span><span class="params">(return_value)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_LONG</span><span class="params">(l)</span>                                  <span class="title">ZVAL_LONG</span><span class="params">(return_value, l)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_DOUBLE</span><span class="params">(d)</span>                                <span class="title">ZVAL_DOUBLE</span><span class="params">(return_value, d)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_STR</span><span class="params">(s)</span>                                   <span class="title">ZVAL_STR</span><span class="params">(return_value, s)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_INTERNED_STR</span><span class="params">(s)</span>                  <span class="title">ZVAL_INTERNED_STR</span><span class="params">(return_value, s)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_NEW_STR</span><span class="params">(s)</span>                               <span class="title">ZVAL_NEW_STR</span><span class="params">(return_value, s)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_STR_COPY</span><span class="params">(s)</span>                              <span class="title">ZVAL_STR_COPY</span><span class="params">(return_value, s)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_STRING</span><span class="params">(s)</span>                                <span class="title">ZVAL_STRING</span><span class="params">(return_value, s)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_STRINGL</span><span class="params">(s, l)</span>                    <span class="title">ZVAL_STRINGL</span><span class="params">(return_value, s, l)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_EMPTY_STRING</span><span class="params">()</span>                   <span class="title">ZVAL_EMPTY_STRING</span><span class="params">(return_value)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_RES</span><span class="params">(r)</span>                                   <span class="title">ZVAL_RES</span><span class="params">(return_value, r)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_ARR</span><span class="params">(r)</span>                                   <span class="title">ZVAL_ARR</span><span class="params">(return_value, r)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_OBJ</span><span class="params">(r)</span>                                   <span class="title">ZVAL_OBJ</span><span class="params">(return_value, r)</span></span></div><div class="line"><span class="function">define <span class="title">RETVAL_ZVAL</span><span class="params">(zv, copy, dtor)</span>             <span class="title">ZVAL_ZVAL</span><span class="params">(return_value, zv, copy, dtor)</span></span></div><div class="line"><span class="function">define RETVAL_FALSE                                    <span class="title">ZVAL_FALSE</span><span class="params">(return_value)</span></span></div><div class="line"><span class="function">define RETVAL_TRUE                                     <span class="title">ZVAL_TRUE</span><span class="params">(return_value)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">define <span class="title">RETURN_BOOL</span><span class="params">(b)</span>                                  </span>&#123; RETVAL_BOOL(b); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_NULL</span><span class="params">()</span>                                   </span>&#123; RETVAL_NULL(); <span class="keyword">return</span>;&#125;</div><div class="line"><span class="function">define <span class="title">RETURN_LONG</span><span class="params">(l)</span>                                  </span>&#123; RETVAL_LONG(l); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_DOUBLE</span><span class="params">(d)</span>                                </span>&#123; RETVAL_DOUBLE(d); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_STR</span><span class="params">(s)</span>                                   </span>&#123; RETVAL_STR(s); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_INTERNED_STR</span><span class="params">(s)</span>                  </span>&#123; RETVAL_INTERNED_STR(s); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_NEW_STR</span><span class="params">(s)</span>                               </span>&#123; RETVAL_NEW_STR(s); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_STR_COPY</span><span class="params">(s)</span>                              </span>&#123; RETVAL_STR_COPY(s); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_STRING</span><span class="params">(s)</span>                                </span>&#123; RETVAL_STRING(s); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_STRINGL</span><span class="params">(s, l)</span>                    </span>&#123; RETVAL_STRINGL(s, l); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_EMPTY_STRING</span><span class="params">()</span>                   </span>&#123; RETVAL_EMPTY_STRING(); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_RES</span><span class="params">(r)</span>                                   </span>&#123; RETVAL_RES(r); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_ARR</span><span class="params">(r)</span>                                   </span>&#123; RETVAL_ARR(r); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_OBJ</span><span class="params">(r)</span>                                   </span>&#123; RETVAL_OBJ(r); <span class="keyword">return</span>; &#125;</div><div class="line"><span class="function">define <span class="title">RETURN_ZVAL</span><span class="params">(zv, copy, dtor)</span>             </span>&#123; RETVAL_ZVAL(zv, copy, dtor); <span class="keyword">return</span>; &#125;</div><div class="line">define RETURN_FALSE                                    &#123; RETVAL_FALSE; <span class="keyword">return</span>; &#125;</div><div class="line">define RETURN_TRUE                                     &#123; RETVAL_TRUE; <span class="keyword">return</span>; &#125;</div><div class="line">array_init(return_value);<span class="comment">//初始化return_value成数组，此操作完后就可以返回一个空的数组</span></div><div class="line">object_init(return_value);<span class="comment">//初始化return_value成Object，此操作完成后返回一个空的对像</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line">grep <span class="string">"define ZEND_ACC"</span>  Zend<span class="comment">/*.h</span></div><div class="line"><span class="comment">内核中提供了定义类以方法的修饰词 Zend/zend_compile.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">define ZEND_ACC_STATIC         0x01</span></div><div class="line"><span class="comment">define ZEND_ACC_ABSTRACT       0x02</span></div><div class="line"><span class="comment">define ZEND_ACC_FINAL          0x04</span></div><div class="line"><span class="comment">define ZEND_ACC_IMPLEMENTED_ABSTRACT       0x08</span></div><div class="line"><span class="comment">define ZEND_ACC_IMPLICIT_ABSTRACT_CLASS    0x10</span></div><div class="line"><span class="comment">define ZEND_ACC_EXPLICIT_ABSTRACT_CLASS    0x20</span></div><div class="line"><span class="comment">define ZEND_ACC_INTERFACE                  0x40</span></div><div class="line"><span class="comment">define ZEND_ACC_TRAIT                      0x80</span></div><div class="line"><span class="comment">define ZEND_ACC_ANON_CLASS                 0x100</span></div><div class="line"><span class="comment">define ZEND_ACC_ANON_BOUND                 0x200</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">define ZEND_ACC_PUBLIC     0x100</span></div><div class="line"><span class="comment">define ZEND_ACC_PROTECTED  0x200</span></div><div class="line"><span class="comment">define ZEND_ACC_PRIVATE    0x400</span></div><div class="line"><span class="comment">define ZEND_ACC_PPP_MASK  (ZEND_ACC_PUBLIC | ZEND_ACC_PROTECTED | ZEND_ACC_PRIVATE)</span></div><div class="line"><span class="comment">define ZEND_ACC_CHANGED    0x800</span></div><div class="line"><span class="comment">define ZEND_ACC_IMPLICIT_PUBLIC    0x1000</span></div><div class="line"><span class="comment">define ZEND_ACC_CTOR       0x2000</span></div><div class="line"><span class="comment">define ZEND_ACC_DTOR       0x4000</span></div><div class="line"><span class="comment">define ZEND_ACC_CLONE      0x8000</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line"><span class="comment">1. grep ZEND_ACC  Zend/*.h</span></div><div class="line"><span class="comment">内核中提供了定义类属性的宏  Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_ex(zend_class_entry *ce, zend_string *name, zval *property, int access_type, zend_string *doc_comment);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property(zend_class_entry *ce, const char *name, size_t name_length, zval *property, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_null(zend_class_entry *ce, const char *name, size_t name_length, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_bool(zend_class_entry *ce, const char *name, size_t name_length, zend_long value, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_long(zend_class_entry *ce, const char *name, size_t name_length, zend_long value, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_double(zend_class_entry *ce, const char *name, size_t name_length, double value, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_string(zend_class_entry *ce, const char *name, size_t name_length, const char *value, int access_type);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_property_stringl(zend_class_entry *ce, const char *name, size_t name_length, const char *value, size_t value_len, int access_type);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">更新类中的数据成员 Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_ex(zend_class_entry *scope, zval *object, zend_string *name, zval *value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zval *value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_null(zend_class_entry *scope, zval *object, const char *name, size_t name_length);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_bool(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zend_long value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_long(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zend_long value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_double(zend_class_entry *scope, zval *object, const char *name, size_t name_length, double value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_str(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zend_string *value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_string(zend_class_entry *scope, zval *object, const char *name, size_t name_length, const char *value);</span></div><div class="line"><span class="comment">ZEND_API void zend_update_property_stringl(zend_class_entry *scope, zval *object, const char *name, size_t name_length, const char *value, size_t value_length);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">grep "zend_read_"  ../../Zend/*.h </span></div><div class="line"><span class="comment">读取类中的数据成员 在Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API zval *zend_read_property(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zend_bool silent, zval *rv);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">//===============================================================================</span></div><div class="line"><span class="comment">2. grep "zend_declare_class_constant"  Zend/*.h</span></div><div class="line"><span class="comment">创建类中的常量的方法在Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant(zend_class_entry *ce, const char *name, size_t name_length, zval *value);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_null(zend_class_entry *ce, const char *name, size_t name_length);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_long(zend_class_entry *ce, const char *name, size_t name_length, zend_long value);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_bool(zend_class_entry *ce, const char *name, size_t name_length, zend_bool value);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_double(zend_class_entry *ce, const char *name, size_t name_length, double value);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_stringl(zend_class_entry *ce, const char *name, size_t name_length, const char *value, size_t value_length);</span></div><div class="line"><span class="comment">ZEND_API int zend_declare_class_constant_string(zend_class_entry *ce, const char *name, size_t name_length, const char *value);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">更新类中的常量数据成员 Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment">ZEND_API int zend_update_class_constants(zend_class_entry *class_type);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">//=================================================================================</span></div><div class="line"><span class="comment">3. grep "zend_update_static_"  ../../Zend/*.h </span></div><div class="line"><span class="comment">更新类中的静态数据成员 在Zend/zend_API.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property(zend_class_entry *scope, const char *name, size_t name_length, zval *value);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_null(zend_class_entry *scope, const char *name, size_t name_length);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_bool(zend_class_entry *scope, const char *name, size_t name_length, zend_long value);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_long(zend_class_entry *scope, const char *name, size_t name_length, zend_long value);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_double(zend_class_entry *scope, const char *name, size_t name_length, double value);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_string(zend_class_entry *scope, const char *name, size_t name_length, const char *value);</span></div><div class="line"><span class="comment">ZEND_API int zend_update_static_property_stringl(zend_class_entry *scope, const char *name, size_t name_length, const char *value, size_t value_length);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">grep "zend_read_"  ../../Zend/*.h </span></div><div class="line"><span class="comment">读取类中的数据成员 在Zend/zend_API.h声明定义</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">ZEND_API zval *zend_read_static_property(zend_class_entry *scope, const char *name, size_t name_length, zend_bool silent);</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[11] MVC之自动加载文件
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[10] 怎么样创建类详细</title>
    <link href="//www.zwting.com/2017/08/10/2016-02-10-php-ext-10/"/>
    <id>//www.zwting.com/2017/08/10/2016-02-10-php-ext-10/</id>
    <published>2017-08-10T09:09:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">场景：php7扩展开发怎么样创建类</div><div class="line">1.创建扩展</div><div class="line">进入$&#123;php-src&#125;<span class="string">/ext</span>目录，执行<span class="string">./ext_skel--extname=route</span>，这时目录下会出现一个route的目录,<span class="keyword">cd</span> <span class="string">./route</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">2.</span>修改config.m4内容第十行左右，去掉dnl</div><div class="line">PHP_ARG_WITH(route, <span class="keyword">for</span> route support,</div><div class="line">dnl Make sure that the comment is aligned:</div><div class="line">[  --with-route             Include route support])</div><div class="line">在下面追加到以下内容：</div><div class="line"><span class="keyword">if</span> test -z <span class="string">"$PHP_DEBUG"</span> ; then </div><div class="line">    AC_ARG_ENABLE(debug, [--enable-debug compile with debugging system], [PHP_DEBUG=$enableval],[PHP_DEBUG=no] ) </div><div class="line">fi</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">3.</span>修改php_route.h头文件内容</div><div class="line"></div><div class="line">在第五十行左右，加入以下内容</div><div class="line"></div><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="keyword">extern</span> zend_class_entry *route_ce;</div><div class="line"><span class="comment">//定义loader类中的方法</span></div><div class="line">PHP_METHOD(route_ce,__construct);</div><div class="line">PHP_METHOD(route_ce,run);</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="number">4.</span>修改route.c文件内容</div><div class="line"></div><div class="line"><span class="comment">/* True global resources - no need for thread safety here */</span></div><div class="line">在这行注释下添加变量声明</div><div class="line"></div><div class="line">zend_class_entry *route_ce;</div><div class="line"></div><div class="line">找到route_functions，去掉confirm_route_compiled的内容，改为如下</div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry route_functions[] = &#123;</div><div class="line">    <span class="comment">//这里去掉了测试的方法，记得去掉上面的函数实现。处女座有洁癖。</span></div><div class="line">    <span class="comment">//注册route类中的方法</span></div><div class="line">    ZEND_ME(route, __construct, <span class="literal">NULL</span>, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">    ZEND_ME(route,run,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line"></div><div class="line">    PHP_FE_END  <span class="comment">/* Must be the last line in route_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">注：找到PHP_MINIT_FUNCTION方法，移到route_functions下面来</div><div class="line"></div><div class="line">PHP_MINIT_FUNCTION(route)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">//注册route类</span></div><div class="line">    zend_class_entry ce;</div><div class="line"></div><div class="line">    <span class="comment">//define INIT_NS_CLASS_ENTRY(class_container, ns, class_name, functions)</span></div><div class="line">    INIT_NS_CLASS_ENTRY(ce,<span class="string">"Dora"</span> ,<span class="string">"Route"</span>, route_functions);</div><div class="line">    route_ce = zend_register_internal_class(&amp;ce TSRMLS_CC);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Every user-visible function in PHP should document itself in the source */</span></div><div class="line">在这行注释下添加函数</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明构造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(route,__construct)&#123;</div><div class="line"></div><div class="line">    zend_printf(<span class="string">"__construct\n"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载run</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(route,run)&#123;</div><div class="line"></div><div class="line">    zend_printf(<span class="string">"route_run\n"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//加载模块</span></div><div class="line">zend_module_entry route_module_entry = &#123;</div><div class="line">    STANDARD_MODULE_HEADER,</div><div class="line"></div><div class="line">    <span class="string">"route"</span>,</div><div class="line">    route_functions,</div><div class="line"></div><div class="line">    PHP_MINIT(route),</div><div class="line">    PHP_MSHUTDOWN(route),</div><div class="line">    PHP_RINIT(route),       </div><div class="line">    PHP_RSHUTDOWN(route),</div><div class="line"></div><div class="line">    PHP_MINFO(route),</div><div class="line">    PHP_ROUTE_VERSION,</div><div class="line">    STANDARD_MODULE_PROPERTIES</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">5.</span>编译安装</div><div class="line">phpize</div><div class="line">./configure --with-php-config=/usr/bin/php-config</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="number">6.</span>php7创建类所有到的知识点</div><div class="line"></div><div class="line"><span class="number">1.</span>zend_class_entry是内核中定义的一个类的结构体，是内核实现PHP中类与对象的一个结构类型，起到类模板的作用。声明在Zend/zend.h中</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_class_entry</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> type;</div><div class="line">    zend_string *name;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">zend_class_entry</span> *<span class="title">parent</span>;</span> <span class="comment">//指向父类的指针</span></div><div class="line">    <span class="keyword">int</span> refcount;</div><div class="line">    <span class="keyword">uint32_t</span> ce_flags;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> default_properties_count;<span class="comment">//默认数据成员个数</span></div><div class="line">    <span class="keyword">int</span> default_static_members_count;<span class="comment">//默认类中静态成员个数</span></div><div class="line">    zval *default_properties_table;<span class="comment">//默认数据成员变量</span></div><div class="line">    zval *default_static_members_table;<span class="comment">//默认类中静态数据成员变量</span></div><div class="line"></div><div class="line">    zval *static_members_table;<span class="comment">//类中静态成员</span></div><div class="line">    HashTable function_table; <span class="comment">//函数方法表</span></div><div class="line">    HashTable properties_info;<span class="comment">//数据成员表</span></div><div class="line">    HashTable constants_table;<span class="comment">//类数据常量</span></div><div class="line"></div><div class="line">    <span class="comment">//php中的构造函数、析构函数和魔法函数</span></div><div class="line">    <span class="keyword">union</span> _zend_function *constructor;</div><div class="line">    <span class="keyword">union</span> _zend_function *destructor;</div><div class="line">    <span class="keyword">union</span> _zend_function *clone;</div><div class="line">    <span class="keyword">union</span> _zend_function *__get;</div><div class="line">    <span class="keyword">union</span> _zend_function *__set;</div><div class="line">    <span class="keyword">union</span> _zend_function *__unset;</div><div class="line">    <span class="keyword">union</span> _zend_function *__isset;</div><div class="line">    <span class="keyword">union</span> _zend_function *__call;</div><div class="line">    <span class="keyword">union</span> _zend_function *__callstatic;</div><div class="line">    <span class="keyword">union</span> _zend_function *__tostring;</div><div class="line">    <span class="keyword">union</span> _zend_function *__debugInfo;</div><div class="line">    <span class="keyword">union</span> _zend_function *serialize_func;</div><div class="line">    <span class="keyword">union</span> _zend_function *unserialize_func;</div><div class="line"></div><div class="line">    zend_class_iterator_funcs iterator_funcs;</div><div class="line"></div><div class="line">    <span class="comment">/* 类句柄 */</span></div><div class="line">    zend_object* (*create_object)(zend_class_entry *class_type);</div><div class="line">    zend_object_iterator *(*get_iterator)(zend_class_entry *ce, zval *object, <span class="keyword">int</span> by_ref);</div><div class="line">    <span class="comment">/* 类声明的接口 */</span></div><div class="line">    <span class="keyword">int</span> (*interface_gets_implemented)(zend_class_entry *iface, zend_class_entry *class_type); <span class="comment">/* a class implements this interface */</span></div><div class="line">    <span class="keyword">union</span> _zend_function *(*get_static_method)(zend_class_entry *ce, zend_string* method);</div><div class="line"></div><div class="line">    <span class="comment">/* 序列化回调函数指针 */</span></div><div class="line">    <span class="keyword">int</span> (*serialize)(zval *object, <span class="keyword">unsigned</span> <span class="keyword">char</span> **buffer, <span class="keyword">size_t</span> *buf_len, zend_serialize_data *data);</div><div class="line">    <span class="keyword">int</span> (*unserialize)(zval *object, zend_class_entry *ce, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> buf_len, zend_unserialize_data *data);</div><div class="line"></div><div class="line">    <span class="keyword">uint32_t</span> num_interfaces; <span class="comment">//  类实现的接口数</span></div><div class="line">    zend_class_entry **interfaces;<span class="comment">//类实现的接口变量</span></div><div class="line"></div><div class="line">    <span class="keyword">uint32_t</span> num_traits;</div><div class="line">    zend_class_entry **traits;</div><div class="line">    zend_trait_alias **trait_aliases;</div><div class="line">    zend_trait_precedence **trait_precedences;</div><div class="line"></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">            zend_string *filename;</div><div class="line">            <span class="keyword">uint32_t</span> line_start;</div><div class="line">            <span class="keyword">uint32_t</span> line_end;</div><div class="line">            zend_string *doc_comment;</div><div class="line">        &#125; user;</div><div class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">            <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_function_entry</span> *<span class="title">builtin_functions</span>;</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_entry</span> *<span class="title">module</span>;</span></div><div class="line">        &#125; internal;</div><div class="line">    &#125; info;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="number">2.</span>zend_function_entry是内核中定义的一个函数的结构体，所有类的方法的声明在zend_function_entry中注册，声明在Zend/zend_API.h中。</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_function_entry</span> &#123;</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *fname;</div><div class="line">        <span class="keyword">void</span> (*handler)(INTERNAL_FUNCTION_PARAMETERS);<span class="comment">//函数句柄</span></div><div class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_internal_arg_info</span> *<span class="title">arg_info</span>;</span><span class="comment">//函数所需参数</span></div><div class="line">        <span class="keyword">uint32_t</span> num_args;<span class="comment">//参数个数</span></div><div class="line">        <span class="keyword">uint32_t</span> flags;</div><div class="line">&#125; zend_function_entry;</div><div class="line"></div><div class="line"></div><div class="line">声明在Zend/zend_API.h中</div><div class="line"><span class="function">define <span class="title">ZEND_ME</span><span class="params">(classname, name, arg_info, flags)</span>    </span></div><div class="line">    ZEND_FENTRY(name, ZEND_MN(classname##_##name), arg_info, flags)</div><div class="line"></div><div class="line"><span class="function">define <span class="title">ZEND_FENTRY</span><span class="params">(zend_name, name, arg_info, flags)</span>   </span></div><div class="line"><span class="function">    </span>&#123; #zend_name, name, arg_info, (<span class="keyword">uint32_t</span>) (<span class="keyword">sizeof</span>(arg_info)/<span class="keyword">sizeof</span>(struct _zend_internal_arg_info)<span class="number">-1</span>), flags &#125;,</div><div class="line"></div><div class="line">define PHP_FE_END      ZEND_FE_END</div><div class="line">define ZEND_FE_END     &#123; <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">3.</span>zend_module_entry是内核中定义的一个扩展模块的结构体，注册扩展模块到PHP运行过程中，声明在Zend/zend_modules.h中。</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_entry</span> &#123;</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> size;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> zend_api;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_debug;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> zts;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_ini_entry</span> *<span class="title">ini_entry</span>;</span><span class="comment">//指向php.ini的指针</span></div><div class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_dep</span> *<span class="title">deps</span>;</span> <span class="comment">//扩展依赖，deps就是用来注册依赖、冲突模块的</span></div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;  <span class="comment">//扩展的名称</span></div><div class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_function_entry</span> *<span class="title">functions</span>;</span><span class="comment">//指向zend_functions_entry指针</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> (*module_startup_func)(INIT_FUNC_ARGS);<span class="comment">//模块初始化时被调用的函数指针</span></div><div class="line">    <span class="keyword">int</span> (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);<span class="comment">//模块被关闭时调用的函数指针</span></div><div class="line">    <span class="keyword">int</span> (*request_startup_func)(INIT_FUNC_ARGS);<span class="comment">//每处理一次请求前调用此函数</span></div><div class="line">    <span class="keyword">int</span> (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);<span class="comment">//每处理一次请求前后调用此函数</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">void</span> (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS); <span class="comment">//phpinfo时打印出的关于此扩展的信息</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *version;<span class="comment">//扩展的版本号</span></div><div class="line"></div><div class="line">    <span class="keyword">size_t</span> globals_size;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ZTS</span></div><div class="line">    ts_rsrc_id* globals_id_ptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="keyword">void</span>* globals_ptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">void</span> (*globals_ctor)(<span class="keyword">void</span> *global);</div><div class="line">    <span class="keyword">void</span> (*globals_dtor)(<span class="keyword">void</span> *global);</div><div class="line">    <span class="keyword">int</span> (*post_deactivate_func)(<span class="keyword">void</span>);</div><div class="line">    <span class="keyword">int</span> module_started;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> type;</div><div class="line">    <span class="keyword">void</span> *handle;</div><div class="line">    <span class="keyword">int</span> module_number;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *build_id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_dep</span> &#123;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;       <span class="comment">/* module name */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *rel;        <span class="comment">/* version relationship: NULL (exists), lt|le|eq|ge|gt (to given version) */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *version;    <span class="comment">/* version */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> type;     <span class="comment">/* dependency type */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">如果有依赖，在php扩展中，需要这个写好依赖。或者php.ini中的扩展按从上到下的顺序加载你也可以先写pdo后面追加你的扩展模块名。</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> zend_module_dep demo_deps[] = &#123;</div><div class="line">        ZEND_MOD_REQUIRED(<span class="string">"pdo"</span>)</div><div class="line">        ZEND_MOD_END</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[10] 怎么样创建类详细
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[9] zend_call_method和zend_call_function</title>
    <link href="//www.zwting.com/2017/08/09/2016-02-09-php-ext-9/"/>
    <id>//www.zwting.com/2017/08/09/2016-02-09-php-ext-9/</id>
    <published>2017-08-09T09:09:59.000Z</published>
    <updated>2017-09-18T07:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">场景：我们想要在php7扩展中调用用户自定的类中的方法，而且方法有多个参数，找到以下方</div><div class="line">法，没有看到可以超过两个参数的方法。所以一直向下查找，发现zend_call_method调用的</div><div class="line">zend_call_function，但是并非只能传两个参数。一直追下去。这样我们用zend_call_function来调用多个参数，实现我们要的目的。</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">函数原型：在 Zend/zend_interfaces.下：</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zend_call_method_with_0_params(obj, obj_ce, fn_proxy, function_name, retval) \</span></div><div class="line">zend_call_method(obj, obj_ce, fn_proxy, function_name, <span class="keyword">sizeof</span>(function_name)<span class="number">-1</span>, retval, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zend_call_method_with_1_params(obj, obj_ce, fn_proxy, function_name, retval, arg1) \</span></div><div class="line">zend_call_method(obj, obj_ce, fn_proxy, function_name, <span class="keyword">sizeof</span>(function_name)<span class="number">-1</span>, retval, <span class="number">1</span>, arg1, <span class="literal">NULL</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zend_call_method_with_2_params(obj, obj_ce, fn_proxy, function_name, retval, arg1, arg2) \</span></div><div class="line">zend_call_method(obj, obj_ce, fn_proxy, function_name, <span class="keyword">sizeof</span>(function_name)<span class="number">-1</span>, retval, <span class="number">2</span>, arg1, arg2)</div><div class="line"></div><div class="line"></div><div class="line">上面三个调用下面的zend_call_method：</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">ZEND_API zval* <span class="title">zend_call_method</span><span class="params">(zval *object, zend_class_entry *obj_ce, zend_function **fn_proxy, <span class="keyword">const</span> <span class="keyword">char</span> *function_name, <span class="keyword">size_t</span> function_name_len, zval *retval_ptr, <span class="keyword">int</span> param_count, zval* arg1, zval* arg2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> result;</div><div class="line">    zend_fcall_info fci;</div><div class="line">    zval retval;</div><div class="line">    HashTable *function_table;</div><div class="line"></div><div class="line">    zval params[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (param_count &gt; <span class="number">0</span>) &#123;</div><div class="line">        ZVAL_COPY_VALUE(&amp;params[<span class="number">0</span>], arg1);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (param_count &gt; <span class="number">1</span>) &#123;</div><div class="line">        ZVAL_COPY_VALUE(&amp;params[<span class="number">1</span>], arg2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//看这里.原来可以传多个参数，只是这里做了限制</span></div><div class="line">    <span class="comment">//看这里.原来可以传多个参数，只是这里做了限制</span></div><div class="line">    <span class="comment">//看这里.原来可以传多个参数，只是这里做了限制</span></div><div class="line">    </div><div class="line">    fci.size = <span class="keyword">sizeof</span>(fci);</div><div class="line"> </div><div class="line">    fci.object = (object &amp;&amp; Z_TYPE_P(object) == IS_OBJECT) ? Z_OBJ_P(object) : <span class="literal">NULL</span>;</div><div class="line">    ZVAL_STRINGL(&amp;fci.function_name, function_name, function_name_len);</div><div class="line">    fci.retval = retval_ptr ? retval_ptr : &amp;retval;</div><div class="line">    fci.param_count = param_count;</div><div class="line">    fci.params = params;</div><div class="line">    fci.no_separation = <span class="number">1</span>;</div><div class="line">    fci.symbol_table = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!fn_proxy &amp;&amp; !obj_ce) &#123;</div><div class="line">        </div><div class="line">        fci.function_table = !object ? EG(function_table) : <span class="literal">NULL</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        </div><div class="line">        result = zend_call_function(&amp;fci, <span class="literal">NULL</span>);</div><div class="line">        zval_ptr_dtor(&amp;fci.function_name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        zend_fcall_info_cache fcic;</div><div class="line"></div><div class="line">        fcic.initialized = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (!obj_ce) &#123;</div><div class="line">            obj_ce = object ? Z_OBJCE_P(object) : <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (obj_ce) &#123;</div><div class="line">            function_table = &amp;obj_ce-&gt;function_table;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            function_table = EG(function_table);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!fn_proxy || !*fn_proxy) &#123;</div><div class="line">            <span class="keyword">if</span> ((fcic.function_handler = zend_hash_find_ptr(function_table, Z_STR(fci.function_name))) == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="comment">/* error at c-level */</span></div><div class="line">                zend_error_noreturn(E_CORE_ERROR, <span class="string">"Couldn't find implementation for method %s%s%s"</span>, obj_ce ? ZSTR_VAL(obj_ce-&gt;name) : <span class="string">""</span>, obj_ce ? <span class="string">"::"</span> : <span class="string">""</span>, function_name);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (fn_proxy) &#123;</div><div class="line">                *fn_proxy = fcic.function_handler;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fcic.function_handler = *fn_proxy;</div><div class="line">        &#125;</div><div class="line">        fcic.calling_scope = obj_ce;</div><div class="line">        <span class="keyword">if</span> (object) &#123;</div><div class="line">            fcic.called_scope = Z_OBJCE_P(object);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            zend_class_entry *called_scope = zend_get_called_scope(EG(current_execute_data));</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (obj_ce &amp;&amp;</div><div class="line">                (!called_scope ||</div><div class="line">                 !instanceof_function(called_scope, obj_ce))) &#123;</div><div class="line">                fcic.called_scope = obj_ce;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                fcic.called_scope = called_scope;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        fcic.object = object ? Z_OBJ_P(object) : <span class="literal">NULL</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        <span class="comment">//看这里.原来调用的是zend_call_function</span></div><div class="line">        </div><div class="line">        result = zend_call_function(&amp;fci, &amp;fcic);</div><div class="line">        zval_ptr_dtor(&amp;fci.function_name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (result == FAILURE) &#123;</div><div class="line">        <span class="comment">/* error at c-level */</span></div><div class="line">        <span class="keyword">if</span> (!obj_ce) &#123;</div><div class="line">            obj_ce = object ? Z_OBJCE_P(object) : <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!EG(exception)) &#123;</div><div class="line">            zend_error_noreturn(E_CORE_ERROR, <span class="string">"Couldn't execute method %s%s%s"</span>, obj_ce ? ZSTR_VAL(obj_ce-&gt;name) : <span class="string">""</span>, obj_ce ? <span class="string">"::"</span> : <span class="string">""</span>, function_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* copy arguments back, they might be changed by references */</span></div><div class="line">    <span class="keyword">if</span> (param_count &gt; <span class="number">0</span> &amp;&amp; Z_ISREF(params[<span class="number">0</span>]) &amp;&amp; !Z_ISREF_P(arg1)) &#123;</div><div class="line">        ZVAL_COPY_VALUE(arg1, &amp;params[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (param_count &gt; <span class="number">1</span> &amp;&amp; Z_ISREF(params[<span class="number">1</span>]) &amp;&amp; !Z_ISREF_P(arg2)) &#123;</div><div class="line">        ZVAL_COPY_VALUE(arg2, &amp;params[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!retval_ptr) &#123;</div><div class="line">        zval_ptr_dtor(&amp;retval);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retval_ptr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">我们可以看到zend_call_method调用zend_call_function,函数体定义在Zend/zend_API.h下：</div><div class="line"><span class="function">ZEND_API <span class="keyword">int</span> <span class="title">zend_call_function</span><span class="params">(zend_fcall_info *fci, zend_fcall_info_cache *fci_cache)</span></span>;</div><div class="line">我们可以看到要想使用zend_call_function 必须要了解zend_fcall_info结构体。</div><div class="line"></div><div class="line">PHP7 中</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_fcall_info</span> &#123;</span></div><div class="line">    <span class="keyword">size_t</span> size;</div><div class="line">    HashTable *function_table;</div><div class="line">    zval function_name;</div><div class="line">    zend_array *symbol_table;</div><div class="line">    zval *retval;</div><div class="line">    zval *params;</div><div class="line">    zend_object *object;</div><div class="line">    zend_bool no_separation;</div><div class="line">    <span class="keyword">uint32_t</span> param_count;</div><div class="line">&#125; zend_fcall_info;</div><div class="line"></div><div class="line">由于网上流传的代码都是PHP5的代码，我们也就再贴一下PHP5的代码，到改造代码时，可以有个借鉴。</div><div class="line">PHP5 中</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_fcall_info</span> &#123;</span></div><div class="line">   <span class="keyword">size_t</span> size;</div><div class="line">   HashTable *function_table;</div><div class="line">   zval *function_name;</div><div class="line">   HashTable *symbol_table;</div><div class="line">   zval **retval_ptr_ptr;</div><div class="line">   zend_uint param_count;</div><div class="line">   zval ***params;</div><div class="line">   zval *object_ptr;</div><div class="line">   zend_bool no_separation;</div><div class="line">&#125; zend_fcall_info;</div><div class="line"></div><div class="line">其中有变化的参数：</div><div class="line">zval *function_name;   -&gt;  zval function_name;</div><div class="line">zval **retval_ptr_ptr; -&gt;  zval *retval;</div><div class="line">zval *object_ptr;      -&gt;  zend_object *object;</div><div class="line">zval ***params;        -&gt;  zval *params;</div><div class="line"></div><div class="line"></div><div class="line">在PHP7的扩展使用PHP5的代码make时，会出现如下错误：</div><div class="line">error: incompatible types when assigning to type ‘<span class="class"><span class="keyword">struct</span> <span class="title">zval</span> *’ <span class="title">from</span> <span class="title">type</span> ‘<span class="title">zval</span>’</span></div><div class="line"><span class="class"><span class="title">error</span>:</span> ‘zend_fcall_info’ has no member named ‘object’</div><div class="line">error: ‘zend_fcall_info’ has no member named ‘retval’</div><div class="line"></div><div class="line"></div><div class="line">我们搜一下php源码中zend_call_function中的使用情况，我们会发现自动加载中的代码如下：</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spl_instantiate_arg_n</span><span class="params">(zend_class_entry *pce, zval *retval, <span class="keyword">int</span> argc, zval *argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    zend_function *func = pce-&gt;constructor;</div><div class="line">    zend_fcall_info fci;</div><div class="line">    zend_fcall_info_cache fcc;</div><div class="line">    zval dummy;</div><div class="line"></div><div class="line">    spl_instantiate(pce, retval);</div><div class="line"></div><div class="line">    fci.size = <span class="keyword">sizeof</span>(zend_fcall_info);</div><div class="line">    fci.function_table = &amp;pce-&gt;function_table;</div><div class="line">    ZVAL_STR(&amp;fci.function_name, func-&gt;common.function_name);</div><div class="line">    fci.object = Z_OBJ_P(retval);</div><div class="line">    fci.symbol_table = <span class="literal">NULL</span>;</div><div class="line">    fci.retval = &amp;dummy;</div><div class="line">    fci.param_count = argc;</div><div class="line">    fci.params = argv;</div><div class="line">    fci.no_separation = <span class="number">1</span>;</div><div class="line"></div><div class="line">    fcc.initialized = <span class="number">1</span>;</div><div class="line">    fcc.function_handler = func;</div><div class="line">    fcc.calling_scope = EG(scope);</div><div class="line">    fcc.called_scope = pce;</div><div class="line">    fcc.object = Z_OBJ_P(retval);</div><div class="line"></div><div class="line">    zend_call_function(&amp;fci, &amp;fcc);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OK,我们写一个可以调用用户定义类的方法的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">class_call_user_method</span><span class="params">(zval *retval, zend_class_entry *obj_ce, </span></span></div><div class="line"><span class="function"><span class="params">    zval *obj, zval func,  <span class="keyword">uint32_t</span> params_count, zval params[])</span></span>&#123; </div><div class="line"></div><div class="line"></div><div class="line">    HashTable *function_table; </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(obj) &#123; </div><div class="line">                function_table = &amp;Z_OBJCE_P(obj)-&gt;function_table;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                function_table = (CG(function_table));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对象初始化内容，不能放在这里</span></div><div class="line">    <span class="comment">// if(!obj_ce)&#123;</span></div><div class="line">     </div><div class="line">    <span class="comment">//      object_init(&amp;obj);</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// else&#123;</span></div><div class="line">    </div><div class="line">    <span class="comment">//      object_init_ex(&amp;obj, obj_ce);</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">    zend_fcall_info fci;  </div><div class="line">    fci.size = <span class="keyword">sizeof</span>(fci);  </div><div class="line">    fci.function_table = function_table;  </div><div class="line">    fci.object =  obj ? Z_OBJ_P(obj) : <span class="literal">NULL</span>;;</div><div class="line">    fci.function_name = func;   </div><div class="line">    fci.retval = retval;  </div><div class="line">    fci.param_count = params_count;  </div><div class="line">    fci.params = params;  </div><div class="line">    fci.no_separation = <span class="number">1</span>;  </div><div class="line">    fci.symbol_table = <span class="literal">NULL</span>;  </div><div class="line">      </div><div class="line">    </div><div class="line">    <span class="comment">/**/</span></div><div class="line"><span class="keyword">int</span> result;</div><div class="line">result = zend_call_function(&amp;fci, <span class="literal">NULL</span> TSRMLS_CC);         <span class="comment">//函数调用结束。  </span></div><div class="line"></div><div class="line">       </div><div class="line"><span class="keyword">if</span> (result == FAILURE) &#123;</div><div class="line">            </div><div class="line">zend_printf(<span class="string">"error"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**/</span></div><div class="line">    zend_printf(<span class="string">"Success.\n"</span>);</div><div class="line">   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">ZEND_METHOD(udf,get)&#123;</div><div class="line"></div><div class="line">    <span class="comment">//call  __construct</span></div><div class="line">    zval retval;</div><div class="line"></div><div class="line">zval obj;</div><div class="line">    object_init_ex(&amp;obj, adf_ce);</div><div class="line"></div><div class="line">zval function_name;</div><div class="line">ZVAL_STRING(&amp;function_name,<span class="string">"__construct"</span>);</div><div class="line"></div><div class="line"><span class="comment">//int class_call_user_method(zval *retval, zend_class_entry *obj_ce, </span></div><div class="line">    <span class="comment">//zval *obj, zval func,  uint32_t params_count, zval params[])</span></div><div class="line">class_call_user_method(&amp;retval, adf_ce, &amp;obj, function_name, <span class="number">0</span>,<span class="literal">NULL</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//call  set</span></div><div class="line">    zval retval2;</div><div class="line"></div><div class="line">zval obj2;</div><div class="line">    object_init_ex(&amp;obj2, adf_ce);</div><div class="line"></div><div class="line"></div><div class="line">zval function_name2;</div><div class="line">ZVAL_STRING(&amp;function_name2,<span class="string">"set"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    zval params[<span class="number">2</span>];</div><div class="line">    ZVAL_STRING(&amp;params[<span class="number">0</span>],<span class="string">"root"</span>);</div><div class="line">    ZVAL_STRING(&amp;params[<span class="number">1</span>],<span class="string">"tyyy"</span>);</div><div class="line"></div><div class="line">    </div><div class="line">class_call_user_method(&amp;retval2, adf_ce, &amp;obj2, function_name2, <span class="number">2</span>, params);</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="comment">//call get</span></div><div class="line">    zval retval3;</div><div class="line"></div><div class="line">    zval obj3;</div><div class="line">    object_init_ex(&amp;obj3, adf_ce);</div><div class="line"></div><div class="line">    zval function_name3;</div><div class="line">    ZVAL_STRING(&amp;function_name3,<span class="string">"get"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    class_call_user_method(&amp;retval3, adf_ce, &amp;obj3, function_name3, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[9] zend_call_method和zend_call_function
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[8]类方法之间的调用</title>
    <link href="//www.zwting.com/2017/08/08/2016-02-08-php-ext-8/"/>
    <id>//www.zwting.com/2017/08/08/2016-02-08-php-ext-8/</id>
    <published>2017-08-08T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在一个扩展模块里，类之间方法的调用，上面第<span class="number">7</span>个有例子简介，就不多说了</div><div class="line">首先我们先创建<span class="keyword">play</span>扩展模块，再创建adf扩展模块，最后创建udf扩展模块，</div><div class="line">我们要做到的是php -m中显示加载了<span class="keyword">play</span>,我们可以调用adf类和udf类。</div></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">第一步：</div><div class="line">在adf和udf类中各实现<span class="builtin-name">set</span> get方法，然后初始化minit中的内容</div><div class="line">运行成功后，将adf.c php_adf.h和udf.c php_udf.h拷入play文件中</div><div class="line"></div><div class="line">第二步</div><div class="line">修改play文件夹中的config.m4：</div><div class="line"><span class="keyword">if</span> test -z <span class="string">"<span class="variable">$PHP_DEBUG</span>"</span> ; then </div><div class="line">  PHP_NEW_EXTENSION(play, play.c udf.c adf.c, <span class="variable">$ext_shared</span>,, <span class="attribute">-DZEND_ENABLE_STATIC_TSRMLS_CACHE</span>=1)</div><div class="line">  </div><div class="line">在play.c的MINIT函数中加上</div><div class="line">ZEND_MODULE_STARTUP_N(udf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line">ZEND_MODULE_STARTUP_N(adf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line">  </div><div class="line">第三步执行</div><div class="line">phpize </div><div class="line">./configure <span class="attribute">--with-php-config</span>=/usr/bin/php-config --enable-debug</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">在adf.c中加一个静态方法</div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry adf_functions[] = &#123;</div><div class="line"></div><div class="line">PHP_ME(adf, __construct,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">PHP_ME(adf,<span class="built_in">set</span>,global_setkey_arg,ZEND_ACC_PUBLIC)</div><div class="line">PHP_ME(adf,get,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">PHP_ME(adf,calladf,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC) </div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in adf_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">加上这个一行 PHP_ME(adf,calladf,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC) </div><div class="line"></div><div class="line">再实现一个空方法</div><div class="line">ZEND_METHOD(adf,calladf)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">在udf.c 中定义了一个get方法，它用来调用adf.c中的calladf的静态方法</div><div class="line">ZEND<span class="number">_M</span>ETHOD(udf,get)&#123;</div><div class="line"></div><div class="line">    <span class="comment">//创建类实例</span></div><div class="line">    zval *<span class="keyword">object</span><span class="number">_n</span>ame;</div><div class="line">    </div><div class="line">    <span class="comment">//函数名i</span></div><div class="line">    zval <span class="keyword">function</span><span class="number">_n</span>ame;</div><div class="line">    ZVAL<span class="number">_</span>STRING(&amp;<span class="keyword">function</span><span class="number">_n</span>ame, <span class="string">"calladf"</span>);</div><div class="line"> </div><div class="line">    <span class="comment">//zend_call_method_with_0_params(object_name,adf_ce,NULL,"calladf",return_value);</span></div><div class="line">    zend<span class="number">_</span>call<span class="number">_m</span>ethod(<span class="keyword">object</span><span class="number">_n</span>ame,adf<span class="number">_</span>ce,NULL,<span class="string">"calladf"</span>,sizeof(<span class="string">"calladf"</span>)-<span class="number">1</span>,<span class="keyword">return</span><span class="number">_</span><span class="keyword">value</span>,<span class="number">0</span>,NULL,NULL);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">在 Zend/zend<span class="number">_</span>interfaces 下函数原型：</div><div class="line"></div><div class="line"><span class="number">#def</span>ine zend<span class="number">_</span>call<span class="number">_m</span>ethod<span class="number">_</span>with<span class="number">_0_p</span>arams(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, retval) \</div><div class="line">zend<span class="number">_</span>call<span class="number">_m</span>ethod(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, sizeof(<span class="keyword">function</span><span class="number">_n</span>ame)-<span class="number">1</span>, retval, <span class="number">0</span>, NULL, NULL)</div><div class="line"></div><div class="line"><span class="number">#def</span>ine zend<span class="number">_</span>call<span class="number">_m</span>ethod<span class="number">_</span>with<span class="number">_1_p</span>arams(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, retval, arg<span class="number">1</span>) \</div><div class="line">zend<span class="number">_</span>call<span class="number">_m</span>ethod(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, sizeof(<span class="keyword">function</span><span class="number">_n</span>ame)-<span class="number">1</span>, retval, <span class="number">1</span>, arg<span class="number">1</span>, NULL)</div><div class="line"></div><div class="line"><span class="number">#def</span>ine zend<span class="number">_</span>call<span class="number">_m</span>ethod<span class="number">_</span>with<span class="number">_2_p</span>arams(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, retval, arg<span class="number">1</span>, arg<span class="number">2</span>) \</div><div class="line">zend<span class="number">_</span>call<span class="number">_m</span>ethod(obj, obj<span class="number">_</span>ce, fn<span class="number">_p</span>roxy, <span class="keyword">function</span><span class="number">_n</span>ame, sizeof(<span class="keyword">function</span><span class="number">_n</span>ame)-<span class="number">1</span>, retval, <span class="number">2</span>, arg<span class="number">1</span>, arg<span class="number">2</span>)</div><div class="line"></div><div class="line">上面三个调用下面的：</div><div class="line"></div><div class="line">ZEND<span class="number">_</span>API zval* zend<span class="number">_</span>call<span class="number">_m</span>ethod(zval *<span class="keyword">object</span><span class="number">_p</span>p, zend<span class="number">_</span><span class="keyword">class</span><span class="number">_</span>entry *obj<span class="number">_</span>ce, zend<span class="number">_f</span>unction **fn<span class="number">_p</span>roxy, const char *<span class="keyword">function</span><span class="number">_n</span>ame, size<span class="number">_</span>t <span class="keyword">function</span><span class="number">_n</span>ame<span class="number">_</span>len, zval *retval, int param<span class="number">_</span>count, zval* arg<span class="number">1</span>, zval* arg<span class="number">2</span>);</div></pre></td></tr></table></figure><pre><code>在Zend/zend_API.h下,上面调用zend_call_function：ZEND_API int zend_call_function(zend_fcall_info *fci, zend_fcall_info_cache *fci_cache);typedef struct _zend_fcall_info {        size_t size;        HashTable *function_table;        zval function_name;        zend_array *symbol_table;        zval *retval;        zval *params;        zend_object *object;        zend_bool no_separation;        uint32_t param_count;} zend_fcall_info;</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[8]类方法之间的调用
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[7]含有两个类的扩展模块</title>
    <link href="//www.zwting.com/2017/08/07/2016-02-07-php-ext-7/"/>
    <id>//www.zwting.com/2017/08/07/2016-02-07-php-ext-7/</id>
    <published>2017-08-07T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">在我们写扩展时，就像YAF不会是用一个类文件来完成一个扩展功能，所以我们要在一个扩展模块里</div><div class="line">调起几个类的实例，同类之间的方法，可以相互调用，不同类之间的实例，应该也可以调用，下面我</div><div class="line">们就用一个例子来说明。</div><div class="line">首先我们先创建<span class="keyword">play</span>扩展模块，再创建adf扩展模块，最后创建udf扩展模块，</div><div class="line">我们要做到的是php -m中显示加载了<span class="keyword">play</span>,我们可以调用adf类和udf类。</div></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">第一步：</div><div class="line">在adf和udf类中各实现<span class="builtin-name">set</span> get方法，然后初始化minit中的内容</div><div class="line">运行成功后，将adf.c php_adf.h和udf.c php_udf.h拷入play文件中</div><div class="line"></div><div class="line">第二步</div><div class="line">修改play文件夹中的config.m4：</div><div class="line"><span class="keyword">if</span> test -z <span class="string">"<span class="variable">$PHP_DEBUG</span>"</span> ; then </div><div class="line">  PHP_NEW_EXTENSION(play, play.c udf.c adf.c, <span class="variable">$ext_shared</span>,, <span class="attribute">-DZEND_ENABLE_STATIC_TSRMLS_CACHE</span>=1)</div><div class="line">  </div><div class="line">在play.c的MINIT函数中加上</div><div class="line">ZEND_MODULE_STARTUP_N(udf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line">ZEND_MODULE_STARTUP_N(adf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line">  </div><div class="line">第三步执行</div><div class="line">phpize </div><div class="line">./configure <span class="attribute">--with-php-config</span>=/usr/bin/php-config --enable-debug</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">adf.c </div><div class="line"></div><div class="line"></div><div class="line">zend<span class="number">_</span><span class="keyword">class</span><span class="number">_</span>entry *adf<span class="number">_</span>ce;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//新增定义</span></div><div class="line">ZEND<span class="number">_</span>BEGIN<span class="number">_</span>ARG<span class="number">_</span>INFO<span class="number">_</span>EX(global<span class="number">_</span>setkey<span class="number">_</span>arg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">    ZEND<span class="number">_</span>ARG<span class="number">_</span>INFO(<span class="number">0</span>, key<span class="number">1</span>)</div><div class="line">    ZEND<span class="number">_</span>ARG<span class="number">_</span>INFO(<span class="number">0</span>, key<span class="number">2</span>)</div><div class="line">ZEND<span class="number">_</span>END<span class="number">_</span>ARG<span class="number">_</span>INFO()</div><div class="line"></div><div class="line">ZEND<span class="number">_M</span>ETHOD(adf,<span class="number">__</span>construct)&#123;</div><div class="line"></div><div class="line">RETURN<span class="number">_</span>NULL();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND<span class="number">_M</span>ETHOD(adf,set)&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">zval *param<span class="number">1</span>;</div><div class="line">zval *param<span class="number">2</span>;</div><div class="line"></div><div class="line">array<span class="number">_</span>init(param<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//int zend_parse_parameters ( int num_args TSRMLS_DC, char* type_spec, ... )</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (zend<span class="number">_p</span>arse<span class="number">_p</span>arameters(ZEND<span class="number">_</span>NUM<span class="number">_</span>ARGS(), <span class="string">"z|z"</span>,&amp;param<span class="number">1</span>,&amp;param<span class="number">2</span>) == FAILURE) &#123;</div><div class="line">RETURN<span class="number">_</span>FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">zend<span class="number">_u</span>pdate<span class="number">_p</span>roperty(adf<span class="number">_</span>ce, getThis(), <span class="string">"param1"</span>, sizeof(<span class="string">"param1"</span>)-<span class="number">1</span>, param<span class="number">1</span> TSRMLS<span class="number">_</span>CC);</div><div class="line">zend<span class="number">_u</span>pdate<span class="number">_p</span>roperty(adf<span class="number">_</span>ce, getThis(), <span class="string">"param2"</span>, sizeof(<span class="string">"param2"</span>)-<span class="number">1</span>, param<span class="number">2</span> TSRMLS<span class="number">_</span>CC);</div><div class="line"></div><div class="line">RETURN<span class="number">_</span>NULL();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">ZEND<span class="number">_M</span>ETHOD(adf,get)&#123;</div><div class="line"></div><div class="line">array<span class="number">_</span>init(<span class="keyword">return</span><span class="number">_</span><span class="keyword">value</span>);</div><div class="line"></div><div class="line">zval  *get<span class="number">1</span>;</div><div class="line">zval  *get<span class="number">2</span>;</div><div class="line"></div><div class="line">zval  param<span class="number">1</span>; <span class="comment">//php &gt;=7.0</span></div><div class="line">zval  param<span class="number">2</span>; <span class="comment">//php &gt;=7.0</span></div><div class="line"></div><div class="line">get<span class="number">1</span> = zend<span class="number">_</span>read<span class="number">_p</span>roperty(adf<span class="number">_</span>ce, getThis(), <span class="string">"param1"</span>, sizeof(<span class="string">"param1"</span>)-<span class="number">1</span>, <span class="number">0</span>, &amp;param<span class="number">1</span> TSRMLS<span class="number">_</span>DC);</div><div class="line">get<span class="number">2</span> = zend<span class="number">_</span>read<span class="number">_p</span>roperty(adf<span class="number">_</span>ce, getThis(), <span class="string">"param2"</span>, sizeof(<span class="string">"param2"</span>)-<span class="number">1</span>, <span class="number">0</span>, &amp;param<span class="number">2</span> TSRMLS<span class="number">_</span>DC);</div><div class="line"></div><div class="line"></div><div class="line">add<span class="number">_n</span>ext<span class="number">_</span>index<span class="number">_</span>string(<span class="keyword">return</span><span class="number">_</span><span class="keyword">value</span>,Z<span class="number">_</span>STRVAL<span class="number">_P</span>(get<span class="number">1</span>));</div><div class="line">add<span class="number">_n</span>ext<span class="number">_</span>index<span class="number">_</span>string(<span class="keyword">return</span><span class="number">_</span><span class="keyword">value</span>,Z<span class="number">_</span>STRVAL<span class="number">_P</span>(get<span class="number">2</span>));</div><div class="line"><span class="comment">//add_assoc_string(return_value, "param1", ZEND_STRL("test1"));</span></div><div class="line"><span class="comment">//add_assoc_string(return_value, "param2", ZEND_STRL("test2"));</span></div><div class="line"></div><div class="line">RETURN<span class="number">_</span>ZVAL(<span class="keyword">return</span><span class="number">_</span><span class="keyword">value</span>, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">const zend<span class="number">_f</span>unction<span class="number">_</span>entry adf<span class="number">_f</span>unctions[] = &#123;</div><div class="line"></div><div class="line">PHP<span class="number">_M</span>E(adf, <span class="number">__</span>construct,NULL,ZEND<span class="number">_</span>ACC<span class="number">_P</span>UBLIC|ZEND<span class="number">_</span>ACC<span class="number">_</span>CTOR)</div><div class="line">PHP<span class="number">_M</span>E(adf,set,global<span class="number">_</span>setkey<span class="number">_</span>arg,ZEND<span class="number">_</span>ACC<span class="number">_P</span>UBLIC)</div><div class="line">PHP<span class="number">_M</span>E(adf,get,NULL,ZEND<span class="number">_</span>ACC<span class="number">_P</span>UBLIC)</div><div class="line">PHP<span class="number">_M</span>E(adf,calladf,NULL,ZEND<span class="number">_</span>ACC<span class="number">_P</span>UBLIC|ZEND<span class="number">_</span>ACC<span class="number">_</span>STATIC)</div><div class="line"></div><div class="line">PHP<span class="number">_</span>FE<span class="number">_</span>END<span class="comment">/* Must be the last line in adf_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">PHP<span class="number">_M</span>INIT<span class="number">_</span>FUNCTION(adf)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* If you have INI entries, uncomment these lines</span></div><div class="line"><span class="comment">REGISTER_INI_ENTRIES();</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">        zend<span class="number">_</span><span class="keyword">class</span><span class="number">_</span>entry ce;</div><div class="line">        INIT<span class="number">_</span>CLASS<span class="number">_</span>ENTRY(ce, <span class="string">"adf"</span>, adf<span class="number">_f</span>unctions);</div><div class="line">adf<span class="number">_</span>ce = zend<span class="number">_</span>register<span class="number">_</span>internal<span class="number">_</span><span class="keyword">class</span>(&amp;ce TSRMLS<span class="number">_</span>CC);</div><div class="line"></div><div class="line"><span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">play</span><span class="selector-class">.c</span>中代码：</div><div class="line"></div><div class="line"><span class="selector-tag">PHP_MINIT_FUNCTION</span>(play)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* If you have INI entries, uncomment these lines</span></div><div class="line"><span class="comment">REGISTER_INI_ENTRIES();</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="selector-tag">ZEND_MODULE_STARTUP_N</span>(udf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line"><span class="selector-tag">ZEND_MODULE_STARTUP_N</span>(adf) (INIT_FUNC_ARGS_PASSTHRU);</div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">SUCCESS</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[7]含有两个类的扩展模块
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[6] 调试Segmentation fault</title>
    <link href="//www.zwting.com/2017/08/06/2016-02-06-php-ext-6/"/>
    <id>//www.zwting.com/2017/08/06/2016-02-06-php-ext-6/</id>
    <published>2017-08-06T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>编译安装php<span class="number">-7.0</span><span class="number">.5</span>，编译时，加上--<span class="keyword">enable</span>-<span class="keyword">debug</span> --<span class="keyword">enable</span>-phpdbg</div><div class="line"></div><div class="line">wget http:<span class="comment">//cn2.php.net/distributions/php-7.0.5.tar.gz</span></div><div class="line">tar zxvf php<span class="number">-7.0</span><span class="number">.5</span>.tar.gz</div><div class="line">cd php<span class="number">-7.0</span><span class="number">.5</span></div><div class="line">./configure --prefix=/usr/<span class="keyword">local</span>/php7<span class="number">.0</span><span class="number">.5</span> --<span class="keyword">enable</span>-<span class="keyword">debug</span> --<span class="keyword">enable</span>-cli --<span class="keyword">enable</span>-fpm   --<span class="keyword">enable</span>-pcntl --with-openssl --<span class="keyword">enable</span>-mysqlnd  --<span class="keyword">enable</span>-phpdbg --<span class="keyword">enable</span>-embed</div><div class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">2.</span>php7扩展调用时，出现Segmentation fault</div><div class="line"></div><div class="line"><span class="number">2.1</span></div><div class="line">ulimit -c unlimited</div><div class="line">再执行一次php脚本，出现 core.xxxx，OK就先到这里</div><div class="line">gdb php -c core.xxxx</div><div class="line"></div><div class="line"><span class="number">2.2</span></div><div class="line">修改扩展模块中的config.m4</div><div class="line">在其中加入：</div><div class="line"><span class="keyword">if</span> test -z <span class="string">"$PHP_DEBUG"</span> ; then</div><div class="line">    AC_ARG_ENABLE(<span class="keyword">debug</span>, [--<span class="keyword">enable</span>-<span class="keyword">debug</span> <span class="keyword">compile</span> with debugging <span class="keyword">system</span>], [PHP_DEBUG=$enableval],[PHP_DEBUG=no] )</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">2.3</span> 重新编译扩展源码</div><div class="line">phpize</div><div class="line">./configure --with-php-config=/usr/bin/php-config --<span class="keyword">enable</span>-<span class="keyword">debug</span></div><div class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</div><div class="line"></div><div class="line"><span class="number">2.4</span> 确认断点函数</div><div class="line">nm modules/xxx.so 会列出所有的函数</div><div class="line">如果自己写的一个Demo类中的get方法出现问题 一般这个函数名为zim_demo_get</div><div class="line">或者nm modules/xxx.so|grep xxx 找出你自己的写的方法名</div><div class="line"></div><div class="line"><span class="number">3.</span>调试xxxx.php文件</div><div class="line">gdb php 进入gdb界面</div><div class="line"><span class="keyword">break</span> zim_demo_get 会问y/n 选y</div><div class="line">gdb -q xxxx.php -c /etc/php.ini</div><div class="line"></div><div class="line">这时会停在zend_method(demo,get)&#123;&#125;方法内，这时只要输入n回车  输入n回车  输入n回车</div><div class="line">直到出现Segmentation基本上可以定位问题所在。当然你也可以在每一步<span class="keyword">print</span> 打印你想看的变量内容。</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[6] 调试Segmentation fault
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[5]本类内函数调用</title>
    <link href="//www.zwting.com/2017/08/05/2016-02-05-php-ext-5/"/>
    <id>//www.zwting.com/2017/08/05/2016-02-05-php-ext-5/</id>
    <published>2017-08-05T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需要实现的细节"><a href="#1-需要实现的细节" class="headerlink" title="1.需要实现的细节"></a>1.需要实现的细节</h3><ul><li>在第三节，有个调用函数的例子，我们来稍微细说下</li><li>然后就是平时大家定义了类里面的方法，有时候有相互调用，我们写一个例子</li></ul><h3 id="2-person扩展"><a href="#2-person扩展" class="headerlink" title="2.person扩展"></a>2.person扩展</h3><h4 id="2-1在php-person-h中增加："><a href="#2-1在php-person-h中增加：" class="headerlink" title="2.1在php_person.h中增加："></a>2.1在php_person.h中增加：</h4><pre><code>PHP_METHOD(person_ce,callback);PHP_METHOD(person_ce,setkey);</code></pre><h4 id="2-2-实现代码"><a href="#2-2-实现代码" class="headerlink" title="2.2 实现代码"></a>2.2 实现代码</h4><p>在php_initest.h中打开全局变量设置块的注释，改成自己相要的变量如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//新增定义</span></div><div class="line">ZEND_BEGIN_ARG_INFO_EX(global_setkey_arg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)</div><div class="line">ZEND_ARG_INFO(<span class="number">0</span>, setkey1)</div><div class="line">ZEND_ARG_INFO(<span class="number">0</span>, setkey2)</div><div class="line">ZEND_END_ARG_INFO()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry person_functions[] = &#123;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_ME(person, __construct, global_config_arg, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line"></div><div class="line">ZEND_ME(person,doing,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">ZEND_ME(person,saying,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line"><span class="comment">//增加两个类里面的方法</span></div><div class="line">ZEND_ME(person,callback,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">ZEND_ME(person,setkey,global_setkey_arg,ZEND_ACC_PUBLIC)</div><div class="line"></div><div class="line">ZEND_ME(person,__destruct,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_DTOR)</div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in person_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">ZEND_METHOD(person,setkey)&#123;</div><div class="line"></div><div class="line">    zval *param1;</div><div class="line">    zval *param2;</div><div class="line"></div><div class="line"><span class="comment">//#include &lt;zend_API.h&gt;</span></div><div class="line"><span class="comment">//int zend_parse_parameters ( int num_args TSRMLS_DC, char* type_spec, ... )</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">"z|z"</span>,&amp;param1,&amp;param2) == FAILURE) &#123;</div><div class="line">        RETURN_FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    zend_update_property(person_ce, getThis(), <span class="string">"param1"</span>, <span class="keyword">sizeof</span>(<span class="string">"param1"</span>)<span class="number">-1</span>, param1 TSRMLS_CC);</div><div class="line">    zend_update_property(person_ce, getThis(), <span class="string">"param2"</span>, <span class="keyword">sizeof</span>(<span class="string">"param2"</span>)<span class="number">-1</span>, param2 TSRMLS_CC);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_METHOD(person,callback)&#123;</div><div class="line"></div><div class="line"><span class="comment">//#include &lt;zend_interfaces.h&gt;</span></div><div class="line"><span class="comment">//zval* zend_call_method_with_0_params ( ... obj, zend_class_entry* obj_ce, zend_function** fn_proxy, char* function_name, ... retval ) </span></div><div class="line"><span class="comment">//zval* zend_call_method_with_1_params ( ... obj, zend_class_entry* obj_ce, zend_function** fn_proxy, char* function_name, ... retval, zval* arg1 )   </span></div><div class="line"><span class="comment">//zval* zend_call_method_with_2_params ( ... obj, zend_class_entry* obj_ce, zend_function** fn_proxy, char* function_name, ... retval, zval* arg1, zval* arg2 )</span></div><div class="line"><span class="comment">//zval* zend_call_method ( zval** object_pp, zend_class_entry* obj_ce, zend_function** fn_proxy, char* function_name, int function_name_len, zval** retval_ptr_ptr, int param_count, zval* arg1, zval* arg2, magic TSRMLS_DC )</span></div><div class="line">zend_call_method_with_0_params(getThis(),person_ce,<span class="literal">NULL</span>,<span class="string">"doing"</span>,return_value);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ZEND_METHOD(person,callback_function)&#123;</div><div class="line">    <span class="comment">//声明一个对象变量</span></div><div class="line">zval *object_name;</div><div class="line">    object_init_ex(object_name,person_ce);</div><div class="line"></div><div class="line"><span class="comment">//声明函数名变量</span></div><div class="line">zval function_name;</div><div class="line">ZVAL_STRING(&amp;function_name,<span class="string">"doing"</span>);</div><div class="line"></div><div class="line"><span class="comment">//声明承接返回值的变量</span></div><div class="line">zval retval;</div><div class="line"></div><div class="line"><span class="comment">// 调用类的 doing 方法</span></div><div class="line">   <span class="keyword">if</span>(call_user_function(EG(function_table), object_name, &amp;function_name, &amp;retval, <span class="number">0</span>, <span class="literal">NULL</span>)==FAILURE)&#123;</div><div class="line"></div><div class="line">RETURN_NULL();</div><div class="line"><span class="comment">//zend_error(E_ERROR,"call person doing error");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//释放资源空间</span></div><div class="line">   *return_value=*retval;</div><div class="line">zval_copy_ctor(return_value);</div><div class="line">zval_ptr_dtor(&amp;retval);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-3-相关内容"><a href="#2-3-相关内容" class="headerlink" title="2.3 相关内容"></a>2.3 相关内容</h4><pre><code>type_spec是格式化字符串，其常见的含义如下：参数   代表着的类型b   Booleanl   Integer 整型d   Floating point 浮点型s   String 字符串r   Resource 资源a   Array 数组o   Object instance 对象O   Object instance of a specified type 特定类型的对象z   Non-specific zval 任意类型～Z   zval**类型f   表示函数、方法名称对应的接收变量类型参数  对应C里的数据类型b   zend_booll   longd   doubles   char*, int 前者接收指针，后者接收长度r   zval*a   zval*o   zval*O   zval*, zend_class_entry*z   zval*Z   zval**zend_parse_parameters中的  | ，这个表示 在它之前的参数是必须的，之后的是非必须的</code></pre><h5 id="2-4-扩展使用"><a href="#2-4-扩展使用" class="headerlink" title="2.4 扩展使用"></a>2.4 扩展使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@bogon tests]# cat test.php</div><div class="line">&lt;?php</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">n = new person(array(<span class="string">'key'</span>=&gt;<span class="string">'value'</span>));</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">n-&gt;setkey(<span class="string">'testparam1'</span>,<span class="string">'testparam2'</span>);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">n-&gt;param1);</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">n-&gt;param2);</span></div><div class="line"></div><div class="line"></div><div class="line">[root@bogon tests]# php test.php</div><div class="line">string(10) "testparam1"</div><div class="line">string(10) "testparam2"</div><div class="line">array(1) &#123;</div><div class="line">  ["key"]=&gt;</div><div class="line">  string(5) "value"</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><pre><code>仅属个人观点, 可以随意转载但保留以下信息作者：极品黑公子邮箱：x0hcker@gmail.com</code></pre><p>```</p>]]></content>
    
    <summary type="html">
    
      php7扩展开发[5]本类内函数调用
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[4]读取php.ini内容</title>
    <link href="//www.zwting.com/2017/08/04/2016-02-04-php-ext-4/"/>
    <id>//www.zwting.com/2017/08/04/2016-02-04-php-ext-4/</id>
    <published>2017-08-04T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需要实现的细节"><a href="#1-需要实现的细节" class="headerlink" title="1.需要实现的细节"></a>1.需要实现的细节</h3><ul><li>在php.ini加上</li><li>[initest] </li><li>initest.username=test</li><li>nitest.userage=99</li><li></li><li>实现一个initest类 ，实现一个ini_echo方法，打印相关内容</li></ul><h3 id="2-initest扩展"><a href="#2-initest扩展" class="headerlink" title="2.initest扩展"></a>2.initest扩展</h3><h4 id="2-1创建类的扩展："><a href="#2-1创建类的扩展：" class="headerlink" title="2.1创建类的扩展："></a>2.1创建类的扩展：</h4><p>[root@bogon ext]# cd /usr/local/src/php-7.0.3/ext</p><p>[root@bogon ext]# ./ext_skel –extname=initest</p><h4 id="2-2-修改配置"><a href="#2-2-修改配置" class="headerlink" title="2.2 修改配置"></a>2.2 修改配置</h4><p>[root@bogon ext]# vim initest/config.m4</p><pre><code>dnl PHP_ARG_WITH(initest, for initest support,dnl Make sure that the comment is aligned:dnl [  --with-initest             Include initest support])更改为：PHP_ARG_WITH(initest, for initest support,dnl Make sure that the comment is aligned:[  --with-initest             Include initest support])</code></pre><h4 id="2-3-实现代码"><a href="#2-3-实现代码" class="headerlink" title="2.3 实现代码"></a>2.3 实现代码</h4><p>在php_initest.h中打开全局变量设置块的注释，改成自己相要的变量如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ZEND_BEGIN_MODULE_GLOBALS(initest)</div><div class="line">zend_long  userage;</div><div class="line"><span class="keyword">char</span>  *username;</div><div class="line">ZEND_END_MODULE_GLOBALS(initest)</div></pre></td></tr></table></figure><p>在initest.c打开相关注释，并添加相关代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ZEND_DECLARE_MODULE_GLOBALS(initest)</div><div class="line"></div><div class="line">PHP_INI_BEGIN()</div><div class="line">    STD_PHP_INI_ENTRY(<span class="string">"initest.userage"</span>,<span class="string">"1"</span>, PHP_INI_ALL, OnUpdateLong, userage, zend_initest_globals, initest_globals)</div><div class="line">    STD_PHP_INI_ENTRY(<span class="string">"initest.username"</span>,<span class="string">"username"</span>, PHP_INI_ALL, OnUpdateString, username, zend_initest_globals, initest_globals)</div><div class="line">PHP_INI_END()</div><div class="line"></div><div class="line"></div><div class="line">PHP_MINIT_FUNCTION(initest)</div><div class="line">&#123;</div><div class="line"></div><div class="line">REGISTER_INI_ENTRIES();</div><div class="line"><span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PHP_MSHUTDOWN_FUNCTION(initest)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* uncomment this line if you have INI entries</span></div><div class="line"><span class="comment">UNREGISTER_INI_ENTRIES();</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">UNREGISTER_INI_ENTRIES();</div><div class="line"><span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">php_initest_init_globals</span><span class="params">(zend_initest_globals *initest_globals)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//initest_globals-&gt;userage = 1;</span></div><div class="line"><span class="comment">//initest_globals-&gt;username = "testusername";</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">PHP_FUNCTION(ini_echo)</div><div class="line">&#123;</div><div class="line">    php_printf(<span class="string">"username:%s\n"</span>,INITEST_G(username));</div><div class="line">    php_printf(<span class="string">"userage:%d\n"</span>,INITEST_G(userage));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> zend_function_entry initest_functions[] = &#123;</div><div class="line">PHP_FE(confirm_initest_compiled,<span class="literal">NULL</span>)<span class="comment">/* For testing, remove later. */</span></div><div class="line">PHP_FE(ini_echo,<span class="literal">NULL</span>)<span class="comment">/* For testing, remove later. */</span></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in initest_functions[] */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="2-4-编译"><a href="#2-4-编译" class="headerlink" title="2.4 编译"></a>2.4 编译</h4><pre><code>* [root@bogon hello]# [root@localhost person]# ./configure &amp;&amp; make &amp;&amp; make install</code></pre><h4 id="2-5-扩展安装"><a href="#2-5-扩展安装" class="headerlink" title="2.5 扩展安装"></a>2.5 扩展安装</h4><pre><code>[initest]initest.userage=99initest.username=testextension=initest.so</code></pre><h5 id="2-6-扩展使用"><a href="#2-6-扩展使用" class="headerlink" title="2.6 扩展使用"></a>2.6 扩展使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@bogon tests]# cat test.php</div><div class="line">&lt;?php</div><div class="line"></div><div class="line">ini_echo();</div><div class="line"></div><div class="line">[root@bogon tests]# php test.php</div><div class="line">username:test</div><div class="line">userage:99</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><pre><code>仅属个人观点, 可以随意转载但保留以下信息作者：极品黑公子邮箱：x0hcker@gmail.com</code></pre><p>```</p>]]></content>
    
    <summary type="html">
    
      php7扩展开发[4]读取php.ini内容
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[3]类构造函数传参</title>
    <link href="//www.zwting.com/2017/08/03/2016-02-03-php-ext-3/"/>
    <id>//www.zwting.com/2017/08/03/2016-02-03-php-ext-3/</id>
    <published>2017-08-03T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需要实现的细节"><a href="#1-需要实现的细节" class="headerlink" title="1.需要实现的细节"></a>1.需要实现的细节</h3><ul><li>实现一个person类 ，实现一个doing方法和saying方法</li><li>在构造方法中传递一个数组，在doing中打印此数组</li><li>saying方法中，构建一个空数组，返回，不需要传参。</li></ul><h3 id="2-class扩展"><a href="#2-class扩展" class="headerlink" title="2.class扩展"></a>2.class扩展</h3><h4 id="2-1创建类的扩展："><a href="#2-1创建类的扩展：" class="headerlink" title="2.1创建类的扩展："></a>2.1创建类的扩展：</h4><p>[root@bogon ext]# cd /usr/local/src/php-7.0.3/ext</p><p>[root@bogon ext]# ./ext_skel –extname=person</p><h4 id="2-2-修改配置"><a href="#2-2-修改配置" class="headerlink" title="2.2 修改配置"></a>2.2 修改配置</h4><p>[root@bogon ext]# vim person/config.m4</p><ul><li>dnl PHP_ARG_WITH(person, for person support,</li><li>dnl Make sure that the comment is aligned:</li><li>dnl [  –with-person             Include person support])</li><li>更改为：</li><li>PHP_ARG_WITH(person, for person support,</li><li>dnl Make sure that the comment is aligned:</li><li>[  –with-person             Include person support])</li></ul><h4 id="2-3-实现代码"><a href="#2-3-实现代码" class="headerlink" title="2.3 实现代码"></a>2.3 实现代码</h4><p>在php_person.h头中加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> zend_class_entry *person_ce;</div><div class="line"></div><div class="line">PHP_METHOD(person_ce,__construct);</div><div class="line">PHP_METHOD(person_ce,saying);</div><div class="line">PHP_METHOD(person_ce,doing);</div></pre></td></tr></table></figure><p>在person.c头中加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ZEND_BEGIN_ARG_INFO_EX(global_config_arg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</div><div class="line">ZEND_ARG_INFO(<span class="number">0</span>, global_config)</div><div class="line">ZEND_END_ARG_INFO()</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明构造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(person,__construct)&#123;</div><div class="line"></div><div class="line">zval *array_config;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"a"</span>, &amp;array_config) == FAILURE) &#123;</div><div class="line"></div><div class="line">RETURN_NULL();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//php_var_dump( &amp;array_config,1 TSRMLS_CC);</span></div><div class="line">zend_update_property(person_ce, getThis(), <span class="string">"config"</span>, <span class="keyword">sizeof</span>(<span class="string">"config"</span>)<span class="number">-1</span>, array_config TSRMLS_CC);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明析造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(person,__destruct)&#123;</div><div class="line"></div><div class="line"></div><div class="line">zend_printf(<span class="string">"destruct\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_METHOD(person,doing)&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//array_init(return_value);</span></div><div class="line">zval  *array_config;</div><div class="line">zval  rv; <span class="comment">//php &gt;=7.0</span></div><div class="line"></div><div class="line">array_config = zend_read_property(person_ce, getThis(), <span class="string">"config"</span>, <span class="keyword">sizeof</span>(<span class="string">"config"</span>)<span class="number">-1</span>, <span class="number">0</span>, &amp;rv TSRMLS_DC);</div><div class="line"></div><div class="line"><span class="keyword">if</span>( Z_TYPE_P(array_config) == IS_NULL || Z_TYPE_P(array_config) != IS_ARRAY )&#123;</div><div class="line"><span class="comment">//zend_error(E_ERROR, "framework config error!");</span></div><div class="line">RETURN_FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="comment">//php_var_dump(&amp;array_config, 1 TSRMLS_CC);</span></div><div class="line"></div><div class="line"></div><div class="line">RETURN_ZVAL(array_config, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">   <span class="comment">//zend_printf("doing\n");</span></div><div class="line">        </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND_METHOD(person,saying)&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (zend_parse_parameters_none() == FAILURE) &#123;</div><div class="line"></div><div class="line">RETURN_FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    array_init(return_value);</div><div class="line"><span class="comment">//zend_printf("saying\n");</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//这个函数需要加上声明，去掉了没用的test函数</span></div><div class="line"><span class="keyword">const</span> zend_function_entry person_functions[] = &#123;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_ME(person, __construct, global_config_arg, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">ZEND_ME(person,doing,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">ZEND_ME(person,saying,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">ZEND_ME(person,__destruct,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_DTOR)</div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in person_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//将类和方法注册到zend</span></div><div class="line">PHP_MINIT_FUNCTION(person)</div><div class="line">&#123;</div><div class="line">       zend_class_entry ce;</div><div class="line">       INIT_CLASS_ENTRY(ce, <span class="string">"person"</span>, person_functions);</div><div class="line">       person_ce = zend_register_internal_class(&amp;ce TSRMLS_CC);</div><div class="line"></div><div class="line">       zend_declare_property_null(person_ce,<span class="string">"saying"</span>,<span class="built_in">strlen</span>(<span class="string">"saying"</span>),ZEND_ACC_PUBLIC);</div><div class="line">       zend_declare_property_null(person_ce,<span class="string">"doing"</span>,<span class="built_in">strlen</span>(<span class="string">"doing"</span>),ZEND_ACC_PUBLIC);</div><div class="line"></div><div class="line"><span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-4-编译"><a href="#2-4-编译" class="headerlink" title="2.4 编译"></a>2.4 编译</h4><pre><code>* [root@bogon hello]# [root@localhost person]# ./configure &amp;&amp; make &amp;&amp; make install</code></pre><h4 id="2-5-扩展安装"><a href="#2-5-扩展安装" class="headerlink" title="2.5 扩展安装"></a>2.5 扩展安装</h4><pre><code>1. 改更php.ini 加上[person] extenstion=person.so</code></pre><h5 id="2-6-扩展使用"><a href="#2-6-扩展使用" class="headerlink" title="2.6 扩展使用"></a>2.6 扩展使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@bogon tests]# cat test.php</div><div class="line">&lt;?php</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">n = new person(array(<span class="string">'key'</span>=&gt;<span class="string">'value'</span>));</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">n-&gt;saying(<span class="string">'error'</span>));</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">n-&gt;saying());</span></div><div class="line"><span class="meta">var_dump($</span><span class="bash">n-&gt;doing());</span></div><div class="line"></div><div class="line"></div><div class="line">[root@localhost tests]# php test.php</div><div class="line">PHP Warning:  person::saying() expects exactly 0 parameters, 1 given in /usr/local/src/php-7.0.3/ext/person/tests/test.php on line 5</div><div class="line">bool(false)</div><div class="line">array(0) &#123;</div><div class="line">&#125;</div><div class="line">array(1) &#123;</div><div class="line">  ["key"]=&gt;</div><div class="line">  string(5) "value"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-引用宏说明"><a href="#3-引用宏说明" class="headerlink" title="3.引用宏说明"></a>3.引用宏说明</h3><h5 id="3-1-定义参数宏-Zend-zend-API-h"><a href="#3-1-定义参数宏-Zend-zend-API-h" class="headerlink" title="3.1 定义参数宏 Zend/zend_API.h"></a>3.1 定义参数宏 Zend/zend_API.h</h5><pre><code>[root@bogon php-7.0.3]# grep -A 10  &apos;ZEND_BEGIN_ARG_INFO_EX&apos; ./Zend/*.h#define ZEND_BEGIN_ARG_INFO_EX(name, _unused, return_reference, required_num_args)    \static const zend_internal_arg_info name[] = { \    { (const char*)(zend_uintptr_t)(required_num_args), NULL, 0, return_reference, 0, 0 },#define ZEND_BEGIN_ARG_INFO(name, _unused)\ZEND_BEGIN_ARG_INFO_EX(name, 0, ZEND_RETURN_VALUE, -1)#define ZEND_END_ARG_INFO()        };//宏说明ZEND_BEGIN_ARG_INFO(name, pass_rest_by_reference) //开始参数块定义，pass_rest_by_reference为1时，强制所有参数为引用类型ZEND_END_ARG_INFO() //结束参数块定义ZEND_ARG_INFO //声明普通参数，可以用来表示PHP中的int, float, double, string等基本数据类型ZEND_ARG_OBJ_INFO //声明对象类型的参数ZEND_ARG_ARRAY_INFO //声明数组类型的参数ZEND_ARG_PASS_INFO(pass_by_ref)  //pass_by_ref为1时，强制设置后续的参数为引用类型 zend_internal_arg_info结构定义在./Zend/zend_compile.h:typedef struct _zend_internal_arg_info {        const char *name; //参数的名称        const char *class_name; //当参数类型为类时，指定类的名称        zend_uchar type_hint;        zend_uchar pass_by_reference;//是否设置为引用，即使用&amp;操作符        zend_bool allow_null; //是否允许设置为null        zend_bool is_variadic;} zend_internal_arg_info;</code></pre><h5 id="3-2-定义返回值的宏-Zend-zend-API-h"><a href="#3-2-定义返回值的宏-Zend-zend-API-h" class="headerlink" title="3.2 定义返回值的宏 Zend/zend_API.h"></a>3.2 定义返回值的宏 Zend/zend_API.h</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_BOOL</span>(b)                                  <span class="selector-tag">ZVAL_BOOL</span>(return_value, b)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_NULL</span>()                                   <span class="selector-tag">ZVAL_NULL</span>(return_value)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_LONG</span>(l)                                  <span class="selector-tag">ZVAL_LONG</span>(return_value, l)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_DOUBLE</span>(d)                                <span class="selector-tag">ZVAL_DOUBLE</span>(return_value, d)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_STR</span>(s)                                   <span class="selector-tag">ZVAL_STR</span>(return_value, s)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_INTERNED_STR</span>(s)                  <span class="selector-tag">ZVAL_INTERNED_STR</span>(return_value, s)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_NEW_STR</span>(s)                               <span class="selector-tag">ZVAL_NEW_STR</span>(return_value, s)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_STR_COPY</span>(s)                              <span class="selector-tag">ZVAL_STR_COPY</span>(return_value, s)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_STRING</span>(s)                                <span class="selector-tag">ZVAL_STRING</span>(return_value, s)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_STRINGL</span>(s, l)                    <span class="selector-tag">ZVAL_STRINGL</span>(return_value, s, l)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_EMPTY_STRING</span>()                   <span class="selector-tag">ZVAL_EMPTY_STRING</span>(return_value)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_RES</span>(r)                                   <span class="selector-tag">ZVAL_RES</span>(return_value, r)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_ARR</span>(r)                                   <span class="selector-tag">ZVAL_ARR</span>(return_value, r)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_OBJ</span>(r)                                   <span class="selector-tag">ZVAL_OBJ</span>(return_value, r)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_ZVAL</span>(zv, copy, dtor)             <span class="selector-tag">ZVAL_ZVAL</span>(return_value, zv, copy, dtor)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_FALSE</span>                                    <span class="selector-tag">ZVAL_FALSE</span>(return_value)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETVAL_TRUE</span>                                     <span class="selector-tag">ZVAL_TRUE</span>(return_value)</div><div class="line"></div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_BOOL</span>(b)                                  &#123; <span class="selector-tag">RETVAL_BOOL</span>(b); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_NULL</span>()                                   &#123; <span class="selector-tag">RETVAL_NULL</span>(); <span class="selector-tag">return</span>;&#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_LONG</span>(l)                                  &#123; <span class="selector-tag">RETVAL_LONG</span>(l); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_DOUBLE</span>(d)                                &#123; <span class="selector-tag">RETVAL_DOUBLE</span>(d); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_STR</span>(s)                                   &#123; <span class="selector-tag">RETVAL_STR</span>(s); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_INTERNED_STR</span>(s)                  &#123; <span class="selector-tag">RETVAL_INTERNED_STR</span>(s); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_NEW_STR</span>(s)                               &#123; <span class="selector-tag">RETVAL_NEW_STR</span>(s); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_STR_COPY</span>(s)                              &#123; <span class="selector-tag">RETVAL_STR_COPY</span>(s); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_STRING</span>(s)                                &#123; <span class="selector-tag">RETVAL_STRING</span>(s); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_STRINGL</span>(s, l)                    &#123; <span class="selector-tag">RETVAL_STRINGL</span>(s, l); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_EMPTY_STRING</span>()                   &#123; <span class="selector-tag">RETVAL_EMPTY_STRING</span>(); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_RES</span>(r)                                   &#123; <span class="selector-tag">RETVAL_RES</span>(r); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_ARR</span>(r)                                   &#123; <span class="selector-tag">RETVAL_ARR</span>(r); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_OBJ</span>(r)                                   &#123; <span class="selector-tag">RETVAL_OBJ</span>(r); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_ZVAL</span>(zv, copy, dtor)             &#123; <span class="selector-tag">RETVAL_ZVAL</span>(zv, copy, dtor); <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_FALSE</span>                                    &#123; <span class="selector-tag">RETVAL_FALSE</span>; <span class="selector-tag">return</span>; &#125;</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">RETURN_TRUE</span>                                     &#123; <span class="selector-tag">RETVAL_TRUE</span>; <span class="selector-tag">return</span>; &#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>)返回数组</div><div class="line"><span class="selector-tag">array_init</span>(return_value);<span class="comment">//初始化return_value成数组，此操作完后就可以返回一个空的数组</span></div><div class="line"></div><div class="line"><span class="selector-tag">b</span>)返回<span class="selector-tag">object</span></div><div class="line"><span class="selector-tag">object_init</span>(return_value);<span class="comment">//初始化return_value成Object，此操作完成后返回一个空的对像</span></div></pre></td></tr></table></figure><h5 id="3-3-类访问控制掩码-Zend-zend-compile-h"><a href="#3-3-类访问控制掩码-Zend-zend-compile-h" class="headerlink" title="3.3 类访问控制掩码 ./Zend/zend_compile.h"></a>3.3 类访问控制掩码 ./Zend/zend_compile.h</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* method flags (types) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_STATIC                 0x01</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_ABSTRACT               0x02</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_FINAL                  0x04</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_IMPLEMENTED_ABSTRACT           0x08</span></div><div class="line"></div><div class="line"><span class="comment">/* class flags (types) */</span></div><div class="line"><span class="comment">/* ZEND_ACC_IMPLICIT_ABSTRACT_CLASS is used for abstract classes (since it is set by any abstract method even interfaces MAY have it s</span></div><div class="line"><span class="comment">/* ZEND_ACC_EXPLICIT_ABSTRACT_CLASS denotes that a class was explicitly defined as abstract by using the keyword. */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_IMPLICIT_ABSTRACT_CLASS        0x10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_EXPLICIT_ABSTRACT_CLASS        0x20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_INTERFACE                          0x40</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_TRAIT                                          0x80</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_ANON_CLASS                 0x100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_ANON_BOUND                 0x200</span></div><div class="line"></div><div class="line"><span class="comment">/* method flags (visibility) */</span></div><div class="line"><span class="comment">/* The order of those must be kept - public &lt; protected &lt; private */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_PUBLIC         0x100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_PROTECTED      0x200</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_PRIVATE        0x400</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_PPP_MASK  (ZEND_ACC_PUBLIC | ZEND_ACC_PROTECTED | ZEND_ACC_PRIVATE)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_CHANGED        0x800</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_IMPLICIT_PUBLIC        0x1000</span></div><div class="line"></div><div class="line"><span class="comment">/* method flags (special method detection) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_CTOR           0x2000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_DTOR           0x4000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_ACC_CLONE          0x8000</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[3]类构造函数传参
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[2]-怎么样定义一个类</title>
    <link href="//www.zwting.com/2017/08/02/2016-02-02-php-ext-2/"/>
    <id>//www.zwting.com/2017/08/02/2016-02-02-php-ext-2/</id>
    <published>2017-08-02T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需要实现的细节"><a href="#1-需要实现的细节" class="headerlink" title="1.需要实现的细节"></a>1.需要实现的细节</h3><ul><li>实现一个person类</li><li>实现一个doing方法和saying方法</li></ul><h3 id="2-第一个扩展"><a href="#2-第一个扩展" class="headerlink" title="2.第一个扩展"></a>2.第一个扩展</h3><h4 id="2-1创建类的扩展："><a href="#2-1创建类的扩展：" class="headerlink" title="2.1创建类的扩展："></a>2.1创建类的扩展：</h4><p>[root@bogon ext]# cd /usr/local/src/php-7.0.3/ext</p><p>[root@bogon ext]# ./ext_skel –extname=person</p><h4 id="2-2-修改配置"><a href="#2-2-修改配置" class="headerlink" title="2.2 修改配置"></a>2.2 修改配置</h4><p>[root@bogon ext]# vim person/config.m4</p><ul><li>dnl PHP_ARG_WITH(person, for person support,</li><li>dnl Make sure that the comment is aligned:</li><li>dnl [  –with-person             Include person support])</li><li>更改为：</li><li>PHP_ARG_WITH(person, for person support,</li><li>dnl Make sure that the comment is aligned:</li><li>[  –with-person             Include person support])</li></ul><h4 id="2-3-实现代码"><a href="#2-3-实现代码" class="headerlink" title="2.3 实现代码"></a>2.3 实现代码</h4><p>在php_person.h头中加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> zend_class_entry *person_ce;</div><div class="line"></div><div class="line">PHP_METHOD(person_ce,__construct);</div><div class="line">PHP_METHOD(person_ce,saying);</div><div class="line">PHP_METHOD(person_ce,doing);</div></pre></td></tr></table></figure><p>在person.c头中加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明构造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(person,__construct)&#123;</div><div class="line"></div><div class="line">        zval *pThis;</div><div class="line">        pThis = getThis();</div><div class="line"></div><div class="line"></div><div class="line">zend_printf(<span class="string">"construct\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 声明析造函数</span></div><div class="line"><span class="comment"> * @param</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ZEND_METHOD(person,__destruct)&#123;</div><div class="line"></div><div class="line"></div><div class="line">zend_printf(<span class="string">"destruct\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_METHOD(person,doing)&#123;</div><div class="line"></div><div class="line"></div><div class="line">zend_printf(<span class="string">"doing\n"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND_METHOD(person,saying)&#123;</div><div class="line"></div><div class="line">zend_printf(<span class="string">"saying\n"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//这个函数需要加上声明，去掉了没用的test函数</span></div><div class="line"><span class="keyword">const</span> zend_function_entry person_functions[] = &#123;</div><div class="line"></div><div class="line"></div><div class="line">ZEND_ME(person, __construct, global_config_arg, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)</div><div class="line">ZEND_ME(person,doing,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC) ZEND_ME(person,saying,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC)</div><div class="line">ZEND_ME(person,__destruct,<span class="literal">NULL</span>,ZEND_ACC_PUBLIC|ZEND_ACC_DTOR)</div><div class="line"></div><div class="line">PHP_FE_END<span class="comment">/* Must be the last line in person_functions[] */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//将类和方法注册到zend</span></div><div class="line">PHP_MINIT_FUNCTION(person)</div><div class="line">&#123;</div><div class="line">       zend_class_entry ce;</div><div class="line">       INIT_CLASS_ENTRY(ce, <span class="string">"person"</span>, person_functions);</div><div class="line">       person_ce = zend_register_internal_class(&amp;ce TSRMLS_CC);</div><div class="line"></div><div class="line">       zend_declare_property_null(person_ce,<span class="string">"saying"</span>,<span class="built_in">strlen</span>(<span class="string">"saying"</span>),ZEND_ACC_PUBLIC);</div><div class="line">       zend_declare_property_null(person_ce,<span class="string">"doing"</span>,<span class="built_in">strlen</span>(<span class="string">"doing"</span>),ZEND_ACC_PUBLIC);</div><div class="line"></div><div class="line"><span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-4-编译"><a href="#2-4-编译" class="headerlink" title="2.4 编译"></a>2.4 编译</h4><pre><code>* [root@bogon hello]# [root@localhost person]# ./configure &amp;&amp; make &amp;&amp; make install</code></pre><h4 id="2-5-扩展安装"><a href="#2-5-扩展安装" class="headerlink" title="2.5 扩展安装"></a>2.5 扩展安装</h4><pre><code>1. 改更php.ini 加上[person] extenstion=person.so</code></pre><h5 id="2-6-扩展使用"><a href="#2-6-扩展使用" class="headerlink" title="2.6 扩展使用"></a>2.6 扩展使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@bogon tests]# cat test.php</div><div class="line">&lt;?php</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash">n = new person();</span></div><div class="line">echo $n-&gt;saying();</div><div class="line">echo $n-&gt;doing();</div><div class="line"></div><div class="line">[root@localhost tests]# php test.php</div><div class="line">construct</div><div class="line">saying</div><div class="line">doing</div><div class="line">destruct</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[1]-helloword
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php7扩展开发[1]-helloword</title>
    <link href="//www.zwting.com/2017/08/01/2016-02-01-php-ext-1/"/>
    <id>//www.zwting.com/2017/08/01/2016-02-01-php-ext-1/</id>
    <published>2017-08-01T09:09:59.000Z</published>
    <updated>2017-09-18T07:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h3><ul><li>centos 7.1</li><li>php 7.0.3</li></ul><h5 id="1-1-RPM安装PHP"><a href="#1-1-RPM安装PHP" class="headerlink" title="1.1 RPM安装PHP"></a>1.1 RPM安装PHP</h5><ul><li>rpm -Uvh <a href="https://mirror.webtatic.com/yum/el7/webtatic-release.rpm" target="_blank" rel="external">https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</a> </li><li>yum install php70w</li><li>php -v 看一下 7.0.3</li><li>php -m 看一下 php70w-devel, php70w-opcache模块安装没有，没有的话安装一下 </li></ul><h5 id="1-2-下载php的源码包"><a href="#1-2-下载php的源码包" class="headerlink" title="1.2 下载php的源码包"></a>1.2 下载php的源码包</h5><ul><li><a href="http://hk1.php.net/distributions/php-7.0.3.tar.gz" target="_blank" rel="external">http://hk1.php.net/distributions/php-7.0.3.tar.gz</a></li><li>把源码放在/usr/local/src/下解压</li></ul><h3 id="2-第一个扩展"><a href="#2-第一个扩展" class="headerlink" title="2.第一个扩展"></a>2.第一个扩展</h3><h4 id="2-1-输入："><a href="#2-1-输入：" class="headerlink" title="2.1 输入："></a>2.1 输入：</h4><p>[root@bogon ext]# cd /usr/local/src/php-7.0.3/ext</p><p>[root@bogon ext]# ./ext_skel –extname=hello</p><h4 id="2-1-输出："><a href="#2-1-输出：" class="headerlink" title="2.1 输出："></a>2.1 输出：</h4><p>Creating directory hello</p><p>Creating basic files: config.m4 config.w32 .gitignore hello.c php_hello.h<br>CREDITS EXPERIMENTAL tests/001.phpt hello.php [done].</p><p>To use your new extension, you will have to execute the following steps:</p><ol><li>$ cd ..</li><li>$ vi ext/hello/config.m4</li><li>$ ./buildconf</li><li>$ ./configure –[with|enable]-hello</li><li>$ make</li><li>$ ./sapi/cli/php -f ext/hello/hello.php</li><li>$ vi ext/hello/hello.c</li><li>$ make</li></ol><p>Repeat steps 3-6 until you are satisfied with ext/hello/config.m4 and<br>step 6 confirms that your module is compiled into PHP. Then, start writing<br>code and repeat the last two steps as often as necessary.</p><h4 id="2-2-输入："><a href="#2-2-输入：" class="headerlink" title="2.2 输入："></a>2.2 输入：</h4><p>[root@bogon ext]# tree hello/</p><h4 id="2-2-输出："><a href="#2-2-输出：" class="headerlink" title="2.2 输出："></a>2.2 输出：</h4><ol><li>hello/</li><li>├── config.m4</li><li>├── config.w32</li><li>├── CREDITS</li><li>├── EXPERIMENTAL</li><li>├── hello.c</li><li>├── hello.php</li><li>├── php_hello.h</li><li>└── tests</li><li>占个位└── 001.phpt</li></ol><h4 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h4><p>[root@bogon ext]# vim hello/config.m4</p><ul><li>dnl PHP_ARG_WITH(hello, for hello support,</li><li>dnl Make sure that the comment is aligned:</li><li>dnl [  –with-hello             Include hello support])</li><li>更改为：</li><li>PHP_ARG_WITH(hello, for hello support,</li><li>dnl Make sure that the comment is aligned:</li><li>[  –with-hello             Include hello support])</li></ul><h4 id="2-4-实现代码"><a href="#2-4-实现代码" class="headerlink" title="2.4 实现代码"></a>2.4 实现代码</h4><pre><code>* 新增 声明函数 PHP_FE(hello,    NULL)；*     -     const zend_function_entry hello_functions[] = {    -         PHP_FE(hello,    NULL)        /* For testing, remove later. */    -         PHP_FE(confirm_hello_compiled,    NULL)    -        /* For testing, remove later. */    -        PHP_FE_END    /* Must be the last line in hello_functions[] */    -    };*  新增 函数实现 PHP_FE(hello,    NULL)；放在PHP_FUNCTION(confirm_hello_compiled)上面*      - PHP_FUNCTION(hello)    - {    -     zend_string *strg;    -    strg = strpprintf(0, &quot;hello word&quot;);    -    RETURN_STR(strg);    - }</code></pre><h4 id="2-4-编译"><a href="#2-4-编译" class="headerlink" title="2.4 编译"></a>2.4 编译</h4><pre><code>* [root@bogon hello]# pwd* /usr/local/src/php-7.0.3/ext/hello* [root@bogon hello]# ./configure* ............. * [root@bogon hello]# make* .............* [root@bogon hello]# ll modules/* -rw-r--r--. 1 root root   915 Mar 16 21:58 hello.la* -rwxr-xr-x. 1 root root 31422 Mar 16 21:58 hello.so</code></pre><h4 id="2-5-扩展安装"><a href="#2-5-扩展安装" class="headerlink" title="2.5 扩展安装"></a>2.5 扩展安装</h4><pre><code>1. 改更php.ini 加上[hello] extenstion=hello.so2. 安放扩展so文件，如果你不知道PHP扩展在哪，可以用如下方法找3. [root@bogon hello]# find / -name opcache.so4. cp modules/hello.so /usr/lib64/php/modules5. php -m|grep hello 会出现hello字样</code></pre><h5 id="2-6-扩展使用"><a href="#2-6-扩展使用" class="headerlink" title="2.6 扩展使用"></a>2.6 扩展使用</h5><pre><code>[root@bogon tests]# cat test.php&lt;?phpecho hello();echo &quot;\r\n&quot;;[root@bogon tests]# php test.phphello word  </code></pre><p>&gt;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      php7扩展开发[1]-helloword
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[18] tornado之TCPServer</title>
    <link href="//www.zwting.com/2017/07/29/2017-07-29-training-python-17/"/>
    <id>//www.zwting.com/2017/07/29/2017-07-29-training-python-17/</id>
    <published>2017-07-29T10:30:00.000Z</published>
    <updated>2017-09-15T03:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="C10K问题"><a href="#C10K问题" class="headerlink" title="C10K问题"></a>C10K问题</h3><p>C10K问题的一个文章：<a href="http://www.kegel.com/c10k.html" target="_blank" rel="external">http://www.kegel.com/c10k.html</a></p><h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><ul><li><p>修改系统打开文件限制</p>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">limit -<span class="keyword">n</span> 查看到当前设置 </div><div class="line">grep '<span class="keyword">open</span> files' /proc/$(<span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">run</span>/xxxx.pid)/limits</div><div class="line">   </div><div class="line">打开 /etc/security/limits.<span class="keyword">conf</span> 并添加（如果已经存在，则修改数值）</div><div class="line"><span class="comment">* soft nofile 1000000</span></div><div class="line"><span class="comment">* hard nofile 1000000</span></div></pre></td></tr></table></figure></li></ul><ul><li><p>网络端口限制修改</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysctl.conf</div><div class="line">net.nf_conntrack_max= <span class="number">6553500</span></div><div class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_local_port_range</span>=<span class="string">"1024 65535"</span></div><div class="line"></div><div class="line">使之生效</div><div class="line">sysctl -p</div><div class="line">vi /proc/sys/net/nf_conntrack_max</div><div class="line">查看修改是否成功</div></pre></td></tr></table></figure></li><li><p>解决大量TCP的TIME_WAIT问题</p></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">查看服务器中TCP连接的状态。</div><div class="line">netstat -<span class="keyword">n</span> | awk '/^tcp/ &#123;++S[<span class="variable">$NF</span>]&#125; END &#123;<span class="keyword">for</span>(a <span class="keyword">in</span> S) <span class="keyword">print</span> a, S[a]&#125;'</div><div class="line"></div><div class="line">修改系统参数，缓解TIME_WAIT问题</div><div class="line">vi /etc/sysctl.<span class="keyword">conf</span></div><div class="line"><span class="keyword">net</span>.ipv4.tcp_tw_reuse=1</div><div class="line"><span class="keyword">net</span>.ipv4.tcp_tw_recycle=1</div><div class="line"><span class="keyword">net</span>.ipv4.tcp_max_tw_buckets=5000</div><div class="line"><span class="keyword">net</span>.ipv4.tcp_syncookies=1</div><div class="line"></div><div class="line">使之生效</div><div class="line">sysctl -p</div></pre></td></tr></table></figure><h3 id="TcpServer代码"><a href="#TcpServer代码" class="headerlink" title="TcpServer代码"></a>TcpServer代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> process</div><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> web, netutil</div><div class="line"><span class="keyword">from</span> tornado.tcpserver <span class="keyword">import</span> TCPServer</div><div class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, os ,syslog</div><div class="line"><span class="keyword">import</span> json, base64</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_mod</span><span class="params">(ip, data)</span>:</span></div><div class="line">    <span class="comment">#解密内容</span></div><div class="line">    data = json.loads(base64.b64decode(data))</div><div class="line">    print(data)</div><div class="line"></div><div class="line">    <span class="comment">#db = custom_mongodb(using='logs')</span></div><div class="line">    <span class="comment">#db.insert('test', **data)</span></div><div class="line">    <span class="comment">#db.conn.disconnect()</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MtaskConnection</span><span class="params">(object)</span>:</span></div><div class="line">    stream_set = set([])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pool, stream, address)</span>:</span></div><div class="line">        self.pool = pool</div><div class="line">        self.stream = stream</div><div class="line">        self.address = address</div><div class="line">        self.stream_set.add(self.stream)</div><div class="line"></div><div class="line">        self.stream.set_close_callback(self._on_close)</div><div class="line">        self.stream.read_until(<span class="string">'\n'</span>, self._on_read_line)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_on_read_line</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.pool.apply_async(sub_mod, (self.address[<span class="number">0</span>], data))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_on_close</span><span class="params">(self)</span>:</span></div><div class="line">        MtaskConnection.stream_set.remove(self.stream)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonitorTCPServer</span><span class="params">(TCPServer)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        TCPServer.__init__(self)</div><div class="line">        self.pool = multiprocessing.Pool(processes=<span class="number">8</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_stream</span><span class="params">(self, stream, address)</span>:</span></div><div class="line"></div><div class="line">        MtaskConnection(self.pool, stream, address)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    sockets = netutil.bind_sockets(<span class="number">8080</span>)</div><div class="line">    process.fork_processes(<span class="number">0</span>)</div><div class="line"></div><div class="line">    server = MonitorTCPServer()</div><div class="line">    server.add_sockets(sockets)</div><div class="line">    ioloop.IOLoop.instance().start()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    syslog.openlog(<span class="string">"monitor_svr"</span>, <span class="number">0</span>, syslog.LOG_LOCAL6)</div><div class="line">    main()</div><div class="line">    syslog.closelog()</div></pre></td></tr></table></figure><h3 id="TcpClient代码"><a href="#TcpClient代码" class="headerlink" title="TcpClient代码"></a>TcpClient代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  socket</div><div class="line"><span class="keyword">import</span>  base64</div><div class="line"><span class="keyword">import</span>  json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clint</span><span class="params">()</span>:</span></div><div class="line">    host = <span class="string">'127.0.0.1'</span></div><div class="line">    port = <span class="number">8080</span></div><div class="line">    bufsize = <span class="number">1024</span></div><div class="line">    addr = (host, port)</div><div class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    client.connect(addr)</div><div class="line"></div><div class="line">    data =&#123;<span class="string">"value"</span>:<span class="string">"testtestest"</span>&#125;</div><div class="line"></div><div class="line">    <span class="comment"># json化返回数据</span></div><div class="line">    client.send(base64.b64encode(json.dumps(data)) + <span class="string">'\n'</span>)</div><div class="line">    client.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    clint()</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[18] tornado之TCPServer
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="phpmongodb" scheme="//www.zwting.com/tags/phpmongodb/"/>
    
  </entry>
  
  <entry>
    <title>python技术分享[16] python使用ssh隧道连接内网开放的mysql</title>
    <link href="//www.zwting.com/2017/07/28/2017-07-28-training-python-16/"/>
    <id>//www.zwting.com/2017/07/28/2017-07-28-training-python-16/</id>
    <published>2017-07-28T10:30:00.000Z</published>
    <updated>2017-09-15T03:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><ul><li>数据库只允许内网访问</li><li>服务器公网SSH访问</li></ul><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><ul><li>pip install sshtunnel -i <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="external">https://pypi.doubanio.com/simple/</a>  </li><li>pip install MySQL-python==1.2.5 -i <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="external">https://pypi.doubanio.com/simple/</a></li><li>[关键是sshtunnel]  </li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> MySQLdb  </div><div class="line">from sshtunnel <span class="built_in">import</span> SSHTunnelForwarder  </div><div class="line"><span class="built_in">import</span> MySQLdb.cursors  </div><div class="line"></div><div class="line">def dbconnect_ssh(ssh_host,ssh_port,keyfile,ssh_user,db_host,db_name,sql,db_port,db_user,db_passwd):  </div><div class="line">    <span class="keyword">with</span> SSHTunnelForwarder(</div><div class="line">            (ssh_host, ssh_port),</div><div class="line">            <span class="comment">#ssh_password="sshpasswd",</span></div><div class="line">            <span class="attr">ssh_pkey=keyfile,</span></div><div class="line">            <span class="attr">ssh_username=ssh_user,</span></div><div class="line">            <span class="attr">remote_bind_address=(db_host,</span> db_port)</div><div class="line">    ) as server:</div><div class="line"></div><div class="line">        <span class="attr">db</span> = MySQLdb.connect(</div><div class="line">            <span class="attr">host='127.0.0.1',</span></div><div class="line">            <span class="attr">port=server.local_bind_port,</span></div><div class="line">            <span class="attr">user=db_user,</span></div><div class="line">            <span class="attr">passwd=db_passwd,</span></div><div class="line">            <span class="attr">db=db_name,</span></div><div class="line">            <span class="attr">charset="utf8",</span></div><div class="line">            <span class="attr">cursorclass=MySQLdb.cursors.DictCursor)</span></div><div class="line"></div><div class="line">        <span class="attr">cursor</span> = db.cursor()</div><div class="line"></div><div class="line">        try:</div><div class="line">            cursor.execute(sql)</div><div class="line">            <span class="attr">data</span> = cursor.fetchall()</div><div class="line">            db.commit()</div><div class="line">        except:</div><div class="line">            db.rollback()</div><div class="line"></div><div class="line">        <span class="attr">collect</span> = []</div><div class="line">        for result <span class="keyword">in</span> data:</div><div class="line">            collect.append(result)</div><div class="line"></div><div class="line">        db.close()</div><div class="line">        cursor.close()</div><div class="line"></div><div class="line">        return collect</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:  </div><div class="line">    <span class="attr">ssh_host</span> = <span class="string">"1.1.1.1"</span>           <span class="comment">#SSH服务器地址</span></div><div class="line">    <span class="attr">ssh_port</span> = <span class="number">22</span>                  <span class="comment">#SSH端口</span></div><div class="line">    <span class="attr">keyfile</span> = <span class="string">"/root/.ssh/id_rsa"</span>  <span class="comment">#SSH密钥</span></div><div class="line">    <span class="attr">ssh_user</span> = <span class="string">"leoiceo"</span>           <span class="comment">#SSH用户名</span></div><div class="line">    <span class="attr">db_host</span> = <span class="string">"192.168.1.1"</span>        <span class="comment">#数据库地址</span></div><div class="line">    <span class="attr">db_name</span> = 'mysql'              <span class="comment">#数据库名</span></div><div class="line">    <span class="attr">sql</span> = 'show databases;'        <span class="comment">#SQL</span></div><div class="line">    <span class="attr">db_port</span> = <span class="number">3306</span>                 <span class="comment">#数据库端口</span></div><div class="line">    <span class="attr">db_user</span> = 'root'               <span class="comment">#数据库用户名</span></div><div class="line">    <span class="attr">db_passwd</span> = '<span class="number">123456</span>'           <span class="comment">#数据库密码</span></div><div class="line">    <span class="attr">result</span> = dbconnect_ssh(ssh_host,ssh_port,keyfile,ssh_user,db_host,db_name,sql,db_port,db_user,db_passwd)</div><div class="line">    print result</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python技术分享[16] python使用ssh隧道连接内网开放的mysql
    
    </summary>
    
      <category term="python技术分享" scheme="//www.zwting.com/categories/python%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="phpmongodb" scheme="//www.zwting.com/tags/phpmongodb/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper的Cluster集群搭建及管理</title>
    <link href="//www.zwting.com/2017/07/07/2017-07-07-cluster-zookeeper-1/"/>
    <id>//www.zwting.com/2017/07/07/2017-07-07-cluster-zookeeper-1/</id>
    <published>2017-07-07T02:30:00.000Z</published>
    <updated>2017-09-15T03:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><ul><li>三台服务器实现zookeeper集群<ul><li>172.16.61.102  172.16.61.103  172.16.61.104</li></ul></li><li>安装目录 /opt 一切动作默认的目录</li></ul><h3 id="安装zookeeper-每台服务器"><a href="#安装zookeeper-每台服务器" class="headerlink" title="安装zookeeper[每台服务器]"></a>安装zookeeper[每台服务器]</h3><pre><code>wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gztar zxvf zookeeper-3.4.9.tar.gz ln -s zookeeper-3.4.9/ zookeeper</code></pre><h3 id="写zookeeper配置"><a href="#写zookeeper配置" class="headerlink" title="写zookeeper配置"></a>写zookeeper配置</h3><pre><code>cat conf/zoo.cfg tickTime=2000initLimit=10syncLimit=5clientPort=2181maxClientCnxns=0dataDir=/opt/zookeeper/datadataLogDir=/opt/zookeeper/logsserver.1=172.16.61.102:2888:3888server.2=172.16.61.103:2888:3888server.3=172.16.61.104:2888:3888</code></pre><h3 id="分发上面安装好的目录"><a href="#分发上面安装好的目录" class="headerlink" title="分发上面安装好的目录"></a>分发上面安装好的目录</h3><pre><code>scp -r /opt/zookeeper root@172.16.61.103:/optscp -r /opt/zookeeper root@172.16.61.104:/opt</code></pre><h3 id="安装zookeeper-每台服务器-1"><a href="#安装zookeeper-每台服务器-1" class="headerlink" title="安装zookeeper[每台服务器]"></a>安装zookeeper[每台服务器]</h3><pre><code>根据上面的配置server.1=172.16.61.102:2888:3888server.2=172.16.61.103:2888:3888server.3=172.16.61.104:2888:3888如下操作：echo &quot;1&quot; &gt; /opt/zookeeper/data/myid 在172.16.61.102上echo &quot;2&quot; &gt; /opt/zookeeper/data/myid 在172.16.61.103上echo &quot;3&quot; &gt; /opt/zookeeper/data/myid 在172.16.61.104上</code></pre><h3 id="启动zookeeper-每台服务器"><a href="#启动zookeeper-每台服务器" class="headerlink" title="启动zookeeper[每台服务器]"></a>启动zookeeper[每台服务器]</h3><p>/opt/zookeeper/bin/zkServer.sh start</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      zookeeper的Cluster集群搭建及管理
    
    </summary>
    
      <category term="集群搭建" scheme="//www.zwting.com/categories/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="集群搭建" scheme="//www.zwting.com/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Redis的Cluster集群搭建及管理</title>
    <link href="//www.zwting.com/2017/07/05/2017-07-05-cluster-redis-1/"/>
    <id>//www.zwting.com/2017/07/05/2017-07-05-cluster-redis-1/</id>
    <published>2017-07-05T12:30:00.000Z</published>
    <updated>2017-09-15T03:44:47.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><ul><li><p>三台服务器 </p><ul><li>172.16.61.102  172.16.61.103  172.16.61.104</li></ul></li><li><p>redis端口占有用情况</p><ul><li>172.16.61.102:6000  172.16.61.102:7000  </li><li>172.16.61.103:6000  172.16.61.103:7000  </li><li>172.16.61.104:6000  172.16.61.104:7000</li></ul></li></ul><h3 id="安装redis-每台服务器"><a href="#安装redis-每台服务器" class="headerlink" title="安装redis[每台服务器]"></a>安装redis[每台服务器]</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="comment">//download.redis.io/releases/redis-3.2.9.tar.gz</span></div><div class="line">tar zxf redis-<span class="number">3.2</span>.<span class="number">9</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> </div><div class="line">cd redis-<span class="number">3.2</span>.<span class="number">9</span></div><div class="line">make &amp;&amp; make install</div><div class="line">cp src/redis-trib<span class="selector-class">.rb</span> /usr/bin/</div><div class="line">cp src/redis-trib<span class="selector-class">.rb</span> /usr/local/bin/</div></pre></td></tr></table></figure><h3 id="安装redis-cluster-每台服务器"><a href="#安装redis-cluster-每台服务器" class="headerlink" title="安装redis cluster [每台服务器]"></a>安装redis cluster [每台服务器]</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">6000</span>/logs </div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">6000</span>/data </div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">6000</span>/<span class="keyword">conf</span> </div><div class="line"></div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">7000</span>/logs </div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">7000</span>/data </div><div class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="number">7000</span>/<span class="keyword">conf</span> </div><div class="line">```</div><div class="line"></div><div class="line">[root@yaliceshi-<span class="number">1</span>-<span class="number">2</span> <span class="keyword">opt</span>]# <span class="keyword">cat</span> /<span class="keyword">opt</span>/<span class="number">6000</span>/<span class="keyword">conf</span>/redis_6000.<span class="keyword">conf</span></div><div class="line"></div><div class="line">```</div><div class="line">port <span class="number">6000</span>  </div><div class="line">bind <span class="number">172.16</span>.<span class="number">61.102</span></div><div class="line">cluster-enabled yes  </div><div class="line">cluster-config-<span class="keyword">file</span> nodes.<span class="keyword">conf</span>  </div><div class="line">cluster-node-timeout <span class="number">5000</span></div><div class="line">cluster-slave-validity-factor <span class="number">10</span></div><div class="line">cluster-migration-barrier <span class="number">1</span></div><div class="line">cluster-require-full-coverage yes</div><div class="line">appendonly yes </div><div class="line">daemonize yes </div><div class="line">pidfile /<span class="keyword">opt</span>/<span class="number">6000</span>/redis.pid</div><div class="line">dir /<span class="keyword">opt</span>/<span class="number">6000</span>/data</div><div class="line">logfile /<span class="keyword">opt</span>/<span class="number">6000</span>/logs/error.<span class="built_in">log</span></div></pre></td></tr></table></figure><p>[root@yaliceshi-1-2 opt]# cat /opt/7000/conf/redis_7000.conf</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">port 7000  </div><div class="line">bind 172.16.61.102</div><div class="line"><span class="keyword">cluster</span>-enabled yes  </div><div class="line"><span class="keyword">cluster</span>-config-<span class="keyword">file</span> nodes.<span class="keyword">conf</span>  </div><div class="line"><span class="keyword">cluster</span>-node-timeout 5000</div><div class="line"><span class="keyword">cluster</span>-slave-validity-<span class="keyword">factor</span> 10</div><div class="line"><span class="keyword">cluster</span>-migration-barrier 1</div><div class="line"><span class="keyword">cluster</span>-require-full-coverage yes</div><div class="line">appendonly yes </div><div class="line">daemonize yes </div><div class="line">pidfile /opt/7000/redis.pid</div><div class="line"><span class="keyword">dir</span> /opt/7000/data</div><div class="line">logfile /opt/7000/logs/<span class="keyword">error</span>.<span class="built_in">log</span></div></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">redis-server /opt/<span class="number">6000</span>/conf/redis_6000.conf </div><div class="line">redis-server /opt/<span class="number">7000</span>/conf/redis_7000.conf </div><div class="line"></div><div class="line"><span class="string">```</span></div><div class="line"></div><div class="line">* 安装ruby</div><div class="line">* yum -y install ruby rubygems</div><div class="line">* wget https://rubygems.org/downloads/redis-<span class="number">3.3</span><span class="meta">.3</span>.gem</div><div class="line">* gem install -l redis-<span class="number">3.3</span><span class="meta">.3</span>.gem </div><div class="line">  </div><div class="line">* 创建集群</div><div class="line">* redis-trib.rb create --replicas <span class="number">1</span> <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span>  <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">7000</span>  <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">6000</span>  <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">7000</span>  <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">6000</span>  <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">7000</span></div><div class="line"></div><div class="line"><span class="string">```</span>  </div><div class="line">&gt;&gt;&gt; Creating cluster</div><div class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</div><div class="line">Using <span class="number">3</span> masters:</div><div class="line"><span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">6000</span></div><div class="line"><span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">6000</span></div><div class="line"><span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span></div><div class="line">Adding replica <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">7000</span> to <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">6000</span></div><div class="line">Adding replica <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">7000</span> to <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">6000</span></div><div class="line">Adding replica <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">7000</span> to <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">M:</span> 0fce21a91ba5be57f75e65953383fb968515c03a <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</div><div class="line"><span class="symbol">S:</span> 57601f37944296b3144261b304f2d18c044e610d <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">7000</span></div><div class="line">   replicates 0fce21a91ba5be57f75e65953383fb968515c03a</div><div class="line"><span class="symbol">M:</span> f551d92f7504cca5109b2ea9bee1e9a56b711ddc <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</div><div class="line"><span class="symbol">S:</span> b993661e480ff1005117a4b4418818798b0602ee <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">7000</span></div><div class="line">   replicates 39eb4b60328941c93569448fd8730dfa36a35515</div><div class="line"><span class="symbol">M:</span> 39eb4b60328941c93569448fd8730dfa36a35515 <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</div><div class="line"><span class="symbol">S:</span> 2a0e2fbcbea48b43f2f953fd84517c5a9cada9ce <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">7000</span></div><div class="line">   replicates f551d92f7504cca5109b2ea9bee1e9a56b711ddc</div><div class="line">Can I set the above configuration? (type <span class="string">'yes'</span> to accept): yes</div><div class="line">&gt;&gt;&gt; Nodes configuration updated</div><div class="line">&gt;&gt;&gt; Assign a different config epoch to <span class="number">each</span> node</div><div class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</div><div class="line">Waiting for the cluster to join...</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span>)</div><div class="line"><span class="symbol">M:</span> 0fce21a91ba5be57f75e65953383fb968515c03a <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</div><div class="line">   <span class="number">1</span> additional replica(s)</div><div class="line"><span class="symbol">S:</span> 2a0e2fbcbea48b43f2f953fd84517c5a9cada9ce <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">7000</span></div><div class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</div><div class="line">   replicates f551d92f7504cca5109b2ea9bee1e9a56b711ddc</div><div class="line"><span class="symbol">S:</span> 57601f37944296b3144261b304f2d18c044e610d <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.102</span>:<span class="number">7000</span></div><div class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</div><div class="line">   replicates 0fce21a91ba5be57f75e65953383fb968515c03a</div><div class="line"><span class="symbol">M:</span> 39eb4b60328941c93569448fd8730dfa36a35515 <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.104</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</div><div class="line">   <span class="number">1</span> additional replica(s)</div><div class="line"><span class="symbol">S:</span> b993661e480ff1005117a4b4418818798b0602ee <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">7000</span></div><div class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</div><div class="line">   replicates 39eb4b60328941c93569448fd8730dfa36a35515</div><div class="line"><span class="symbol">M:</span> f551d92f7504cca5109b2ea9bee1e9a56b711ddc <span class="number">172.16</span><span class="meta">.61</span><span class="meta">.103</span>:<span class="number">6000</span></div><div class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</div><div class="line">   <span class="number">1</span> additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All <span class="number">16384</span> slots covered</div></pre></td></tr></table></figure><ul><li>检查集群</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@yaliceshi-1-2 7000]</span># <span class="selector-tag">redis-cli</span> <span class="selector-tag">-h</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.102</span>  <span class="selector-tag">-p</span> 6000 <span class="selector-tag">cluster</span> <span class="selector-tag">nodes</span></div><div class="line">0<span class="selector-tag">fce21a91ba5be57f75e65953383fb968515c03a</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.102</span><span class="selector-pseudo">:6000</span> <span class="selector-tag">myself</span>,<span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 0 1 <span class="selector-tag">connected</span> 10923<span class="selector-tag">-16383</span></div><div class="line">2<span class="selector-tag">a0e2fbcbea48b43f2f953fd84517c5a9cada9ce</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.104</span><span class="selector-pseudo">:7000</span> <span class="selector-tag">slave</span> <span class="selector-tag">f551d92f7504cca5109b2ea9bee1e9a56b711ddc</span> 0 1499409685274 6 <span class="selector-tag">connected</span></div><div class="line">57601<span class="selector-tag">f37944296b3144261b304f2d18c044e610d</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.102</span><span class="selector-pseudo">:7000</span> <span class="selector-tag">slave</span> 0<span class="selector-tag">fce21a91ba5be57f75e65953383fb968515c03a</span> 0 1499409685274 2 <span class="selector-tag">connected</span></div><div class="line">39<span class="selector-tag">eb4b60328941c93569448fd8730dfa36a35515</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.104</span><span class="selector-pseudo">:6000</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1499409684775 5 <span class="selector-tag">connected</span> 0<span class="selector-tag">-5460</span></div><div class="line"><span class="selector-tag">b993661e480ff1005117a4b4418818798b0602ee</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.103</span><span class="selector-pseudo">:7000</span> <span class="selector-tag">slave</span> 39<span class="selector-tag">eb4b60328941c93569448fd8730dfa36a35515</span> 0 1499409683773 5 <span class="selector-tag">connected</span></div><div class="line"><span class="selector-tag">f551d92f7504cca5109b2ea9bee1e9a56b711ddc</span> 172<span class="selector-class">.16</span><span class="selector-class">.61</span><span class="selector-class">.103</span><span class="selector-pseudo">:6000</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1499409684274 3 <span class="selector-tag">connected</span> 5461<span class="selector-tag">-10922</span></div></pre></td></tr></table></figure><ul><li>参考:    <ul><li><a href="http://blog.csdn.net/reyleon/article/details/51454334" target="_blank" rel="external">http://blog.csdn.net/reyleon/article/details/51454334</a></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Redis的Cluster集群搭建及管理
    
    </summary>
    
      <category term="集群搭建" scheme="//www.zwting.com/categories/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="集群搭建" scheme="//www.zwting.com/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>业务环境概述</title>
    <link href="//www.zwting.com/2017/06/30/team-2/"/>
    <id>//www.zwting.com/2017/06/30/team-2/</id>
    <published>2017-06-30T02:30:00.000Z</published>
    <updated>2017-06-30T02:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="业务架构思路"><a href="#业务架构思路" class="headerlink" title="业务架构思路"></a>业务架构思路</h2><p>以公司级通用信息、通用服务、游戏可规范数据为依托，构建企业级运营分析平台。将账号充值支付系统和广告接入系统和游戏数据打通，扩展游戏与用户之间的关系，提高用户行为分析精确度。以为运营平台为入口，管控多个游戏，屏蔽多游戏间的不同点，方便快速接入管理工具，减少游戏后端每个游戏都做一遍管理工具的 。以统一账号支付系统为入口，管控多个游戏，屏蔽多游戏间的不同点，方便快速接入第三渠道，减少游戏后端工作量，保持游戏包的纯净。</p><h2 id="管理流程"><a href="#管理流程" class="headerlink" title="管理流程"></a>管理流程</h2><ul><li>1、事件管理</li><li>2、问题管理 </li><li>3、配置管理</li><li>4、变更管理</li><li>5、发布管理</li></ul><p>事件管理的目标是在不影响业务的情况下，尽可能快速的恢复服务，从而保证最佳的效率和服务的可持续性。事件管理流程的建立包括事件分类，确定事件的优先级和建立事件的升级机制。</p><p>问题管理是调查基础设施和所有可用信息，包括事件数据库，来确定引起事件发生的真正潜在原因，以及提供的服务中可能存在的故障。</p><p>配置管理的目标是：定义和控制服务与基础设施的部件，并保持准确的配置信息。<br>变更管理的目标是：以受控的方式，确保所有变更得到评估、批准、实施和评审。<br>发布管理的目标是：在实际运行环境的发布中，交付、分发并跟踪一个或多个变更。</p><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>服务台：服务台是IT部门和IT服务用户之间的单一联系点。它通过提供一个集中和专职的服务联系点促进了组织业务流程与服务管理基础架构集成。服务台的主要目标是协调客户（用户）和IT部门之间的联系，为IT服务运作提供支持，从而提高客户的满意度。</p><p>事故管理：事故管理负责记录、归类和安排专家处理事故并监督整个处理过程直至事故得到解决和终止。事故管理的目的是在尽可能最小地影响客户和用户业务的情况下使IT系统恢复到服务级别协议所定义的服务级别。</p><p>问题管理：问题管理是指通过调查和分析IT基础架构的薄弱环节、查明事故产生的潜在原因，并制定解决事故的方案和防止事故再次发生的措施，将由于问题和事故对业务产生的负面影响减小到最低的服务管理流程。与事故管理强调事故恢复的速度不同，问题管理强调的是找出事故产生的根源，从而制定恰当的解决方案或防止其再次发生的预防措施。</p><p>配置管理：配置管理是识别和确认系统的配置项，记录和报告配置项状态和变更请求，检验配置项的正确性和完整性等活动构成的过程，其目的是提供IT基础架构的逻辑模型，支持其它服务管理流程特别是变更管理和发布管理的运作。</p><p>变更管理：变更管理是指为在最短的中断时间内完成基础架构或服务的任一方面的变更而对其进行控制的服务管理流程。变更管理的目标是确保在变更实施过程中使用标准的方法和步骤，尽快地实施变更，以将由变更所导致的业务中断对业务的影响减小到最低。</p><p>发布管理：发布管理是指对经过测试后导入实际应用的新增或修改后的配置项进行分发和宣传的管理流程。发布管理以前又称为软件控制与分发，它由变更管理流程控制。</p><p>服务级别管理：服务级别管理是为签订服务级别协议（SLAs）而进行的计划、草拟、协商、监控和报告以及签订服务级别协议后对服务绩效的评价等一系列活动所组成的一个服务管理流程。服务级别管理旨在确保组织所需的IT服务质量在成本合理的范围内得以维持并逐渐提高。</p><p>IT服务财务管理：IT服务财务管理是负责预算和核算IT服务提供方提供IT服务所需的成本，并向客户收取相应服务费用的管理流程，它包括IT投资预算、IT服务成本核算和服务计费三个子流程，其目标是通过量化服务成本减少成本超支的风险、减少不必要的浪费、合理引导客户的行为，从而最终保证所提供的IT服务符合成本效益的原则。IT服务财务管理流程产生的预算和核算信息可以为服务级别管理、能力管理、IT服务持续性管理和变更管理等管理流程提供决策依据。</p><p>IT服务持续性管理：IT服务持续性管理是指确保发生灾难后有足够的技术、财务和管理资源来确保IT服务持续性的管理流程。IT服务持续性管理关注的焦点是在发生服务故障后仍然能够提供预定级别的IT服务，从而支持组织的业务持续运作的能力。</p><p>能力管理：能力管理是指在成本和业务需求的双重约束下，通过配置合理的服务能力使组织的IT资源发挥最大效能的服务管理流程。能力管理流程包括业务能力管理、服务能力管理和资源能力管理三个子流程。</p><p>可用性管理：可用性管理是通过分析用户和业务方的可用性需求并据以优化和设计IT基础架构的可用性，从而确保以合理的成本满足不断增长的可用性需求的管理流程。可用性管理是一个前瞻性的管理流程，它通过对业务和用户可用性需求的定位，使得IT服务的设计建立在真实需求的基础上，从而避免IT服务运作中采用了过度的可用性级别，节约了IT服务的运作成本。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      以公司级通用信息通用服务游戏可规范数据为依托构建企业级运营分析平台
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>php的mongodb报错socket-timeout-calling-ismaster.md</title>
    <link href="//www.zwting.com/2017/05/27/tech-2/"/>
    <id>//www.zwting.com/2017/05/27/tech-2/</id>
    <published>2017-05-27T10:30:00.000Z</published>
    <updated>2017-09-15T03:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>使用php的mongodb的扩展时报如下错误 No suitable servers found (<code>serverSelectionTryOnce</code> set): [socket timeout calling ismaster on ‘xxx.xxx.xxx.xxx:xx’<br><a id="more"></a></p><h1 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h1><h3 id="TEST1"><a href="#TEST1" class="headerlink" title="TEST1"></a>TEST1</h3><pre><code>[h0cker@iZ232w1qo8eZ ~]$ /X0hcker/h0cker/h0cker/usr/php-7.1.0/bin/php test_wu_1.php进程ID:18652进程ID:18652进程ID:18652进程ID:18652进程ID:18652[h0cker@iZ232w1qo8eZ ~]$ cat test_wu_1.php&lt;?php$options = [    &apos;heartbeatFrequencyMS&apos; =&gt; 1000,h0cker    &apos;connectTimeoutMS&apos; =&gt; 600000,    &apos;socketTimeoutMSG&apos; =&gt; 600000,    &apos;readPreference&apos;   =&gt; MongoDB\Driver\ReadPreference::RP_SECONDARY_PREFERRED];$uri = &apos;mongodb://username:&apos;.rawurlencode(&apos;xxxxxxxxxxxxxx&apos;).&apos;@xx.xx.xxx.xxx:port&apos;;$manager = new MongoDB\Driver\Manager($uri, $options);sleep(400);$where =[];$options = [&apos;sort&apos;=&gt;[&apos;_id&apos;=&gt;-1]];try{        for($i=0;$i&lt;5;$i++){        $query   = new MongoDB\Driver\Query($where, $options);        $cursor  = $manager-&gt;executeQuery(&quot;project_name_sb1.users&quot;, $query);        foreach ($cursor as $document) {            echo &quot;进程ID:&quot;,getmypid(),&quot;\t&quot;,$document-&gt;name,PHP_EOL;            break;        }        }}catch(Exception $e){    var_dump($e);}</code></pre><h3 id="TEST2"><a href="#TEST2" class="headerlink" title="TEST2"></a>TEST2</h3><pre><code>[h0cker@iZ232w1qo8eZ ~]$ /X0hcker/h0cker/h0cker/usr/php-7.1.0/bin/php test_wu_1.php进程ID:21819object(MongoDB\Driver\Exception\ConnectionTimeoutException)#113 (7) {  [&quot;message&quot;:protected]=&gt;  string(111) &quot;No suitable servers found (`serverSelectionTryOnce` set): [socket timeout calling ismaster on &apos;xx.xx.xxx.xxx:port&apos;]&quot;  [&quot;string&quot;:&quot;Exception&quot;:private]=&gt;  string(0) &quot;&quot;  [&quot;code&quot;:protected]=&gt;  int(13053)  [&quot;file&quot;:protected]=&gt;  string(31) &quot;/data/X0hcker/88888/test_wu_1.php&quot;  [&quot;line&quot;:protected]=&gt;  int(23)  [&quot;trace&quot;:&quot;Exception&quot;:private]=&gt;  array(1) {    [0]=&gt;    array(6) {      [&quot;file&quot;]=&gt;      string(31) &quot;/data/X0hcker/X0hcker/test_wu_1.php&quot;      [&quot;line&quot;]=&gt;      int(23)      [&quot;function&quot;]=&gt;      string(12) &quot;executeQuery&quot;      [&quot;class&quot;]=&gt;      string(22) &quot;MongoDB\Driver\Manager&quot;      [&quot;type&quot;]=&gt;      string(2) &quot;-&gt;&quot;      [&quot;args&quot;]=&gt;      array(2) {        [0]=&gt;        string(17) &quot;project_name_sb1.users&quot;        [1]=&gt;        object(MongoDB\Driver\Query)#4 (3) {          [&quot;filter&quot;]=&gt;          object(stdClass)#114 (0) {          }          [&quot;options&quot;]=&gt;          object(stdClass)#116 (1) {            [&quot;sort&quot;]=&gt;            object(stdClass)#115 (1) {              [&quot;_id&quot;]=&gt;              int(-1)            }          }          [&quot;readConcern&quot;]=&gt;          NULL&lt;?php        }&lt;?php      }    }  }  [&quot;previous&quot;:&quot;Exception&quot;:private]=&gt;  NULL}[h0cker@iZ232w1qo8eZ ~]$ cat test_wu_1.php&lt;?php$options = [    &apos;heartbeatFrequencyMS&apos; =&gt; 1000,    &apos;connectTimeoutMS&apos; =&gt; 600000,    &apos;socketTimeoutMSG&apos; =&gt; 600000,    &apos;readPreference&apos;   =&gt; MongoDB\Driver\ReadPreference::RP_SECONDARY_PREFERRED];$uri = &apos;mongodb://username:&apos;.rawurlencode(&apos;xxxxxxxxxxxxxx&apos;).&apos;@xx.xx.xxx.xxx:port&apos;;$manager = new MongoDB\Driver\Manager($uri, $options);$where =[];$options = [&apos;sort&apos;=&gt;[&apos;_id&apos;=&gt;-1]];try{        for($i=0;$i&lt;5;$i++){        $query   = new MongoDB\Driver\Query($where, $options);sleep(400);        $cursor  = $manager-&gt;executeQuery(&quot;project_name_sb1.users&quot;, $query);        foreach ($cursor as $document) {            echo &quot;进程ID:&quot;,getmypid(),&quot;\t&quot;,$document-&gt;name,PHP_EOL;            break;        }        }}catch(Exception $e){    var_dump($e);}</code></pre><h2 id="TEST3"><a href="#TEST3" class="headerlink" title="TEST3"></a>TEST3</h2><pre><code>[h0cker@iZ232w1qo8eZ ~]$ /X0hcker/h0cker/h0cker/usr/php-7.1.0/bin/php test_wu_1.php进程ID:19525object(MongoDB\Driver\Exception\ConnectionTimeoutException)#113 (7) {  [&quot;message&quot;:protected]=&gt;  string(114) &quot;No suitable servers found (`serverSelectionTryOnce` set): [connection closed calling ismaster on &apos;xx.xx.xxx.xxx:port&apos;]&quot;  [&quot;string&quot;:&quot;Exception&quot;:private]=&gt;  string(0) &quot;&quot;  [&quot;code&quot;:protected]=&gt;  int(13053)  [&quot;file&quot;:protected]=&gt;  string(31) &quot;/data/X0hcker/X0hcker/test_wu_1.php&quot;  [&quot;line&quot;:protected]=&gt;  int(24)  [&quot;trace&quot;:&quot;Exception&quot;:private]=&gt;  array(1) {    [0]=&gt;    array(6) {      [&quot;file&quot;]=&gt;      string(31) &quot;/data/X0hcker/X0hcker/test_wu_1.php&quot;      [&quot;line&quot;]=&gt;      int(24)      [&quot;function&quot;]=&gt;      string(12) &quot;executeQuery&quot;      [&quot;class&quot;]=&gt;      string(22) &quot;MongoDB\Driver\Manager&quot;      [&quot;type&quot;]=&gt;      string(2) &quot;-&gt;&quot;      [&quot;args&quot;]=&gt;      array(2) {        [0]=&gt;        string(17) &quot;project_name_sb1.users&quot;        [1]=&gt;        object(MongoDB\Driver\Query)#4 (3) {          [&quot;filter&quot;]=&gt;          object(stdClass)#114 (0) {          }          [&quot;options&quot;]=&gt;          object(stdClass)#116 (1) {            [&quot;sort&quot;]=&gt;            object(stdClass)#115 (1) {              [&quot;_id&quot;]=&gt;              int(-1)            }          }          [&quot;readConcern&quot;]=&gt;          NULL        }      }    }  }  [&quot;previous&quot;:&quot;Exception&quot;:private]=&gt;  NULL}[h0cker@iZ232w1qo8eZ ~]$ cat test_wu_1.php&lt;?php$options = [    &apos;heartbeatFrequencyMS&apos; =&gt; 1000,    &apos;connectTimeoutMS&apos; =&gt; 600000,    &apos;socketCheckIntervalMS&apos; =&gt; 1000,    &apos;socketTimeoutMSG&apos; =&gt; 600000,    //&apos;readPreference&apos;   =&gt; MongoDB\Driver\ReadPreference::RP_SECONDARY_PREFERRED];$uri = &apos;mongodb://username:&apos;.rawurlencode(&apos;xxxxxxxxxxxxxx&apos;).&apos;@xx.xx.xxx.xxx:port&apos;;$manager = new MongoDB\Driver\Manager($uri, $options);$where =[];$options = [&apos;sort&apos;=&gt;[&apos;_id&apos;=&gt;-1]];try{        for($i=0;$i&lt;5;$i++){        $query   = new MongoDB\Driver\Query($where, $options);sleep(400);        $cursor  = $manager-&gt;executeQuery(&quot;project_name_sb1.users&quot;, $query);        foreach ($cursor as $document) {            echo &quot;进程ID:&quot;,getmypid(),&quot;\t&quot;,$document-&gt;name,PHP_EOL;            break;        }        }}catch(Exception $e){    var_dump($e);}</code></pre><h1 id="TCPDUMP-抓包"><a href="#TCPDUMP-抓包" class="headerlink" title="TCPDUMP 抓包"></a>TCPDUMP 抓包</h1><h3 id="php7-mongodb1-2-9-副本集-同网段"><a href="#php7-mongodb1-2-9-副本集-同网段" class="headerlink" title="php7 mongodb1.2.9  副本集  同网段"></a>php7 mongodb1.2.9  副本集  同网段</h3><pre><code>[root@iZ232w1qo8eZ ~]# tcpdump -i eth0 &quot;host 10.5.0.8 and port 99999&quot; -t -ntcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytesIP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [S], seq 818492780, win 14600, options [mss 1460,nop,nop,sackOK,nop,wscale 9], length 0IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [S.], seq 3246913933, ack 818492781, win 14600, options [mss 1460,nop,nop,sackOK,nop,wscale 9], length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 1, win 29, length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 1:357, ack 1, win 29, length 356IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [.], ack 357, win 31, length 0IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 1:429, ack 357, win 31, length 428IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 429, win 31, length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 357:529, ack 429, win 31, length 172IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 429:624, ack 529, win 33, length 195IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 529:729, ack 624, win 33, length 200IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 624:748, ack 729, win 35, length 124IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 729:825, ack 748, win 33, length 96IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 748:842, ack 825, win 35, length 94IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 825:879, ack 842, win 33, length 54IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 842:895, ack 879, win 35, length 53IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 895, win 33, length 0IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [.], ack 879, win 35, length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 895, win 33, length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 879:937, ack 895, win 33, length 58IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 895:1323, ack 937, win 35, length 428IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 1323, win 35, length 0IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [P.], seq 937:991, ack 1323, win 35, length 54IP 10.5.0.8.99999 &gt; 10.5.0.14.23507: Flags [P.], seq 1323:1376, ack 991, win 35, length 53IP 10.5.0.14.23507 &gt; 10.5.0.8.99999: Flags [.], ack 1376, win 35, length 0</code></pre><h3 id="php7-mongodb1-2-9-sharding-repset-跨网段"><a href="#php7-mongodb1-2-9-sharding-repset-跨网段" class="headerlink" title="php7 mongodb1.2.9  sharding+repset  跨网段"></a>php7 mongodb1.2.9  sharding+repset  跨网段</h3><pre><code>    [root@iZ232w1qo8eZ ~]# tcpdump -i eth0 &quot;host xx.xx.xxx.xxx and port 88888&quot; -t -ntcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytesIP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [S], seq 3082498855, win 14600, options [mss 1460,sackOK,TS val 1239088868 ecr 0,nop,wscale 9], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [S.], seq 3290624131, ack 3082498856, win 14480, options [mss 1460,sackOK,TS val 1826673145 ecr 1239088868,nop,wscale 9], length 0IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 1, win 29, options [nop,nop,TS val 1239088869 ecr 1826673145], length 0IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 1:345, ack 1, win 29, options [nop,nop,TS val 1239088869 ecr 1826673145], length 344IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [.], ack 345, win 31, options [nop,nop,TS val 1826673145 ecr 1239088869], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [P.], seq 1:213, ack 345, win 31, options [nop,nop,TS val 1826673145 ecr 1239088869], length 212IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 213, win 31, options [nop,nop,TS val 1239088869 ecr 1826673145], length 0IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 345:517, ack 213, win 31, options [nop,nop,TS val 1239088869 ecr 1826673145], length 172IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [P.], seq 213:408, ack 517, win 33, options [nop,nop,TS val 1826673148 ecr 1239088869], length 195IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 517:717, ack 408, win 33, options [nop,nop,TS val 1239088890 ecr 1826673148], length 200IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [P.], seq 408:532, ack 717, win 35, options [nop,nop,TS val 1826673167 ecr 1239088890], length 124IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 717:813, ack 532, win 33, options [nop,nop,TS val 1239088890 ecr 1826673167], length 96IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [P.], seq 532:626, ack 813, win 35, options [nop,nop,TS val 1826673168 ecr 1239088890], length 94IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 813:867, ack 626, win 33, options [nop,nop,TS val 1239088891 ecr 1826673168], length 54IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [P.], seq 626:679, ack 867, win 35, options [nop,nop,TS val 1826673168 ecr 1239088891], length 53IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 679, win 33, options [nop,nop,TS val 1239088933 ecr 1826673168], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [.], ack 867, win 35, options [nop,nop,TS val 1826973209 ecr 1239088933], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [.], ack 867, win 35, options [nop,nop,TS val 1827003209 ecr 1239088933], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [.], ack 867, win 35, options [nop,nop,TS val 1827033209 ecr 1239088933], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [R.], seq 679, ack 867, win 35, options [nop,nop,TS val 1827063209 ecr 1239088933], length 0IP 10.5.0.14.58073 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 867:925, ack 679, win 33, options [nop,nop,TS val 1239488892 ecr 1826673168], length 58IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.58073: Flags [R], seq 3290624810, win 0, length 0</code></pre><h3 id="python2-7-pymongo-sharding-repset-跨网段"><a href="#python2-7-pymongo-sharding-repset-跨网段" class="headerlink" title="python2.7 pymongo  sharding+repset  跨网段"></a>python2.7 pymongo  sharding+repset  跨网段</h3><pre><code>[root@iZ232w1qo8eZ ~]#[root@iZ232w1qo8eZ ~]# tcpdump -i eth0 &quot;host xx.xx.xxx.xxx and port 88888&quot; -t -ntcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytesIP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [S], seq 3421149159, win 14600, options [mss 1460,nop,nop,sackOK,nop,wscale 9], length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.42496: Flags [S.], seq 186285320, ack 3421149160, win 14600, options [mss 1460,nop,nop,sackOK,nop,wscale 9], length 0IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 1, win 29, length 0IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 1:59, ack 1, win 29, length 58IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.42496: Flags [.], ack 59, win 29, length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.42496: Flags [P.], seq 1:213, ack 59, win 29, length 212IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 213, win 31, length 0IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [P.], seq 59:117, ack 213, win 31, length 58IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.42496: Flags [P.], seq 213:425, ack 117, win 29, length 212IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 425, win 33, length 0IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [F.], seq 117, ack 425, win 33, length 0IP xx.xx.xxx.xxx.88888 &gt; 10.5.0.14.42496: Flags [F.], seq 425, ack 118, win 29, length 0IP 10.5.0.14.42496 &gt; xx.xx.xxx.xxx.88888: Flags [.], ack 426, win 33, length 0</code></pre><h2 id="ConnectionTimeOut和SocketTimeOut的区别："><a href="#ConnectionTimeOut和SocketTimeOut的区别：" class="headerlink" title="ConnectionTimeOut和SocketTimeOut的区别："></a>ConnectionTimeOut和SocketTimeOut的区别：</h2><pre><code>一次完整的请求包括三个阶段：    建立连接    数据传输    断开连接 如果与服务器(这里指数据库)请求建立连接的时间超过ConnectionTimeOut，就会抛 ConnectionTimeOutException，即服务器连接超时，没有在规定的时间内建立连接。如果与服务器连接成功，就开始数据传输了。如果服务器处理数据用时过长，超过了SocketTimeOut，就会抛出SocketTimeOutExceptin，即服务器响应超时，服务器没有在规定的时间内返回给客户端数据。</code></pre><h1 id="PHP的MONGODB-扩展分析"><a href="#PHP的MONGODB-扩展分析" class="headerlink" title="PHP的MONGODB 扩展分析"></a>PHP的MONGODB 扩展分析</h1><pre><code>PHP_MINIT_FUNCTION  初始化module时运行  PHP_MSHUTDOWN_FUNCTION  当module被卸载时运行  PHP_RINIT_FUNCTION  当一个REQUEST请求初始化时运行  PHP_RSHUTDOWN_FUNCTION  当一个REQUEST请求结束时运行  PHP_GINIT_FUNCTION  初始化全局变量时  PHP_GSHUTDOWN_FUNCTION  释放全局变量时  </code></pre><h3 id="在MongoDB文件夹中的php-phongo-c-中"><a href="#在MongoDB文件夹中的php-phongo-c-中" class="headerlink" title="在MongoDB文件夹中的php_phongo.c 中"></a>在MongoDB文件夹中的php_phongo.c 中</h3><pre><code>/* {{{ PHP_GINIT_FUNCTION */PHP_GINIT_FUNCTION(mongodb){bson_mem_vtable_t bsonMemVTable = {php_phongo_malloc,php_phongo_calloc,php_phongo_realloc,php_phongo_free,};#if PHP_VERSION_ID >= 70000#if defined(COMPILE_DL_MONGODB) && defined(ZTS)ZEND_TSRMLS_CACHE_UPDATE();#endif#endifmemset(mongodb_globals, 0, sizeof(zend_mongodb_globals));mongodb_globals->bsonMemVTable = bsonMemVTable;/* Initialize HashTable for persistent clients */zend_hash_init_ex(&mongodb_globals->clients, 0, NULL, php_phongo_client_dtor, 1, 0);}/* }}} */声明一个全局变量mongodb_globals保存clients</code></pre><h3 id="在MongoDB文件夹中的php-phongo-c-中-1"><a href="#在MongoDB文件夹中的php-phongo-c-中-1" class="headerlink" title="在MongoDB文件夹中的php_phongo.c 中"></a>在MongoDB文件夹中的php_phongo.c 中</h3><pre><code>PHP_MSHUTDOWN_FUNCTION(mongodb){    (void)type; /* We don&apos;t care if we are loaded via dl() or extension= */    /* Destroy HashTable for persistent clients. The HashTable destructor will     * destroy any mongoc_client_t objects contained within. */    zend_hash_destroy(&amp;MONGODB_G(clients));    bson_mem_restore_vtable();    /* Cleanup after libmongoc */    mongoc_cleanup();    UNREGISTER_INI_ENTRIES();    return SUCCESS;}在模块卸载时会销毁mongodb的MONGODB_G(clients)客户端理论上mongodb模块在php-fpm中是长连接</code></pre><h3 id="在MongoDB文件夹中的Manger-c-中"><a href="#在MongoDB文件夹中的Manger-c-中" class="headerlink" title="在MongoDB文件夹中的Manger.c 中"></a>在MongoDB文件夹中的Manger.c 中</h3><pre><code>PHP_METHOD(Manager, __construct){    php_phongo_manager_t     *intern;    zend_error_handling       error_handling;    char                     *uri_string = NULL;    phongo_zpp_char_len       uri_string_len = 0;    zval                     *options = NULL;    zval                     *driverOptions = NULL;    SUPPRESS_UNUSED_WARNING(return_value) SUPPRESS_UNUSED_WARNING(return_value_ptr) SUPPRESS_UNUSED_WARNING(return_value_used)    zend_replace_error_handling(EH_THROW, phongo_exception_from_phongo_domain(PHONGO_ERROR_INVALID_ARGUMENT), &amp;error_handling TSRMLS_CC);    intern = Z_MANAGER_OBJ_P(getThis());    /* Separate the options and driverOptions zvals, since we may end up     * modifying them in php_phongo_manager_prep_tagsets() and     * php_phongo_manager_merge_context_options() below, respectively. */    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;|s!a/!a/!&quot;, &amp;uri_string, &amp;uri_string_len, &amp;options, &amp;driverOptions) == FAILURE) {        zend_restore_error_handling(&amp;error_handling TSRMLS_CC);        return;    }    zend_restore_error_handling(&amp;error_handling TSRMLS_CC);    if (options) {        php_phongo_manager_prep_tagsets(options TSRMLS_CC);    }    if (driverOptions &amp;&amp; !php_phongo_manager_merge_context_options(driverOptions TSRMLS_CC)) {        /* Exception should already have been thrown */        return;    }    phongo_manager_init(intern, uri_string ? uri_string : PHONGO_MANAGER_URI_DEFAULT, options, driverOptions TSRMLS_CC);}</code></pre><p>查看 <strong>phongo_manager_init</strong>         </p><h3 id="在MongoDB文件夹中的php-phongo-c-中-2"><a href="#在MongoDB文件夹中的php-phongo-c-中-2" class="headerlink" title="在MongoDB文件夹中的php_phongo.c 中"></a>在MongoDB文件夹中的php_phongo.c 中</h3><pre><code>void phongo_manager_init(php_phongo_manager_t *manager, const char *uri_string, zval *options, zval *driverOptions TSRMLS_DC) /* {{{ */{char             *hash = NULL;size_t            hash_len = 0;bson_t            bson_options = BSON_INITIALIZER;mongoc_uri_t     *uri = NULL;mongoc_ssl_opt_t *ssl_opt = NULL;bson_iter_t       iter;#if PHP_VERSION_ID >= 70000mongoc_client_t  *client_ptr;#elsemongoc_client_t **client_ptr;#endifif (!(hash = php_phongo_manager_make_client_hash(uri_string, options, driverOptions, &hash_len TSRMLS_CC))) {/* Exception should already have been thrown and there is nothing to free */return;}#if PHP_VERSION_ID >= 70000if((client_ptr = zend_hash_str_find_ptr(&MONGODB_G(clients), hash, hash_len)) != NULL){MONGOC_DEBUG("Found client for hash: %s\n", hash);manager->client = client_ptr;goto cleanup;}#elseif (zend_hash_find(&MONGODB_G(clients), hash, hash_len + 1, (void**) &client_ptr) == SUCCESS) {MONGOC_DEBUG("Found client for hash: %s\n", hash);manager->client = *client_ptr;goto cleanup;}#endifif (options) {phongo_zval_to_bson(options, PHONGO_BSON_NONE, &bson_options, NULL TSRMLS_CC);}/* An exception may be thrown during BSON conversion */if (EG(exception)) {goto cleanup;}if (!(uri = php_phongo_make_uri(uri_string, &bson_options))) {phongo_throw_exception(PHONGO_ERROR_INVALID_ARGUMENT TSRMLS_CC, "Failed to parse MongoDB URI: '%s'", uri_string);goto cleanup;}if (!php_phongo_apply_rc_options_to_uri(uri, &bson_options TSRMLS_CC) ||    !php_phongo_apply_rp_options_to_uri(uri, &bson_options TSRMLS_CC) ||    !php_phongo_apply_wc_options_to_uri(uri, &bson_options TSRMLS_CC)) {/* Exception should already have been thrown */goto cleanup;}if (bson_iter_init_find_case(&iter, &bson_options, "appname") && BSON_ITER_HOLDS_UTF8(&iter)) {const char *str = bson_iter_utf8(&iter, NULL);if (!mongoc_uri_set_appname(uri, str)) {phongo_throw_exception(PHONGO_ERROR_INVALID_ARGUMENT TSRMLS_CC, "Invalid appname value: '%s'", str);goto cleanup;}}ssl_opt = php_phongo_make_ssl_opt(driverOptions TSRMLS_CC);/* An exception may be thrown during SSL option creation */if (EG(exception)) {goto cleanup;}manager->client = php_phongo_make_mongo_client(uri, ssl_opt TSRMLS_CC);if (!manager->client) {phongo_throw_exception(PHONGO_ERROR_RUNTIME TSRMLS_CC, "Failed to create Manager from URI: '%s'", uri_string);goto cleanup;}MONGOC_DEBUG("Created client hash: %s\n", hash);#if PHP_VERSION_ID >= 70000zend_hash_str_update_ptr(&MONGODB_G(clients), hash, hash_len, manager->client);#elsezend_hash_update(&MONGODB_G(clients), hash, hash_len + 1, &manager->client, sizeof(mongoc_client_t *), NULL);#endifcleanup:if (hash) {pefree(hash, 1);}bson_destroy(&bson_options);if (uri) {mongoc_uri_destroy(uri);}if (ssl_opt) {php_phongo_free_ssl_opt(ssl_opt);}} /* }}} */</code></pre><p><strong>client_ptr = zend_hash_str_find_ptr(&amp;MONGODB_G(clients), hash, hash_len)</strong></p><p><strong>manager-&gt;client = php_phongo_make_mongo_client(uri, ssl_opt TSRMLS_CC);</strong><br><strong>zend_hash_str_update_ptr(&amp;MONGODB_G(clients), hash, hash_len, manager-&gt;client);</strong></p><p>这里会在全局变量MONGODB_G(clients)中先查找客户端连接句柄，如果找不到就会新建一个连接并保存到全局变量中，也就是实现了一个单例模式的程式</p><p>查看新连接是怎么样建立的，需要跟踪<strong>php_phongo_make_mongo_client</strong></p><h3 id="在php-phongo-c文件中定义"><a href="#在php-phongo-c文件中定义" class="headerlink" title="在php_phongo.c文件中定义"></a>在php_phongo.c文件中定义</h3><pre><code>static mongoc_client_t *php_phongo_make_mongo_client(const mongoc_uri_t *uri, mongoc_ssl_opt_t *ssl_opt TSRMLS_DC) /* {{{ */{const char      *mongoc_version, *bson_version;mongoc_client_t *client;#ifdef HAVE_SYSTEM_LIBMONGOCmongoc_version = mongoc_get_version();#elsemongoc_version = "bundled";#endif#ifdef HAVE_SYSTEM_LIBBSONbson_version = bson_get_version();#elsebson_version = "bundled";#endifMONGOC_DEBUG("Creating Manager, phongo-%s[%s] - mongoc-%s(%s), libbson-%s(%s), php-%s",MONGODB_VERSION_S,MONGODB_STABILITY_S,MONGOC_VERSION_S,mongoc_version,BSON_VERSION_S,bson_version,PHP_VERSION);client = mongoc_client_new_from_uri(uri);if (!client) {return NULL;}if (mongoc_uri_get_ssl(uri) && ssl_opt) {mongoc_client_set_ssl_opts(client, ssl_opt);}return client;} /* }}} */</code></pre><p>查看 <strong>client = mongoc_client_new_from_uri(uri);</strong></p><h3 id="在mongoc-client-c文件中定义"><a href="#在mongoc-client-c文件中定义" class="headerlink" title="在mongoc-client.c文件中定义"></a>在mongoc-client.c文件中定义</h3><pre><code>mongoc_client_t *mongoc_client_new_from_uri (const mongoc_uri_t *uri){   mongoc_topology_t *topology;   topology = mongoc_topology_new (uri, true);   return _mongoc_client_new_from_uri (uri, topology);}</code></pre><p>我们先看_mongoc_client_new_from_uri<br><strong>查看_mongoc_client_new_from_uri</strong></p><pre><code>mongoc_client_t *_mongoc_client_new_from_uri (const mongoc_uri_t *uri, mongoc_topology_t *topology){   mongoc_client_t *client;   const mongoc_read_prefs_t *read_prefs;   const mongoc_read_concern_t *read_concern;   const mongoc_write_concern_t *write_concern;   const char *appname;   BSON_ASSERT (uri);#ifndef MONGOC_ENABLE_SSL   if (mongoc_uri_get_ssl (uri)) {      MONGOC_ERROR (&quot;Can&apos;t create SSL client, SSL not enabled in this build.&quot;);      return NULL;   }#endif   client = (mongoc_client_t *)bson_malloc0(sizeof *client);   client-&gt;uri = mongoc_uri_copy (uri);   client-&gt;initiator = mongoc_client_default_stream_initiator;   client-&gt;initiator_data = client;   client-&gt;topology = topology;   client-&gt;error_api_version = MONGOC_ERROR_API_VERSION_LEGACY;   client-&gt;error_api_set = false;   write_concern = mongoc_uri_get_write_concern (client-&gt;uri);   client-&gt;write_concern = mongoc_write_concern_copy (write_concern);   read_concern = mongoc_uri_get_read_concern (client-&gt;uri);   client-&gt;read_concern = mongoc_read_concern_copy (read_concern);   read_prefs = mongoc_uri_get_read_prefs_t (client-&gt;uri);   client-&gt;read_prefs = mongoc_read_prefs_copy (read_prefs);   appname = mongoc_uri_get_option_as_utf8 (client-&gt;uri, &quot;appname&quot;, NULL);   if (appname &amp;&amp; client-&gt;topology-&gt;single_threaded) {      /* the appname should have already been validated */      BSON_ASSERT (mongoc_client_set_appname (client, appname));   }   mongoc_cluster_init (&amp;client-&gt;cluster, client-&gt;uri, client);#ifdef MONGOC_ENABLE_SSL   client-&gt;use_ssl = false;   if (mongoc_uri_get_ssl (client-&gt;uri)) {      /* sets use_ssl = true */      mongoc_client_set_ssl_opts (client, mongoc_ssl_opt_get_default ());   }#endif   mongoc_counter_clients_active_inc ();   return client;}</code></pre><p><strong>查看mongoc_client_default_stream_initiator</strong></p><pre><code>mongoc_stream_t *mongoc_client_default_stream_initiator (const mongoc_uri_t       *uri,                                        const mongoc_host_list_t *host,                                        void                     *user_data,                                        bson_error_t             *error){   mongoc_stream_t *base_stream = NULL;#ifdef MONGOC_ENABLE_SSL   mongoc_client_t *client = (mongoc_client_t *)user_data;   const char *mechanism;   int32_t connecttimeoutms;#endif   BSON_ASSERT (uri);   BSON_ASSERT (host);#ifndef MONGOC_ENABLE_SSL   if (mongoc_uri_get_ssl (uri)) {      bson_set_error (error,                      MONGOC_ERROR_CLIENT,                      MONGOC_ERROR_CLIENT_NO_ACCEPTABLE_PEER,                      &quot;SSL is not enabled in this build of mongo-c-driver.&quot;);      return NULL;   }#endif   switch (host-&gt;family) {#if defined(AF_INET6)   case AF_INET6:#endif   case AF_INET:      base_stream = mongoc_client_connect_tcp (uri, host, error);      break;   case AF_UNIX:      base_stream = mongoc_client_connect_unix (uri, host, error);      break;   default:      bson_set_error (error,                      MONGOC_ERROR_STREAM,                      MONGOC_ERROR_STREAM_INVALID_TYPE,                      &quot;Invalid address family: 0x%02x&quot;, host-&gt;family);      break;   }#ifdef MONGOC_ENABLE_SSL   if (base_stream) {      mechanism = mongoc_uri_get_auth_mechanism (uri);      if (client-&gt;use_ssl ||          (mechanism &amp;&amp; (0 == strcmp (mechanism, &quot;MONGODB-X509&quot;)))) {         mongoc_stream_t *original = base_stream;         base_stream = mongoc_stream_tls_new_with_hostname (base_stream, host-&gt;host,                                                            &amp;client-&gt;ssl_opts, true);         if (!base_stream) {            mongoc_stream_destroy (original);            bson_set_error (error,                            MONGOC_ERROR_STREAM,                            MONGOC_ERROR_STREAM_SOCKET,                            &quot;Failed initialize TLS state.&quot;);            return NULL;         }         connecttimeoutms = mongoc_uri_get_option_as_int32 (            uri, &quot;connecttimeoutms&quot;, MONGOC_DEFAULT_CONNECTTIMEOUTMS);         if (!mongoc_stream_tls_handshake_block (base_stream, host-&gt;host, connecttimeoutms, error)) {            mongoc_stream_destroy (base_stream);            return NULL;         }      }   }#endif   return base_stream ? mongoc_stream_buffered_new (base_stream, 1024) : NULL;}</code></pre><p>查看<strong>mongoc_client_connect_tcp</strong></p><pre><code>static mongoc_stream_t *mongoc_client_connect_tcp (const mongoc_uri_t       *uri,                           const mongoc_host_list_t *host,                           bson_error_t             *error){   mongoc_socket_t *sock = NULL;   struct addrinfo hints;   struct addrinfo *result, *rp;   int32_t connecttimeoutms;   int64_t expire_at;   char portstr [8];   int s;   ENTRY;   BSON_ASSERT (uri);   BSON_ASSERT (host);   connecttimeoutms = mongoc_uri_get_option_as_int32 (      uri, &quot;connecttimeoutms&quot;, MONGOC_DEFAULT_CONNECTTIMEOUTMS);   BSON_ASSERT (connecttimeoutms);   bson_snprintf (portstr, sizeof portstr, &quot;%hu&quot;, host-&gt;port);   memset (&amp;hints, 0, sizeof hints);   hints.ai_family = host-&gt;family;   hints.ai_socktype = SOCK_STREAM;   hints.ai_flags = 0;   hints.ai_protocol = 0;   s = getaddrinfo (host-&gt;host, portstr, &amp;hints, &amp;result);   if (s != 0) {      mongoc_counter_dns_failure_inc ();      bson_set_error(error,                     MONGOC_ERROR_STREAM,                     MONGOC_ERROR_STREAM_NAME_RESOLUTION,                     &quot;Failed to resolve %s&quot;,                     host-&gt;host);      RETURN (NULL);   }   mongoc_counter_dns_success_inc ();   for (rp = result; rp; rp = rp-&gt;ai_next) {      /*       * Create a new non-blocking socket.       */      if (!(sock = mongoc_socket_new (rp-&gt;ai_family,                                      rp-&gt;ai_socktype,                                      rp-&gt;ai_protocol))) {         continue;      }      /*       * Try to connect to the peer.       */      expire_at = bson_get_monotonic_time () + (connecttimeoutms * 1000L);      if (0 != mongoc_socket_connect (sock,                                      rp-&gt;ai_addr,                                      (socklen_t)rp-&gt;ai_addrlen,                                      expire_at)) {         char *errmsg;         char errmsg_buf[BSON_ERROR_BUFFER_SIZE];         char ip[255];         mongoc_socket_inet_ntop (rp, ip, sizeof ip);         errmsg = bson_strerror_r (            mongoc_socket_errno (sock), errmsg_buf, sizeof errmsg_buf);         MONGOC_WARNING (&quot;Failed to connect to: %s:%d, error: %d, %s\n&quot;,                         ip,                         host-&gt;port,                         mongoc_socket_errno(sock),                         errmsg);         mongoc_socket_destroy (sock);         sock = NULL;         continue;      }      break;   }   if (!sock) {      bson_set_error (error,                      MONGOC_ERROR_STREAM,                      MONGOC_ERROR_STREAM_CONNECT,                      &quot;Failed to connect to target host: %s&quot;,                      host-&gt;host_and_port);      freeaddrinfo (result);      RETURN (NULL);   }   freeaddrinfo (result);   return mongoc_stream_socket_new (sock);}</code></pre><p>在上面的函数中会发现connecttimeoutms参数</p><p>我们再看mongoc_topology_new</p><pre><code>mongoc_client_t *mongoc_client_new_from_uri (const mongoc_uri_t *uri){   mongoc_topology_t *topology;   topology = mongoc_topology_new (uri, true);   return _mongoc_client_new_from_uri (uri, topology);}</code></pre><h3 id="在libmongoc文件夹中的mongoc-toplogy-c-中"><a href="#在libmongoc文件夹中的mongoc-toplogy-c-中" class="headerlink" title="在libmongoc文件夹中的mongoc-toplogy.c 中"></a>在libmongoc文件夹中的mongoc-toplogy.c 中</h3><pre><code>mongoc_topology_t *mongoc_topology_new (const mongoc_uri_t *uri,                     bool                single_threaded){   int64_t heartbeat_default;   int64_t heartbeat;   mongoc_topology_t *topology;   mongoc_topology_description_type_t init_type;   uint32_t id;   const mongoc_host_list_t *hl;   BSON_ASSERT (uri);   topology = (mongoc_topology_t *)bson_malloc0(sizeof *topology);   /*    * Not ideal, but there&apos;s no great way to do this.    * Base on the URI, we assume:    *   - if we&apos;ve got a replicaSet name, initialize to RS_NO_PRIMARY    *   - otherwise, if the seed list has a single host, initialize to SINGLE    *   - everything else gets initialized to UNKNOWN    */   if (mongoc_uri_get_replica_set(uri)) {      init_type = MONGOC_TOPOLOGY_RS_NO_PRIMARY;   } else {      hl = mongoc_uri_get_hosts(uri);      if (hl-&gt;next) {         init_type = MONGOC_TOPOLOGY_UNKNOWN;      } else {         init_type = MONGOC_TOPOLOGY_SINGLE;      }   }   heartbeat_default = single_threaded ?                       MONGOC_TOPOLOGY_HEARTBEAT_FREQUENCY_MS_SINGLE_THREADED :                       MONGOC_TOPOLOGY_HEARTBEAT_FREQUENCY_MS_MULTI_THREADED;   heartbeat = mongoc_uri_get_option_as_int32 (uri, &quot;heartbeatfrequencyms&quot;,                                               heartbeat_default);   mongoc_topology_description_init (&amp;topology-&gt;description, init_type,                                     heartbeat);   topology-&gt;description.set_name = bson_strdup(mongoc_uri_get_replica_set(uri));   topology-&gt;uri = mongoc_uri_copy (uri);   topology-&gt;scanner_state = MONGOC_TOPOLOGY_SCANNER_OFF;   topology-&gt;scanner = mongoc_topology_scanner_new (topology-&gt;uri,                                                    _mongoc_topology_scanner_setup_err_cb,                                                    _mongoc_topology_scanner_cb,                                                    topology);   topology-&gt;single_threaded = single_threaded;   if (single_threaded) {      /* Server Selection Spec:       *       *   &quot;Single-threaded drivers MUST provide a &quot;serverSelectionTryOnce&quot;       *   mode, in which the driver scans the topology exactly once after       *   server selection fails, then either selects a server or raises an       *   error.       *       *   &quot;The serverSelectionTryOnce option MUST be true by default.&quot;       */      topology-&gt;server_selection_try_once = mongoc_uri_get_option_as_bool (         uri,         &quot;serverselectiontryonce&quot;,         true);   } else {      topology-&gt;server_selection_try_once = false;   }   topology-&gt;server_selection_timeout_msec = mongoc_uri_get_option_as_int32(      topology-&gt;uri, &quot;serverselectiontimeoutms&quot;,      MONGOC_TOPOLOGY_SERVER_SELECTION_TIMEOUT_MS);   topology-&gt;local_threshold_msec = mongoc_uri_get_option_as_int32 (      topology-&gt;uri, &quot;localthresholdms&quot;,      MONGOC_TOPOLOGY_LOCAL_THRESHOLD_MS);   /* Total time allowed to check a server is connectTimeoutMS.    * Server Discovery And Monitoring Spec:    *    *   &quot;The socket used to check a server MUST use the same connectTimeoutMS as    *   regular sockets. Multi-threaded clients SHOULD set monitoring sockets&apos;    *   socketTimeoutMS to the connectTimeoutMS.&quot;    */   topology-&gt;connect_timeout_msec = mongoc_uri_get_option_as_int32(      topology-&gt;uri, &quot;connecttimeoutms&quot;,      MONGOC_DEFAULT_CONNECTTIMEOUTMS);   mongoc_mutex_init (&amp;topology-&gt;mutex);   mongoc_cond_init (&amp;topology-&gt;cond_client);   mongoc_cond_init (&amp;topology-&gt;cond_server);   for ( hl = mongoc_uri_get_hosts (uri); hl; hl = hl-&gt;next) {      mongoc_topology_description_add_server (&amp;topology-&gt;description,                                              hl-&gt;host_and_port,                                              &amp;id);      mongoc_topology_scanner_add (topology-&gt;scanner, hl, id);   }   return topology;}</code></pre><p>会发现在uri里面有这几个参数，所以在uri里设置吧<br>serverselectiontryonce<br>serverselectiontimeoutms<br>localthresholdms<br>connecttimeoutms</p><p>设置了以后就不报错了，但是我们还得接着看完执行函数</p><p>在获取句柄后，执行executeQuery函数，所以现在我们来看<strong>executeQuery</strong></p><h3 id="在MongoDB文件夹中的Manger-c-中-1"><a href="#在MongoDB文件夹中的Manger-c-中-1" class="headerlink" title="在MongoDB文件夹中的Manger.c 中"></a>在MongoDB文件夹中的Manger.c 中</h3><pre><code>PHP_METHOD(Manager, executeQuery){    char                     *namespace;    phongo_zpp_char_len       namespace_len;    zval                     *query;    zval                     *readPreference = NULL;    DECLARE_RETURN_VALUE_USED    SUPPRESS_UNUSED_WARNING(return_value_ptr)    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;sO|O!&quot;, &amp;namespace, &amp;namespace_len, &amp;query, php_phongo_query_ce, &amp;readPreference, php_phongo_readpreference_ce) == FAILURE) {        return;    }    phongo_execute_query(getThis(), namespace, query, readPreference, -1, return_value, return_value_used TSRMLS_CC);}</code></pre><p>查看 <strong>phongo_execute_query</strong> ，注意这里的getThis()其实就是Manger的实例</p><h3 id="在MongoDB文件夹中的php-phongo-c-中-3"><a href="#在MongoDB文件夹中的php-phongo-c-中-3" class="headerlink" title="在MongoDB文件夹中的php_phongo.c 中"></a>在MongoDB文件夹中的php_phongo.c 中</h3><pre><code>int phongo_execute_query(zval *manager, const char *namespace, zval *zquery, zval *zreadPreference, int server_id, zval *return_value, int return_value_used TSRMLS_DC) /* {{{ */{mongoc_client_t *client;const php_phongo_query_t *query;mongoc_cursor_t *cursor;char *dbname;char *collname;mongoc_collection_t *collection;client = Z_MANAGER_OBJ_P(manager)->client;if (!phongo_split_namespace(namespace, &dbname, &collname)) {phongo_throw_exception(PHONGO_ERROR_INVALID_ARGUMENT TSRMLS_CC, "%s: %s", "Invalid namespace provided", namespace);return false;}collection = mongoc_client_get_collection(client, dbname, collname);efree(dbname);efree(collname);query = Z_QUERY_OBJ_P(zquery);if (query->read_concern) {mongoc_collection_set_read_concern(collection, query->read_concern);}cursor = mongoc_collection_find_with_opts(collection, query->filter, query->opts, phongo_read_preference_from_zval(zreadPreference TSRMLS_CC));mongoc_collection_destroy(collection);/* mongoc issues a warning we need to catch somehow */if (!cursor) {phongo_throw_exception(PHONGO_ERROR_MONGOC_FAILED TSRMLS_CC, "%s", "FIXME: Couldn't create cursor...");return false;}if (server_id > 0 && !mongoc_cursor_set_hint(cursor, server_id)) {phongo_throw_exception(PHONGO_ERROR_MONGOC_FAILED TSRMLS_CC, "%s", "Could not set cursor server_id");return false;}if (!phongo_advance_cursor_and_check_for_error(cursor TSRMLS_CC)) {return false;}if (!return_value_used) {mongoc_cursor_destroy(cursor);return true;}phongo_cursor_init_for_query(return_value, manager, cursor, namespace, zquery, zreadPreference TSRMLS_CC);return true;} /* }}} */</code></pre><p><strong>client = Z_MANAGER_OBJ_P(manager)-&gt;client;</strong></p><p>获取manger中的客户端连接</p><p><strong>collection = mongoc_client_get_collection(client, dbname, collname);</strong></p><p>获取客户端连接中的collection句柄</p><p><strong>query = Z_QUERY_OBJ_P(zquery);</strong></p><p><strong>cursor = mongoc_collection_find_with_opts(collection, query-&gt;filter, query-&gt;opts, phongo_read_preference_from_zval(zreadPreference TSRMLS_CC));</strong></p><p>执行query的内容</p><p><strong>mongoc_collection_destroy(collection);</strong></p><p>销毁collection</p><p><strong>phongo_cursor_init_for_query(return_value, manager, cursor, namespace, zquery, zreadPreference TSRMLS_CC);</strong></p><p>将结果集放在return_value</p><h3 id="以上过程出现的函数需要细节的查看"><a href="#以上过程出现的函数需要细节的查看" class="headerlink" title="以上过程出现的函数需要细节的查看"></a>以上过程出现的函数需要细节的查看</h3><p>1.查看 <strong>mongoc_client_get_collection</strong></p><h3 id="查看-mongoc-client-get-collection在libmongoc文件夹中的mongoc-client-c"><a href="#查看-mongoc-client-get-collection在libmongoc文件夹中的mongoc-client-c" class="headerlink" title="查看 mongoc_client_get_collection在libmongoc文件夹中的mongoc-client.c"></a>查看 mongoc_client_get_collection在libmongoc文件夹中的mongoc-client.c</h3><pre><code>/* *-------------------------------------------------------------------------- * * mongoc_client_get_collection -- * *       This function returns a newly allocated collection structure. * *       @db should be the name of the database, such as &quot;test&quot;. *       @collection should be the name of the collection such as &quot;test&quot;. * *       The above would result in the namespace &quot;test.test&quot;. * *       You should free this structure when you are done with it using *       mongoc_collection_destroy(). * * Returns: *       A newly allocated mongoc_collection_t that should be freed with *       mongoc_collection_destroy(). * * Side effects: *       None. * *-------------------------------------------------------------------------- */mongoc_collection_t *mongoc_client_get_collection (mongoc_client_t *client,                              const char      *db,                              const char      *collection){   BSON_ASSERT (client);   BSON_ASSERT (db);   BSON_ASSERT (collection);   return _mongoc_collection_new(client, db, collection, client-&gt;read_prefs,                                 client-&gt;read_concern, client-&gt;write_concern);}</code></pre><p>查看 <strong>_mongoc_collection_new</strong>    </p><h3 id="在libmongoc文件夹中的mongoc-collection-c"><a href="#在libmongoc文件夹中的mongoc-collection-c" class="headerlink" title="在libmongoc文件夹中的mongoc-collection.c"></a>在libmongoc文件夹中的mongoc-collection.c</h3><pre><code>mongoc_collection_t *_mongoc_collection_new (mongoc_client_t              *client,                        const char                   *db,                        const char                   *collection,                        const mongoc_read_prefs_t    *read_prefs,                        const mongoc_read_concern_t  *read_concern,                        const mongoc_write_concern_t *write_concern){   mongoc_collection_t *col;   ENTRY;   BSON_ASSERT (client);   BSON_ASSERT (db);   BSON_ASSERT (collection);   col = (mongoc_collection_t *)bson_malloc0(sizeof *col);   col-&gt;client = client;   col-&gt;write_concern = write_concern ?      mongoc_write_concern_copy(write_concern) :      mongoc_write_concern_new();   col-&gt;read_concern = read_concern ?      mongoc_read_concern_copy(read_concern) :      mongoc_read_concern_new();   col-&gt;read_prefs = read_prefs ?      mongoc_read_prefs_copy(read_prefs) :      mongoc_read_prefs_new(MONGOC_READ_PRIMARY);   bson_snprintf (col-&gt;ns, sizeof col-&gt;ns, &quot;%s.%s&quot;, db, collection);   bson_snprintf (col-&gt;db, sizeof col-&gt;db, &quot;%s&quot;, db);   bson_snprintf (col-&gt;collection, sizeof col-&gt;collection, &quot;%s&quot;, collection);   col-&gt;collectionlen = (uint32_t)strlen(col-&gt;collection);   col-&gt;nslen = (uint32_t)strlen(col-&gt;ns);   _mongoc_buffer_init(&amp;col-&gt;buffer, NULL, 0, NULL, NULL);   col-&gt;gle = NULL;   RETURN(col);}</code></pre><p>2.查看 <strong>phongo_cursor_init_for_query</strong></p><h3 id="在php-phongo-c文件中"><a href="#在php-phongo-c文件中" class="headerlink" title="在php_phongo.c文件中"></a>在php_phongo.c文件中</h3><pre><code>static void phongo_cursor_init_for_query(zval *return_value, zval *manager, mongoc_cursor_t *cursor, const char *namespace, zval *query, zval *readPreference TSRMLS_DC) /* {{{ */{php_phongo_cursor_t *intern;phongo_cursor_init(return_value, manager, cursor, readPreference TSRMLS_CC);intern = Z_CURSOR_OBJ_P(return_value);/* namespace has already been validated by phongo_execute_query() */phongo_split_namespace(namespace, &intern->database, &intern->collection);#if PHP_VERSION_ID >= 70000ZVAL_ZVAL(&intern->query, query, 1, 0);#elseZ_ADDREF_P(query);intern->query = query;#endif} /* }}} */</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用php的mongodb的扩展时报错
    
    </summary>
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/categories/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP7扩展开发" scheme="//www.zwting.com/tags/PHP7%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一个创业管理者的内心读白</title>
    <link href="//www.zwting.com/2017/05/24/manage-1/"/>
    <id>//www.zwting.com/2017/05/24/manage-1/</id>
    <published>2017-05-24T00:30:00.000Z</published>
    <updated>2017-05-28T03:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="别太拿自己当回事儿"><a href="#别太拿自己当回事儿" class="headerlink" title="别太拿自己当回事儿"></a>别太拿自己当回事儿</h3><p>创业，如果放不下架子，放不下面子，你没有机会享受高风险的回报，即使有，你也不配<br>常常是自己的所谓“为了项目好”，最后一意孤行，闹得所有人都开心，已有的计划无法继续，所有人都失去信心，如果项目黄了，你要承担多少责任？<br><a id="more"></a></p><h3 id="最怕的是“一条鱼腥了一锅汤”"><a href="#最怕的是“一条鱼腥了一锅汤”" class="headerlink" title="最怕的是“一条鱼腥了一锅汤”"></a>最怕的是“一条鱼腥了一锅汤”</h3><p>举个例子，处理jshint配置能用多久呢？如果半天都搞不定，我真心不认为这样的人需要去口口声声的讲，“代码要规范”，连基本功都不过关，谈规范，只是让别人坑而已<br>大师们尚且虚怀若谷，又何况我们呢？水瓶要么空要么满才不会逛荡，以一个空杯的心态面对世界，才能更好的适应社会。<br>如果心智成熟，和你的老大好好沟通，降低开发风险，又能对项目有利，你的领导会高看你眼，放心把更重要的工作交给你。</p><h3 id="知道什么该学？"><a href="#知道什么该学？" class="headerlink" title="知道什么该学？"></a>知道什么该学？</h3><p>大晚上12点，马上要切换测试环境了，我说“在群里说一声，没睡的大伙测一下”那货说：“大家都睡了，群里沟通成本太高”。。。可你知道，这背后的真正用意是什么？你只要发了这个信息，老大们都会看到，都会记着你在辛苦的工作，至于结果，有人起来帮忙测试最好，如果没有，至少对自己也是好事儿有的时候我特别想笑，你以为学东西就是学技术么？</p><p>我们再举个例子，别人教你东西，你愿意学或者不愿意学都要听，为啥？如果你觉得他得东西有价值你可以多听点，以后他还会给你分享如果你直接拒绝，他以后也不会给你分享了。即使你特别不想听，找个借口委婉点也好有的时候我可以给你讲12分，可你不愿意听，对不起，我讲6分就好了，为啥让自己那么累呢？关键你他妈还不给我钱。。。</p><p>学东西不要太表面，技巧性的东西在这个时代已经没有难度了，反正有各种办法查到，只是积累多少的问题的，最难的是他们背后的思考，那是实践后总结出来的真知</p><p>我折腾过很多东西，很累，但我习惯了如何快速了解新东西，并能用正确的方式使用他们，这是我的本事，那你呢？即使不会，我可以放下姿态跟人学，那你呢？</p><h3 id="你当我是谁？"><a href="#你当我是谁？" class="headerlink" title="你当我是谁？"></a>你当我是谁？</h3><p>有的时候我也在想，你当我是谁？领导？还是大哥？无论哪种都好，至少有那么一些尊重<br>我并不想美化这个词，但我得承认，尊重是人和人友好的基础.你尊重我，我教你，带你，给你做各种好的打算，我心甘情愿。如果你因为情绪不好，找我聊，或者大骂我一顿，我都可以接受，如果我做的不好，你也可以找我聊，或者大骂我一顿。即使我做的再不好，你身为我的小弟，是否要给我留够面子呢？当着那么多人，与我争执，你是我小弟么？你当我是谁？</p><h3 id="你知道谁是真的对你好么？"><a href="#你知道谁是真的对你好么？" class="headerlink" title="你知道谁是真的对你好么？"></a>你知道谁是真的对你好么？</h3><p>天天对你笑，恭维你的人，给你涨工资，夸你的人？还是用心品吧，这世界没有免费的午餐，不会有无端的馅饼落我头上，唯一能表明也是“我还算一个有用的人”而已。</p><h3 id="内裤穿反了，只有自己知道"><a href="#内裤穿反了，只有自己知道" class="headerlink" title="内裤穿反了，只有自己知道"></a>内裤穿反了，只有自己知道</h3><p>有很多时候，人生很无奈，比如有一个月，你的产品没有任何大的进展，对于一个创业公司是很严重的事儿，而你作为一个负责人，你会有意无意的注意到你的小伙伴的懈怠或者不尽力、不给力，我想大部分人都会很郁闷的，想不小心眼都很难。</p><p>第一，我不能去责怪他们，创业公司团队稳定是第一要务</p><p>第二，我要反思，为啥会这样呢？是因为产品计划按部就班，安排的计划让他们闭门造车么？</p><p>我心里也没有答案的，而我能做的就是先走下去，在变革求利好。团队里首先会有人沉不住气，各种消极悲观，在创业公司是一旦不成功就会失败，损失很大。而在大公司，大不了从头再来。大公司承担这点损失，和创业公司承担这些损失的差别真是天上地下。</p><p>而我能做的只有乐观的陪着大家走下去。</p><p>某天我观察到我们的用户不爱用我们的一个功能，他们宁可微信发给我，也不愿意用，这是一个很严重的问题，于是我们所有人开会 ，讨论这个问题，团队像炸了窝一样，各抒己见，异常活跃，最总给出了一个很好的解决方案，并且把0.8之后的发展思路也捋顺了。所有人都很激动，士气里面都上来了。</p><p>人生真是很奇妙，创业对我做的改造最多的是心态，承受着巨大的压力，就好比“内裤穿反了，只有自己知道”一样，剩下的事儿就是遇到什么问题解决什么问题，只要尽力不后悔就可以了。</p><p>作为一个技术负责人，一往无前的冲，把事情做好就可以给团队很大的勇气和动力，另外要做的就是和小伙伴们一起肩并肩互相扶持，创业不一定成功，坚持不下去是一定不会成功的。</p><h3 id="关于推卸责任"><a href="#关于推卸责任" class="headerlink" title="关于推卸责任"></a>关于推卸责任</h3><p>我不喜欢这个人代码，我也不喜欢那个人代码，那么你有想过为什么嘛？我再退一步讲，你觉得别人会喜欢你的代码么？如果你真的牛逼，你有代码洁癖，把所有的代码都整理的井井有条，制定规范，所有人都觉得好（不一定全用），那么你真的很牛逼，必须提职加薪，想做管理做管理，想当专家当专家，因为这种人是真的人才当松散2周，一个sprint没有完成，开发要求2天修补bug，我其实想问，你真的好意思要么？这2天修补bug的时间，会导致整个开发计划延后2天，下一个冲刺无法正常完成。。。形成惯性，以后的计划都无法正常完成。。。。。我郁闷的不是这2天，而是羞耻心和责任心的缺失。</p><h3 id="羞耻心和责任心才是进步的动力"><a href="#羞耻心和责任心才是进步的动力" class="headerlink" title="羞耻心和责任心才是进步的动力"></a>羞耻心和责任心才是进步的动力</h3><p>如果你真的在这2周很努力的去做了，我觉得这个延期可以理解，但是后面要想办法补上。因为你觉得自己没做好，才会努力去学习，改进，这才是成长的动力。另外你真的补上了，会让别人对你很信任。人和人相处到最后实际上就是尊重和信任，无它。人有脸，树有皮啊，谁能想到我写这段文字的时候，内心是多么的凄凉，可事实真的是真的，有人的人是真的真的没有</p><h3 id="别逼着我做决定"><a href="#别逼着我做决定" class="headerlink" title="别逼着我做决定"></a>别逼着我做决定</h3><p>我很想：“把工资一结，然后告诉那人，你不配拿我这份尊重！”<br>忍忍吧，至少现在我还不能这样做，但是早晚有一天，出来混是要还的。</p><h3 id="抱怨"><a href="#抱怨" class="headerlink" title="抱怨"></a>抱怨</h3><p>这世界上最蠢的事儿就是抱怨，不解决任何事情，又让自己很郁闷，我先反省一下自己的蠢</p><p>tomorrow is another day</p>]]></content>
    
    <summary type="html">
    
      这世界上最蠢的事儿就是抱怨，不解决任何事情，又让自己很郁闷，我先反省一下自己的蠢
    
    </summary>
    
      <category term="怎么样做团队建设" scheme="//www.zwting.com/categories/%E6%80%8E%E4%B9%88%E6%A0%B7%E5%81%9A%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="新人入职" scheme="//www.zwting.com/tags/%E6%96%B0%E4%BA%BA%E5%85%A5%E8%81%8C/"/>
    
      <category term="培训管理" scheme="//www.zwting.com/tags/%E5%9F%B9%E8%AE%AD%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何有效地帮助新人融入项目中</title>
    <link href="//www.zwting.com/2017/05/17/manage-2/"/>
    <id>//www.zwting.com/2017/05/17/manage-2/</id>
    <published>2017-05-17T03:13:00.000Z</published>
    <updated>2017-05-28T03:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>　　新同事的学习和领悟能力自然是非常重要，然而一个好的“师傅”能够带他进门，也会极大降低学习的门槛。在这里，分享一点自己的心得，我一般按照下面几步进行介绍，而我自己在进入到一个新项目中一般也是按照这几步进行学习的。</p><h4 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h4><p>　　在这个环节，我会介绍为什么会有这个项目，项目的目标是什么，当前的状态以及项目组的组织结构等。这里，一定不要忘记把当前的产品展示新同事，使其有一个直观的印象。</p><p>　　虽然我们都是搞技术的，但是对于一个新同事，一上来就直接深入细节而抛开项目背景，显然是不合适的。因为，一个人是否可以把事情做好，除了取决于他的技术能力；还和他是否对项目或者业务方向有认可度，是否愿意投入精力去用心让项目成果。如果一个人对项目本身的目标都不认可，怎么可能会做好呢。<br><a id="more"></a></p><h4 id="二、技术介绍"><a href="#二、技术介绍" class="headerlink" title="二、技术介绍"></a>二、技术介绍</h4><p>　　介绍了项目的相关情况以后，对于有经验的开发者来讲，一般都会在脑海基于原来的经验有一个大致的实现思路。那么这个时候，就可以介绍项目开发用到的技术有哪些，这些技术大概都用在什么地方。</p><h4 id="三、工程目录结构"><a href="#三、工程目录结构" class="headerlink" title="三、工程目录结构"></a>三、工程目录结构</h4><p>　　在这里，我可能会打开工程目录，介绍工程的组织结构，每个文件夹以及某些重要文件的作用。对于有过类似项目经验的同事来说，相对比较容易理解，而对于经验相对缺乏的同事来讲，可能只是有一个简单的印象，还需要在以后的工作中不断的加强印象。</p><h4 id="四、功能分解"><a href="#四、功能分解" class="headerlink" title="四、功能分解"></a>四、功能分解</h4><p>　　虽然很多项目大致相同，但是还是有很多细微差别之处。这个时候，我就会拿一个具体的功能，从页面到控制层，再到服务层，在到数据层，最后到数据库，完完整整地讲解一遍，把相关的代码文件都串起来。在这里，尤其要告诉新同事，如果添加一个新功能时应该添加、修改哪些文件，这些文件之间的对应以及调用关系是什么样的。经过这一步，即使经验不是很丰富的新同事，也可以照猫画虎，做出一个简单的功能。</p><h4 id="五、发布测试"><a href="#五、发布测试" class="headerlink" title="五、发布测试"></a>五、发布测试</h4><p>　　功能完成以后，自然是要上线测试的。一般情况下，在项目中都会生产、演练和测试等几套环境同时运行，本地编写和测试完成的代码，还需要发布到测试和演练环境中进行测试，确保更改有效。于是就需要，告诉他打包、发布和测试的步骤。</p><h4 id="六、问答"><a href="#六、问答" class="headerlink" title="六、问答"></a>六、问答</h4><p>　　在上面的五步中，肯定会有一些问题积累下来，这个时候就可以对这些问题进行深入讨论，加深对某些部分的深入理解。如果有些问题，我无法解答，就会带他找到这个方面比较有经验的同事，进行请教。</p><p>　　作为当代的程序员，我们不但要会写代码，更要能够把我们的经验传播出去，那么沟通能力的提高就是很紧迫的了。</p><p>　　一个项目的完整流程，基本上包括需求、设计（包括视觉和功能）、编码、测试、验收、上线等六个环节，当然这六个环节对整个项目不一定是串行的，但是对于一个具体的功能点来讲肯定是串行的。项目的整体进度肯定是要从达到上线标准的功能来衡量。如果功能无法正常运行，对于用户来讲，就等于零。在用户眼里只有1和0的区别，没有用户会接受完成度是80%的说法。作为开发人员，我们更希望从代码的角度去考虑这个事情：主流程实现完了，那就是80%，再加上异常的处理流程，Okay，那就是100%了。其实这个100%对于整体的功能来讲，最多只能算是30%，过了验收测试应该可以算上90%，上线稳定运行才是1。在会议上，开发人员估计的进度，换个角度应该可以理解为，这个功能编码工作量的完成度。</p>]]></content>
    
    <summary type="html">
    
      新同事的学习和领悟能力自然是非常重要，然而一个好的“师傅”能够带他进门，也会极大降低学习的门槛。
    
    </summary>
    
      <category term="怎么样做团队建设" scheme="//www.zwting.com/categories/%E6%80%8E%E4%B9%88%E6%A0%B7%E5%81%9A%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="新人入职" scheme="//www.zwting.com/tags/%E6%96%B0%E4%BA%BA%E5%85%A5%E8%81%8C/"/>
    
      <category term="培训管理" scheme="//www.zwting.com/tags/%E5%9F%B9%E8%AE%AD%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建自动式发包平台</title>
    <link href="//www.zwting.com/2017/05/16/team-6/"/>
    <id>//www.zwting.com/2017/05/16/team-6/</id>
    <published>2017-05-16T07:51:47.000Z</published>
    <updated>2017-05-16T09:55:05.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>在客户端和服务端都准备完备的前提下，需要实现游戏自助切换版本上线，以往都是运维手工切版本上线，且流程冗长，内容繁多，一不小心就会出问题，而且具体发版的内容需要和后端研发和运营反复核对，所以做此系统用来解决在运营期间每次发版本的问题。<br><a id="more"></a></p><h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><ol><li>建立工作流，每个工作流由多个任务构成，任务由多个任务节点构点，任务节点和运维脚本一一对应</li><li>多个工作流中的任务标有执行次序，在执行失败时可重试</li><li>多个任务节点的执行标有执行次序</li><li>工作流依托于服务器，工作流的执行时指定所需依赖的服务器集群</li><li>运维配置工作流与操作人执行的工作流是分开使用的，配置工作流配置完毕，由执行人反复使用</li></ol><p><strong>有益的思考+坚持做事情，这才是真正有意思上的勤奋。勤奋不是为了努力，是为了偷懒。怎么的偷懒？就是更快地把事情做完，做好，是让自己能做以前做不到的事情！</strong></p><pre><code>仅属个人观点, 可以随意转载但保留以下信息作者：极品黑公子邮箱：x0hcker@gmail.com日期：2017-05-16</code></pre>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建自动式出包平台</title>
    <link href="//www.zwting.com/2017/05/13/team-5/"/>
    <id>//www.zwting.com/2017/05/13/team-5/</id>
    <published>2017-05-13T07:51:47.000Z</published>
    <updated>2017-05-16T09:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>有益的思考+坚持做事情，这才是真正有意思上的勤奋。勤奋不是为了努力，是为了偷懒。怎么的偷懒？就是更快地把事情做完，做好，是让自己能做以前做不到的事情！<br><a id="more"></a></p><h2 id="游戏业务自助系统搭建"><a href="#游戏业务自助系统搭建" class="headerlink" title="游戏业务自助系统搭建"></a>游戏业务自助系统搭建</h2><p>游戏研发人员，在研发过程中涉及到客户端、服务端的更新，游戏客户端和游戏服务端的搭建，需要系统化编排工作流，减少手工的错误，加快搭建速度，尽量做到多人多游戏搭建，统一化工作流。<br>首先是游戏自助发包系统，我们且不讨论前端怎么样操作，只讨论流程。我们想要实现测试或者运营自助出包，需要系统实现如下功能点：<br>1.<br>客户端美术资源编排<br>客户端脚本编排<br>游戏配置数据编排<br>游戏数据加密码<br>游戏数据存贮<br>游戏服务端脚本编排</p><ol><li>工作流程串连所需的工作流引擎<br>   游戏全量包打包流程<br>   游戏增量包打包流程<br>3.<br>服务端上传服务器流程<br>客户端上传CDN流程</li></ol><pre><code>仅属个人观点, 可以随意转载但保留以下信息作者：极品黑公子邮箱：x0hcker@gmail.com日期：2017-05-16</code></pre>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建自助式GM管理平台</title>
    <link href="//www.zwting.com/2017/04/27/team-8/"/>
    <id>//www.zwting.com/2017/04/27/team-8/</id>
    <published>2017-04-27T07:52:05.000Z</published>
    <updated>2017-05-12T07:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建自助式WEB业务系统</title>
    <link href="//www.zwting.com/2017/04/27/team-7/"/>
    <id>//www.zwting.com/2017/04/27/team-7/</id>
    <published>2017-04-27T07:51:59.000Z</published>
    <updated>2017-05-12T07:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建自助式运维平台</title>
    <link href="//www.zwting.com/2017/04/27/team-4/"/>
    <id>//www.zwting.com/2017/04/27/team-4/</id>
    <published>2017-04-27T07:51:43.000Z</published>
    <updated>2017-05-12T08:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>   由于运维的琐碎、故障出现的不确定性以及解决问题的不可控性的存在，所以让运维人痛并快乐着。好的架构不是设计出来的，而是一步步的演进出来的。命运就是这么难以捉摸,当你拼尽一切前进时才发现前无大道,想放弃一切后退之时却后路尽绝,最后生无可恋的纵身一跃时,希望却不知何时悄然而至。<br><a id="more"></a></p><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><h4 id="第一阶段：标准化"><a href="#第一阶段：标准化" class="headerlink" title="第一阶段：标准化"></a>第一阶段：标准化</h4><p>　　OS级别基础环境一致，配置文件统一管理，软件安装目录一致，操控方式一致，监控方式一致，日志格式一致，标准化基础建设以便将来使用起来方便。</p><h4 id="第二阶段：自动化"><a href="#第二阶段：自动化" class="headerlink" title="第二阶段：自动化"></a>第二阶段：自动化</h4><p>　　减少响应时间，减少人为因素的故障，对业务流程进行固化，将手工脚本化为界面可操作系统，权限管理聚合在一起，统一管控服务器等。</p><h4 id="第三阶段：平台化"><a href="#第三阶段：平台化" class="headerlink" title="第三阶段：平台化"></a>第三阶段：平台化</h4><p>　　相对于自动化来讲平台化，讲究的更为人性化，屏蔽硬代码，使各方人员的操作习惯形成工作流，然后给大家更大的自主权。比如可自主的申请权限操作、可自主的发布游戏版本、可自主的查看各集群报错等。</p><h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><p>运维工具的核心点在于任务调度平台构建的搭建。游戏运维日常内容种类繁多、零散、多变，当以定制化系统来应对时，会经常需要麻烦开发人员改动代码来适应运维场景，所以借鉴OA、CMS系统定制化工作流以此来应对，这样减少开发人员相应的工作量，也可以使运维利用自己最熟悉的 shell、python在不改动页面的前提下，尽快完成功能的开发，加快项目的落地。</p><h4 id="第一：定制工作流"><a href="#第一：定制工作流" class="headerlink" title="第一：定制工作流"></a>第一：定制工作流</h4><p>基于运维人员对各个工作流统一命名、统一部署、统一使用，使得基础环境一致性得以落地使用，并将日常工作内容固化。<br>工作流元素：工作流(多个)任务节点(具有优先级)(多个)进程节点(具有优先级)<br>工作流参数：在执行过程中可替换<br>在定制过程中尽量保证工作流的原子性，一个工作流只做一件事。不要出现歧义</p><h4 id="第二：执行工作流"><a href="#第二：执行工作流" class="headerlink" title="第二：执行工作流"></a>第二：执行工作流</h4><p>定制的工作流可在任意集群上执行，执行工作流，工作流上可填写所需变量内容。每个任务节点单独展示，使运维方便定位问题，方便定位发生在哪个服务器。</p><h4 id="第三：工作流程执行引擎"><a href="#第三：工作流程执行引擎" class="headerlink" title="第三：工作流程执行引擎"></a>第三：工作流程执行引擎</h4><p>工作流之间没有优先级、任务节点之间有优先级、进程节点之间有优先级，所以    工作流之间是并行关系，任务节点之间是串行关系，进程节点之间是串行关系。在描述这一切时忽略了服务器之间并行的关系，而所有的任务节点其实是作用到服务器上，同一个任务节点的不同进程节点是在同一台服务器上执行的。在工作流数增大或者单个工作流延时比较长的情况下，需要考虑分布执行的情况，用生产者和消费者加锁的方案解决。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      由于运维的琐碎、故障出现的不确定性以及解决问题的不可控性的存在，所以让运维人痛并快乐着。好的架构不是设计出来的，而是一步步的演进出来的description里面
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样搭建CMDB管理平台</title>
    <link href="//www.zwting.com/2017/04/27/team-3/"/>
    <id>//www.zwting.com/2017/04/27/team-3/</id>
    <published>2017-04-27T07:51:40.000Z</published>
    <updated>2017-05-12T08:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>公司级业务支撑平台工程环境搭建需要依赖的最基本因素就是信息。信息间的层次感直接会导致业务级平台的层次构成。数据+API 是信息化工程的基本要素，我们在支撑业务搭建过程中要做到数据的集中化管理，数据在集中化过程中不断的分享数据，使数据流通起来，这样使得数据间形成一个闭环，相互促进、相互监督，在分享中提高质量，在提高过程中不断的分享。<br>数据库的设计并非越复杂越好，简单明了，在遵守第一范式和第二范式的同时，要适当的冗余数据，业务流程复杂程序会承几何式下降。在做数据设计时尽量做到适度适时适合！<br><a id="more"></a></p><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>CMDB业务视角，决定了数据的构成，请参考以下视角因素。</p><ul><li>运维视角：<ul><li>处理故障时需要了解游戏跑在IDC的集群上，所在集群的服务器IP列表，每个服务器上启动着哪些应用服务。</li></ul></li><li>运营视角：<ul><li>游戏上跑着逻辑平台，逻辑平台跑着区服。</li></ul></li><li>商务渠道视角：<ul><li>游戏上跑着SDK渠道，每个渠道的收入及留存。</li></ul></li><li>广告渠道视角：<ul><li>游戏上跑着广告渠道。广告为游戏引入的流量的转化率。</li></ul></li><li>财务视角：<ul><li>游戏跑在哪家的IDC上，各个家IDC的成本，各个游戏的成本。</li></ul></li><li>平台流程视角：<ul><li>统一接口输入</li><li>统一接口输出</li><li>统一游戏、集群、平台等代号</li><li>统一账号、权限</li></ul></li><li>游戏研发视角：<ul><li>全区全服游戏</li><li>单区单服游戏</li></ul></li></ul><h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><p>•    CMDB的数据的（全区全服）业务关系图参考</p><p><img src="/img/3-1.png" width="600" height="350" align="center"></p><p>  如图所示：在全区全服的游戏中，多个服务器组成一个物理集群，一个物理集群上可以跑多个逻辑集群环境用于业务环境。每个物理集群上可以跑多个区服，由业务运营决定区服是否属于同一业务逻辑集群。</p><p><img src="/img/3-2.png" width="600" height="350" align="center"><br>       如图所示：在全区全服的游戏中，一个业务模块往往由一个小规模的集群构成，解决业务模块的单点问题。在一台服务器上执行多个应用进程，提高服务器利用率，尽量使磁盘IO的业务放在RRD的服务器上，CPUIO高的业务放到内核优化的服务器上。最后由多个业务模块组成一个游戏平台，这样既可保持高可用又可提高运行效率，达到最优化的配置。<br>        业务如此也就要求在CMDB中记录各级依赖关系。由不同服务器的进程组成不同的服务集群，各个服务器的相同业务进程挂载到负载均衡上提供服务。此间所涉及到所有元素都要在CMDB有所记录。</p><p><img src="/img/3-3.png" width="600" height="350" align="center"><br>如图所示：以MongoDB为例，以一主一从一促裁的副本集方式向外提供服务。在搭建环境过程中，需要确认每个服务器的角色以及使用端口，数据存贮位置以及副本集名称，而且也必须要考虑多台服务器的情况。</p><p><img src="/img/3-4.png" width="600" height="350" align="center"><br>如图所示：游戏服务模块都是由不同的程序进程组成的，比如KAKURA，它负责长连接、玩家数据的路由、玩家的聊天、消息的推送等等，由于功能的多样性会涉及到数据库，缓存、NGINX、PHP、NODEJS以及Python脚本，不同的进程放在不同的负载之后提供服务，既对内通信又对外通信。<br>业务模块组成元素、各进程的信息、不同的负载的挂载方式都需要在CMDB中做记录.</p><pre><code>仅属个人观点, 可以随意转载但保留以下信息作者：极品黑公子邮箱：x0hcker@gmail.com</code></pre>]]></content>
    
    <summary type="html">
    
      公司级业务支撑平台工程环境搭建需要依赖的最基本因素就是信息。信息间的层次感直接会导致业务级平台的层次构成。数据+API 是信息化工程的基本要素，我们在支撑业务搭建过程中要做到数据的集中化管理。
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>支撑部门介绍</title>
    <link href="//www.zwting.com/2017/04/27/team-1/"/>
    <id>//www.zwting.com/2017/04/27/team-1/</id>
    <published>2017-04-27T07:51:27.000Z</published>
    <updated>2017-05-12T08:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>一个部门的成立，总是要有理由的；一个项目的建立，总是要有目的的。游戏支撑团队的为什么存在？简单的概括一下：</p><ul><li>1.研发手里面开发的工作忙不过来</li><li>2.周边系统的业务偏离研发主体业务</li><li>3.自己做不专业达不到要求团队诉求</li><li>4.有些领域研发真的搞不定，需要专业的人</li></ul><p>于是，研发体系中打杂部分分离开来，首先出现的是运维和业务支撑系统的开发人员，其他人员会随着业务的分离和专业性要求不断的出现在部门体系中。个人建议在部门最初建时最好有QA部门，因为只有生产部门没有质检部门，会出现质量下降，做而无果的现象出现，对于整个组织发展来讲，会是一个很大的损失，所以一开始就在尽量避免此类事情的发生。好下面我们来定义部门的组织加构和支撑部门到底是怎样的一个部门。<br><a id="more"></a></p><h2 id="部门定义及定位"><a href="#部门定义及定位" class="headerlink" title="部门定义及定位"></a>部门定义及定位</h2><ul><li>负责公司游戏项目在研发、内测、删档测试、公测、正式上线过程中基础服务搭建的部门；</li><li>研发（除游戏专项研发之外）周边辅助系统的部门；</li><li>研发企业级应用（OA类似）系统的部门；</li><li>对公司管理范围内的项目，运行运维、维护、改进、改造、监控的部门；</li><li>满足运营要求，保证游戏运营稳定工作，提高用户（包括客户，管理员）满意度的部门。</li><li>对于游戏服务架构深入发解，发现问题，并对问题进行抽象解决，消化和理解项目组需求，转换为可行的解决方案，并推而广之。</li></ul><h2 id="人员业务组织结构"><a href="#人员业务组织结构" class="headerlink" title="人员业务组织结构"></a>人员业务组织结构</h2><ul><li>运维：运维负责人、网络运维、系统运维、业务运维    </li><li>数据：数据负责人、hadoop数据开发、hadoop脚本开发</li><li>开发：开发负责人、WEB开发、脚本开发</li><li>前端：前端负责人、前端开发人员</li><li>移动： 移动负责人、IOS开发、Android开发</li><li>测试：测试负责人、测试人员</li></ul><h2 id="业务内容解释"><a href="#业务内容解释" class="headerlink" title="业务内容解释"></a>业务内容解释</h2><ul><li>运维：负责机房服务器上下架、网络安全和通畅、服务器管理、基础环境搭建、游戏平台环境搭建。</li><li>数据：负责数据仓库、数据集市、维度数据的统筹工作以及ETL内容，为玩家消费趋势分析、游戏关卡分析、玩家行为日志分析提供数据支持， 为开发人员、运营、商务、财务、高管等人员提供数据类的API。</li><li>开发：负责社区官网、游戏平台登录支付，游戏活动、GM工具、数据报告分析、运维管理工具、OA企业应用、UCENTER用户统一入口平台、基础信息管理系统等以及基础信息化的API开放平台工作等开发工作，负责平台流程布道任务。</li><li>前端：为开发提供前端界面，保证各个浏览器的监容性，保证手机端和PC端的适用性。</li><li>移动：负责在游戏平台登录支付手机端的开发工作，屏蔽各家渠道的区别，统一化接口，实现一平台接入，各平台适用的原则，保证游戏端统一使用，减少游戏研发的工作量和接入难度。</li><li>测试：负责开发人员交付产品的验收工作。需要根据规格说明书做相关测试用例以及安排压力测试等工作。为产品质量保驾护航。</li></ul><h2 id="部门理念"><a href="#部门理念" class="headerlink" title="部门理念"></a>部门理念</h2><ul><li>项目立项通过做立项报告会、需求规格说明书、迭代计划任务列表保证项目的可控范围。</li><li>迭代计划执行过程中通过每天的例会、迭代计划会、迭代总结会、迭代交付形成项目开发过程中的时间燃尽图和项目的甘特图，多个时间点保证目标的正确性和及时准确性保证项目进度的正常进行。</li><li>项目完毕后，通过项目总结会向需求方做最后项目的交付，开发、测试、运维和用户明确各环节负责人，保证线上环境的持续性可用。</li><li>项目落地后需为用户提供及时准确的问题回馈手段，保证线上的可用和下次迭代功能的收集工作。</li><li>技术人员方向：技术架构师+业务架构师。技术服务于业务的成长，业务带来技术的提高</li><li>管理人员方向：利用敏捷管理的理念，对于团队依照业务层动态来组建团队，通过几个项目的磨合达到团队规模可控，工作流程可复制、技术和管理理念可进化的团队。</li><li>对新事务的态度：采用稳定通用性技术方案，保证项目的完成度。对新技术的态度，提倡自我调研分享，部门负责人同意之后，在新项目中小范围实施测试，各方同意后大面积布道使用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      研发体系中打杂部分分离开来，首先出现的是运维和业务支撑系统的开发人员，其他人员会随着业务的分离和专业性要求不断的出现在部门体系中。
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>目录索引</title>
    <link href="//www.zwting.com/2017/04/04/team-0/"/>
    <id>//www.zwting.com/2017/04/04/team-0/</id>
    <published>2017-04-04T09:09:59.000Z</published>
    <updated>2017-05-12T07:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h2 id="1-支撑部门介绍"><a href="#1-支撑部门介绍" class="headerlink" title="1. 支撑部门介绍"></a>1. <a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-1" target="_blank" rel="external">支撑部门介绍</a></h2><h4 id="1-１-部门定义及组织架构"><a href="#1-１-部门定义及组织架构" class="headerlink" title="1.１ 部门定义及组织架构"></a>1.１ 部门定义及组织架构</h4><h4 id="1-2-部门业务定位"><a href="#1-2-部门业务定位" class="headerlink" title="1.2 部门业务定位"></a>1.2 部门业务定位</h4><h4 id="1-３-部门管理理念"><a href="#1-３-部门管理理念" class="headerlink" title="1.３ 部门管理理念"></a>1.３ 部门管理理念</h4><h2 id="2-业务环境概述"><a href="#2-业务环境概述" class="headerlink" title="2.业务环境概述"></a>2.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-2" target="_blank" rel="external">业务环境概述</a></h2><h4 id="2-1-游戏服务器架构"><a href="#2-1-游戏服务器架构" class="headerlink" title="2.1 游戏服务器架构"></a>2.1 游戏服务器架构</h4><h4 id="2-1-支撑体系架构"><a href="#2-1-支撑体系架构" class="headerlink" title="2.1 支撑体系架构"></a>2.1 支撑体系架构</h4><h2 id="3-怎样搭建CMDB管理平台"><a href="#3-怎样搭建CMDB管理平台" class="headerlink" title="3.怎样搭建CMDB管理平台"></a>3.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-3" target="_blank" rel="external">怎样搭建CMDB管理平台</a></h2><h4 id="3-1-业务背景"><a href="#3-1-业务背景" class="headerlink" title="3.1 业务背景"></a>3.1 业务背景</h4><h4 id="3-2-业务架构"><a href="#3-2-业务架构" class="headerlink" title="3.2 业务架构"></a>3.2 业务架构</h4><h4 id="3-3-数据组织结构"><a href="#3-3-数据组织结构" class="headerlink" title="3.3 数据组织结构"></a>3.3 数据组织结构</h4><h2 id="４-怎样搭建自助式运维平台"><a href="#４-怎样搭建自助式运维平台" class="headerlink" title="４.怎样搭建自助式运维平台"></a>４.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-4" target="_blank" rel="external">怎样搭建自助式运维平台</a></h2><h4 id="4-1-业务背景"><a href="#4-1-业务背景" class="headerlink" title="4.1 业务背景"></a>4.1 业务背景</h4><h4 id="4-2-业务架构"><a href="#4-2-业务架构" class="headerlink" title="4.2 业务架构"></a>4.2 业务架构</h4><h4 id="4-3-服务器结构"><a href="#4-3-服务器结构" class="headerlink" title="4.3 服务器结构"></a>4.3 服务器结构</h4><h2 id="5-怎样搭建手游自助式出包平台"><a href="#5-怎样搭建手游自助式出包平台" class="headerlink" title="5.怎样搭建手游自助式出包平台"></a>5.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-5" target="_blank" rel="external">怎样搭建手游自助式出包平台</a></h2><h2 id="6-怎样搭建自助式游戏业务系统"><a href="#6-怎样搭建自助式游戏业务系统" class="headerlink" title="6.怎样搭建自助式游戏业务系统"></a>6.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-6" target="_blank" rel="external">怎样搭建自助式游戏业务系统</a></h2><h2 id="7-怎样搭建自助式WEB业务系统"><a href="#7-怎样搭建自助式WEB业务系统" class="headerlink" title="7.怎样搭建自助式WEB业务系统"></a>7.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-6" target="_blank" rel="external">怎样搭建自助式WEB业务系统</a></h2><h2 id="8-怎样搭建自助式GM管理平台"><a href="#8-怎样搭建自助式GM管理平台" class="headerlink" title="8.怎样搭建自助式GM管理平台"></a>8.<a href="https://www.zwting.com/2017/04/27/游戏技术支撑团队如何建立-6" target="_blank" rel="external">怎样搭建自助式GM管理平台</a></h2><h2 id="9-怎样搭建登录充账平台"><a href="#9-怎样搭建登录充账平台" class="headerlink" title="9.怎样搭建登录充账平台"></a>9.怎样搭建登录充账平台</h2><h2 id="10-怎样搭建广告平台"><a href="#10-怎样搭建广告平台" class="headerlink" title="10.怎样搭建广告平台"></a>10.怎样搭建广告平台</h2><h2 id="11-怎样搭建数据管理平台"><a href="#11-怎样搭建数据管理平台" class="headerlink" title="11.怎样搭建数据管理平台"></a>11.怎样搭建数据管理平台</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅属个人观点, 可以随意转载但保留以下信息</div><div class="line">作者：极品黑公子</div><div class="line">邮箱：<span class="selector-tag">x0hcker</span>@<span class="keyword">gmail</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      游戏技术支撑团队如何建立
    
    </summary>
    
      <category term="游戏支撑团队如何建立" scheme="//www.zwting.com/categories/%E6%B8%B8%E6%88%8F%E6%94%AF%E6%92%91%E5%9B%A2%E9%98%9F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B/"/>
    
    
      <category term="运维" scheme="//www.zwting.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="//www.zwting.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="大数据" scheme="//www.zwting.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="QA" scheme="//www.zwting.com/tags/QA/"/>
    
      <category term="SDK开发" scheme="//www.zwting.com/tags/SDK%E5%BC%80%E5%8F%91/"/>
    
      <category term="技术管理" scheme="//www.zwting.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
